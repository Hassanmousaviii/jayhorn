
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Mar 05 09:22:47 EST 2017
//----------------------------------------------------

package soottocfg.ast;


/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Mar 05 09:22:47 EST 2017
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\210\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\005\005\000\002\005\007\000\002" +
    "\005\005\000\002\006\005\000\002\006\010\000\002\007" +
    "\002\000\002\007\004\000\002\010\005\000\002\011\003" +
    "\000\002\011\005\000\002\012\003\000\002\012\005\000" +
    "\002\013\003\000\002\014\003\000\002\014\005\000\002" +
    "\015\005\000\002\016\002\000\002\016\004\000\002\017" +
    "\003\000\002\020\003\000\002\020\005\000\002\021\003" +
    "\000\002\022\006\000\002\022\010\000\002\023\004\000" +
    "\002\023\005\000\002\024\002\000\002\024\003\000\002" +
    "\024\005\000\002\025\003\000\002\025\003\000\002\026" +
    "\005\000\002\027\005\000\002\027\006\000\002\027\003" +
    "\000\002\030\002\000\002\030\004\000\002\031\004\000" +
    "\002\031\006\000\002\031\007\000\002\031\011\000\002" +
    "\031\005\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\032\003" +
    "\000\002\033\003\000\002\033\005\000\002\034\003\000" +
    "\002\035\003\000\002\035\005\000\002\036\007\000\002" +
    "\036\007\000\002\037\005\000\002\037\004\000\002\037" +
    "\005\000\002\040\007\000\002\040\010\000\002\041\010" +
    "\000\002\041\012\000\002\042\010\000\002\043\002\000" +
    "\002\043\004\000\002\044\011\000\002\044\007\000\002" +
    "\044\005\000\002\045\005\000\002\045\003\000\002\046" +
    "\007\000\002\046\003\000\002\047\005\000\002\047\003" +
    "\000\002\050\005\000\002\050\003\000\002\051\005\000" +
    "\002\051\003\000\002\052\005\000\002\052\003\000\002" +
    "\053\005\000\002\053\003\000\002\054\005\000\002\054" +
    "\005\000\002\054\003\000\002\055\005\000\002\055\005" +
    "\000\002\055\005\000\002\055\005\000\002\055\003\000" +
    "\002\056\005\000\002\056\005\000\002\056\005\000\002" +
    "\056\003\000\002\057\005\000\002\057\005\000\002\057" +
    "\003\000\002\060\005\000\002\060\005\000\002\060\005" +
    "\000\002\060\003\000\002\061\004\000\002\061\003\000" +
    "\002\062\003\000\002\062\003\000\002\062\003\000\002" +
    "\062\003\000\002\063\003\000\002\063\005\000\002\064" +
    "\003\000\002\065\003\000\002\066\005\000\002\067\005" +
    "\000\002\067\003\000\002\067\003\000\002\070\003\000" +
    "\002\070\003\000\002\071\003\000\002\072\003\000\002" +
    "\072\003\000\002\072\003\000\002\072\003\000\002\073" +
    "\003\000\002\073\003\000\002\073\003\000\002\073\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\374\000\026\002\ufff2\006\ufff2\045\ufff2\046\ufff2\050" +
    "\ufff2\055\ufff2\063\ufff2\064\ufff2\073\ufff2\100\ufff2\001\002" +
    "\000\026\002\000\006\014\045\023\046\022\050\021\055" +
    "\020\063\016\064\015\073\012\100\017\001\002\000\004" +
    "\002\006\001\002\000\004\002\001\001\002\000\004\100" +
    "\066\001\002\000\004\100\uffed\001\002\000\026\002\ufff1" +
    "\006\ufff1\045\ufff1\046\ufff1\050\ufff1\055\ufff1\063\ufff1\064" +
    "\ufff1\073\ufff1\100\ufff1\001\002\000\016\007\ufff9\010\ufff9" +
    "\011\ufff9\012\ufff9\014\ufff9\100\ufff9\001\002\000\016\007" +
    "\uffff\010\uffff\011\uffff\012\uffff\014\uffff\100\uffff\001\002" +
    "\000\020\045\023\050\021\055\020\063\016\064\015\073" +
    "\012\100\017\001\002\000\016\007\ufffc\010\ufffc\011\ufffc" +
    "\012\ufffc\014\ufffc\100\ufffc\001\002\000\016\007\ufffd\010" +
    "\ufffd\011\ufffd\012\ufffd\014\ufffd\100\ufffd\001\002\000\016" +
    "\007\ufffe\010\ufffe\011\ufffe\012\ufffe\014\ufffe\100\ufffe\001" +
    "\002\000\016\007\ufffb\010\ufffb\011\ufffb\012\ufffb\014\ufffb" +
    "\100\ufffb\001\002\000\016\007\ufffa\010\ufffa\011\ufffa\012" +
    "\ufffa\014\ufffa\100\ufffa\001\002\000\004\100\024\001\002" +
    "\000\016\007\ufff8\010\ufff8\011\ufff8\012\ufff8\014\ufff8\100" +
    "\ufff8\001\002\000\010\004\026\006\025\052\030\001\002" +
    "\000\004\100\046\001\002\000\022\005\uffe7\045\uffe7\050" +
    "\uffe7\055\uffe7\063\uffe7\064\uffe7\073\uffe7\100\uffe7\001\002" +
    "\000\026\002\ufff7\006\ufff7\045\ufff7\046\ufff7\050\ufff7\055" +
    "\ufff7\063\ufff7\064\ufff7\073\ufff7\100\ufff7\001\002\000\004" +
    "\100\031\001\002\000\006\004\026\006\025\001\002\000" +
    "\026\002\ufff6\006\ufff6\045\ufff6\046\ufff6\050\ufff6\055\ufff6" +
    "\063\ufff6\064\ufff6\073\ufff6\100\ufff6\001\002\000\022\005" +
    "\035\045\023\050\021\055\020\063\016\064\015\073\012" +
    "\100\017\001\002\000\004\100\040\001\002\000\026\002" +
    "\ufff4\006\ufff4\045\ufff4\046\ufff4\050\ufff4\055\ufff4\063\ufff4" +
    "\064\ufff4\073\ufff4\100\ufff4\001\002\000\022\005\uffe6\045" +
    "\uffe6\050\uffe6\055\uffe6\063\uffe6\064\uffe6\073\uffe6\100\uffe6" +
    "\001\002\000\004\012\044\001\002\000\006\011\uffe5\012" +
    "\uffe5\001\002\000\006\011\042\012\uffe4\001\002\000\004" +
    "\100\040\001\002\000\004\012\uffe3\001\002\000\022\005" +
    "\uffe8\045\uffe8\050\uffe8\055\uffe8\063\uffe8\064\uffe8\073\uffe8" +
    "\100\uffe8\001\002\000\004\007\054\001\002\000\004\010" +
    "\052\001\002\000\006\007\uffef\011\050\001\002\000\004" +
    "\100\046\001\002\000\004\007\uffee\001\002\000\020\045" +
    "\023\050\021\055\020\063\016\064\015\073\012\100\017" +
    "\001\002\000\006\007\ufff0\011\ufff0\001\002\000\004\004" +
    "\055\001\002\000\022\005\uffe7\045\uffe7\050\uffe7\055\uffe7" +
    "\063\uffe7\064\uffe7\073\uffe7\100\uffe7\001\002\000\022\005" +
    "\057\045\023\050\021\055\020\063\016\064\015\073\012" +
    "\100\017\001\002\000\026\002\ufff3\006\ufff3\045\ufff3\046" +
    "\ufff3\050\ufff3\055\ufff3\063\ufff3\064\ufff3\073\ufff3\100\ufff3" +
    "\001\002\000\006\007\uffeb\011\uffeb\001\002\000\006\007" +
    "\uffea\011\064\001\002\000\004\007\063\001\002\000\004" +
    "\100\uffec\001\002\000\020\045\023\050\021\055\020\063" +
    "\016\064\015\073\012\100\017\001\002\000\004\007\uffe9" +
    "\001\002\000\010\011\uffe2\013\uffe2\014\uffe2\001\002\000" +
    "\004\013\362\001\002\000\006\004\071\012\074\001\002" +
    "\000\050\004\uffd4\005\uffd4\043\uffd4\044\uffd4\045\uffd4\047" +
    "\uffd4\050\uffd4\054\uffd4\055\uffd4\056\uffd4\057\uffd4\060\uffd4" +
    "\063\uffd4\064\uffd4\070\uffd4\071\uffd4\073\uffd4\074\uffd4\100" +
    "\uffd4\001\002\000\026\002\ufff5\006\ufff5\045\ufff5\046\ufff5" +
    "\050\ufff5\055\ufff5\063\ufff5\064\ufff5\073\ufff5\100\ufff5\001" +
    "\002\000\026\002\uffd9\006\uffd9\045\uffd9\046\uffd9\050\uffd9" +
    "\055\uffd9\063\uffd9\064\uffd9\073\uffd9\100\uffd9\001\002\000" +
    "\026\002\uffda\006\uffda\045\uffda\046\uffda\050\uffda\055\uffda" +
    "\063\uffda\064\uffda\073\uffda\100\uffda\001\002\000\050\004" +
    "\120\005\117\043\104\044\103\045\023\047\077\050\021" +
    "\054\115\055\020\056\113\057\111\060\110\063\016\064" +
    "\015\070\123\071\122\073\012\074\121\100\102\001\002" +
    "\000\004\015\347\001\002\000\030\004\120\043\104\044" +
    "\103\047\077\056\113\057\111\060\110\070\123\071\122" +
    "\074\121\100\267\001\002\000\050\004\uffd5\005\uffd5\043" +
    "\uffd5\044\uffd5\045\uffd5\047\uffd5\050\uffd5\054\uffd5\055\uffd5" +
    "\056\uffd5\057\uffd5\060\uffd5\063\uffd5\064\uffd5\070\uffd5\071" +
    "\uffd5\073\uffd5\074\uffd5\100\uffd5\001\002\000\052\004\uffcc" +
    "\005\uffcc\043\uffcc\044\uffcc\045\uffcc\047\uffcc\050\uffcc\051" +
    "\uffcc\054\uffcc\055\uffcc\056\uffcc\057\uffcc\060\uffcc\063\uffcc" +
    "\064\uffcc\070\uffcc\071\uffcc\073\uffcc\074\uffcc\100\uffcc\001" +
    "\002\000\012\010\270\011\uffc5\015\271\100\ufffe\001\002" +
    "\000\004\013\336\001\002\000\004\013\332\001\002\000" +
    "\052\004\uffc9\005\uffc9\043\uffc9\044\uffc9\045\uffc9\047\uffc9" +
    "\050\uffc9\051\uffc9\054\uffc9\055\uffc9\056\uffc9\057\uffc9\060" +
    "\uffc9\063\uffc9\064\uffc9\070\uffc9\071\uffc9\073\uffc9\074\uffc9" +
    "\100\uffc9\001\002\000\010\011\330\012\uffc4\015\uffc4\001" +
    "\002\000\052\004\uffca\005\uffca\043\uffca\044\uffca\045\uffca" +
    "\047\uffca\050\uffca\051\uffca\054\uffca\055\uffca\056\uffca\057" +
    "\uffca\060\uffca\063\uffca\064\uffca\070\uffca\071\uffca\073\uffca" +
    "\074\uffca\100\uffca\001\002\000\004\013\313\001\002\000" +
    "\004\100\305\001\002\000\004\100\040\001\002\000\004" +
    "\100\305\001\002\000\050\004\uffd3\005\uffd3\043\uffd3\044" +
    "\uffd3\045\uffd3\047\uffd3\050\uffd3\054\uffd3\055\uffd3\056\uffd3" +
    "\057\uffd3\060\uffd3\063\uffd3\064\uffd3\070\uffd3\071\uffd3\073" +
    "\uffd3\074\uffd3\100\uffd3\001\002\000\020\045\023\050\021" +
    "\055\020\063\016\064\015\073\012\100\017\001\002\000" +
    "\052\004\uffcd\005\uffcd\043\uffcd\044\uffcd\045\uffcd\047\uffcd" +
    "\050\uffcd\051\uffcd\054\uffcd\055\uffcd\056\uffcd\057\uffcd\060" +
    "\uffcd\063\uffcd\064\uffcd\070\uffcd\071\uffcd\073\uffcd\074\uffcd" +
    "\100\uffcd\001\002\000\026\002\uffd8\006\uffd8\045\uffd8\046" +
    "\uffd8\050\uffd8\055\uffd8\063\uffd8\064\uffd8\073\uffd8\100\uffd8" +
    "\001\002\000\050\004\uffd4\005\uffd4\043\uffd4\044\uffd4\045" +
    "\uffd4\047\uffd4\050\uffd4\054\uffd4\055\uffd4\056\uffd4\057\uffd4" +
    "\060\uffd4\063\uffd4\064\uffd4\070\uffd4\071\uffd4\073\uffd4\074" +
    "\uffd4\100\uffd4\001\002\000\004\013\263\001\002\000\032" +
    "\012\260\013\127\033\155\034\154\041\151\042\145\053" +
    "\140\066\157\072\156\076\131\077\164\100\130\001\002" +
    "\000\004\013\125\001\002\000\052\004\uffcb\005\uffcb\043" +
    "\uffcb\044\uffcb\045\uffcb\047\uffcb\050\uffcb\051\uffcb\054\uffcb" +
    "\055\uffcb\056\uffcb\057\uffcb\060\uffcb\063\uffcb\064\uffcb\070" +
    "\uffcb\071\uffcb\073\uffcb\074\uffcb\100\uffcb\001\002\000\030" +
    "\013\127\033\155\034\154\041\151\042\145\053\140\066" +
    "\157\072\156\076\131\077\164\100\130\001\002\000\066" +
    "\006\uff8e\007\uff8e\010\uff8e\011\uff8e\012\uff8e\014\uff8e\016" +
    "\uff8e\017\uff8e\020\uff8e\021\uff8e\022\uff8e\023\uff8e\024\uff8e" +
    "\025\uff8e\026\uff8e\027\uff8e\030\uff8e\031\uff8e\032\uff8e\033" +
    "\uff8e\034\uff8e\035\uff8e\036\uff8e\037\uff8e\040\uff84\062\uff8e" +
    "\001\002\000\030\013\127\033\155\034\154\041\151\042" +
    "\145\053\140\066\157\072\156\076\131\077\164\100\130" +
    "\001\002\000\064\006\uff8c\007\uff8c\010\uff8c\011\uff8c\012" +
    "\uff8c\014\uff8c\016\uff8c\017\uff8c\020\uff8c\021\uff8c\022\uff8c" +
    "\023\uff8c\024\uff8c\025\uff8c\026\uff8c\027\uff8c\030\uff8c\031" +
    "\uff8c\032\uff8c\033\uff8c\034\uff8c\035\uff8c\036\uff8c\037\uff8c" +
    "\062\uff8c\001\002\000\066\006\uff80\007\uff80\010\uff80\011" +
    "\uff80\012\uff80\014\uff80\016\uff80\017\uff80\020\uff80\021\uff80" +
    "\022\uff80\023\uff80\024\uff80\025\uff80\026\uff80\027\uff80\030" +
    "\uff80\031\uff80\032\uff80\033\uff80\034\uff80\035\uff80\036\uff80" +
    "\037\uff80\040\uff80\062\uff80\001\002\000\042\006\243\007" +
    "\242\010\uffa3\011\uffa3\012\uffa3\014\uffa3\016\uffa3\017\uffa3" +
    "\020\uffa3\021\uffa3\022\uffa3\023\uffa3\024\uffa3\025\uffa3\026" +
    "\245\027\244\001\002\000\032\010\uffa6\011\uffa6\012\uffa6" +
    "\014\uffa6\016\uffa6\017\uffa6\020\uffa6\021\uffa6\022\uffa6\023" +
    "\uffa6\024\240\025\237\001\002\000\026\010\uffa8\011\uffa8" +
    "\012\uffa8\014\uffa8\016\uffa8\017\uffa8\020\uffa8\021\uffa8\022" +
    "\uffa8\023\235\001\002\000\024\010\uffaa\011\uffaa\012\uffaa" +
    "\014\uffaa\016\uffaa\017\uffaa\020\uffaa\021\uffaa\022\233\001" +
    "\002\000\022\010\uffac\011\uffac\012\uffac\014\uffac\016\uffac" +
    "\017\uffac\020\uffac\021\231\001\002\000\020\010\uffae\011" +
    "\uffae\012\uffae\014\uffae\016\uffae\017\uffae\020\227\001\002" +
    "\000\066\006\uff7e\007\uff7e\010\uff7e\011\uff7e\012\uff7e\014" +
    "\uff7e\016\uff7e\017\uff7e\020\uff7e\021\uff7e\022\uff7e\023\uff7e" +
    "\024\uff7e\025\uff7e\026\uff7e\027\uff7e\030\uff7e\031\uff7e\032" +
    "\uff7e\033\uff7e\034\uff7e\035\uff7e\036\uff7e\037\uff7e\040\uff7e" +
    "\062\uff7e\001\002\000\016\010\uffb0\011\uffb0\012\uffb0\014" +
    "\uffb0\016\224\017\225\001\002\000\012\010\uff8a\011\uff8a" +
    "\012\uff8a\014\uff8a\001\002\000\012\010\uffb2\011\uffb2\012" +
    "\uffb2\014\uffb2\001\002\000\004\014\222\001\002\000\020" +
    "\013\uff7a\053\uff7a\066\uff7a\072\uff7a\076\uff7a\077\uff7a\100" +
    "\uff7a\001\002\000\004\040\uff86\001\002\000\020\013\127" +
    "\053\140\066\157\072\156\076\131\077\164\100\130\001" +
    "\002\000\010\011\uffc8\012\uffc8\014\uffc8\001\002\000\020" +
    "\013\uff7b\053\uff7b\066\uff7b\072\uff7b\076\uff7b\077\uff7b\100" +
    "\uff7b\001\002\000\004\040\217\001\002\000\066\006\uff8f" +
    "\007\uff8f\010\uff8f\011\uff8f\012\uff8f\014\uff8f\016\uff8f\017" +
    "\uff8f\020\uff8f\021\uff8f\022\uff8f\023\uff8f\024\uff8f\025\uff8f" +
    "\026\uff8f\027\uff8f\030\uff8f\031\uff8f\032\uff8f\033\uff8f\034" +
    "\uff8f\035\uff8f\036\uff8f\037\uff8f\040\uff83\062\uff8f\001\002" +
    "\000\020\013\uff7c\053\uff7c\066\uff7c\072\uff7c\076\uff7c\077" +
    "\uff7c\100\uff7c\001\002\000\020\013\uff7d\053\uff7d\066\uff7d" +
    "\072\uff7d\076\uff7d\077\uff7d\100\uff7d\001\002\000\066\006" +
    "\uff7f\007\uff7f\010\uff7f\011\uff7f\012\uff7f\014\uff7f\016\uff7f" +
    "\017\uff7f\020\uff7f\021\uff7f\022\uff7f\023\uff7f\024\uff7f\025" +
    "\uff7f\026\uff7f\027\uff7f\030\uff7f\031\uff7f\032\uff7f\033\uff7f" +
    "\034\uff7f\035\uff7f\036\uff7f\037\uff7f\040\uff7f\062\uff7f\001" +
    "\002\000\066\006\uff82\007\uff82\010\uff82\011\uff82\012\uff82" +
    "\014\uff82\016\uff82\017\uff82\020\uff82\021\uff82\022\uff82\023" +
    "\uff82\024\uff82\025\uff82\026\uff82\027\uff82\030\uff82\031\uff82" +
    "\032\uff82\033\uff82\034\uff82\035\uff82\036\uff82\037\uff82\040" +
    "\uff82\062\uff82\001\002\000\064\006\uff8d\007\uff8d\010\uff8d" +
    "\011\uff8d\012\uff8d\014\uff8d\016\uff8d\017\uff8d\020\uff8d\021" +
    "\uff8d\022\uff8d\023\uff8d\024\uff8d\025\uff8d\026\uff8d\027\uff8d" +
    "\030\uff8d\031\uff8d\032\uff8d\033\uff8d\034\uff8d\035\uff8d\036" +
    "\uff8d\037\uff8d\062\uff8d\001\002\000\064\006\uff91\007\uff91" +
    "\010\uff91\011\uff91\012\uff91\014\uff91\016\uff91\017\uff91\020" +
    "\uff91\021\uff91\022\uff91\023\uff91\024\uff91\025\uff91\026\uff91" +
    "\027\uff91\030\uff91\031\uff91\032\uff91\033\uff91\034\uff91\035" +
    "\uff91\036\uff91\037\uff91\062\uff91\001\002\000\064\006\uff89" +
    "\007\uff89\010\uff89\011\uff89\012\uff89\014\uff89\016\uff89\017" +
    "\uff89\020\uff89\021\uff89\022\uff89\023\uff89\024\uff89\025\uff89" +
    "\026\uff89\027\uff89\030\uff89\031\uff89\032\uff89\033\uff89\034" +
    "\uff89\035\uff89\036\uff89\037\uff89\062\215\001\002\000\062" +
    "\006\uff93\007\uff93\010\uff93\011\uff93\012\uff93\014\uff93\016" +
    "\uff93\017\uff93\020\uff93\021\uff93\022\uff93\023\uff93\024\uff93" +
    "\025\uff93\026\uff93\027\uff93\030\uff93\031\uff93\032\uff93\033" +
    "\uff93\034\uff93\035\uff93\036\uff93\037\uff93\001\002\000\066" +
    "\006\uff81\007\uff81\010\uff81\011\uff81\012\uff81\014\uff81\016" +
    "\uff81\017\uff81\020\uff81\021\uff81\022\uff81\023\uff81\024\uff81" +
    "\025\uff81\026\uff81\027\uff81\030\uff81\031\uff81\032\uff81\033" +
    "\uff81\034\uff81\035\uff81\036\uff81\037\uff81\040\uff81\062\uff81" +
    "\001\002\000\062\006\uff97\007\uff97\010\uff97\011\uff97\012" +
    "\uff97\014\uff97\016\uff97\017\uff97\020\uff97\021\uff97\022\uff97" +
    "\023\uff97\024\uff97\025\uff97\026\uff97\027\uff97\030\uff97\031" +
    "\uff97\032\uff97\033\uff97\034\uff97\035\206\036\205\037\204" +
    "\001\002\000\054\006\uff9a\007\uff9a\010\uff9a\011\uff9a\012" +
    "\uff9a\014\uff9a\016\uff9a\017\uff9a\020\uff9a\021\uff9a\022\uff9a" +
    "\023\uff9a\024\uff9a\025\uff9a\026\uff9a\027\uff9a\030\uff9a\031" +
    "\uff9a\032\uff9a\033\202\034\201\001\002\000\050\006\uff9e" +
    "\007\uff9e\010\uff9e\011\uff9e\012\uff9e\014\uff9e\016\uff9e\017" +
    "\uff9e\020\uff9e\021\uff9e\022\uff9e\023\uff9e\024\uff9e\025\uff9e" +
    "\026\uff9e\027\uff9e\030\176\031\175\032\174\001\002\000" +
    "\066\006\uff90\007\uff90\010\uff90\011\uff90\012\uff90\014\uff90" +
    "\016\uff90\017\uff90\020\uff90\021\uff90\022\uff90\023\uff90\024" +
    "\uff90\025\uff90\026\uff90\027\uff90\030\uff90\031\uff90\032\uff90" +
    "\033\uff90\034\uff90\035\uff90\036\uff90\037\uff90\040\uff85\062" +
    "\uff90\001\002\000\010\011\172\012\uffc7\014\uffc7\001\002" +
    "\000\030\013\127\033\155\034\154\041\151\042\145\053" +
    "\140\066\157\072\156\076\131\077\164\100\130\001\002" +
    "\000\006\012\uffc6\014\uffc6\001\002\000\030\013\127\033" +
    "\155\034\154\041\151\042\145\053\140\066\157\072\156" +
    "\076\131\077\164\100\130\001\002\000\030\013\127\033" +
    "\155\034\154\041\151\042\145\053\140\066\157\072\156" +
    "\076\131\077\164\100\130\001\002\000\030\013\127\033" +
    "\155\034\154\041\151\042\145\053\140\066\157\072\156" +
    "\076\131\077\164\100\130\001\002\000\054\006\uff9d\007" +
    "\uff9d\010\uff9d\011\uff9d\012\uff9d\014\uff9d\016\uff9d\017\uff9d" +
    "\020\uff9d\021\uff9d\022\uff9d\023\uff9d\024\uff9d\025\uff9d\026" +
    "\uff9d\027\uff9d\030\uff9d\031\uff9d\032\uff9d\033\202\034\201" +
    "\001\002\000\062\006\uff89\007\uff89\010\uff89\011\uff89\012" +
    "\uff89\014\uff89\016\uff89\017\uff89\020\uff89\021\uff89\022\uff89" +
    "\023\uff89\024\uff89\025\uff89\026\uff89\027\uff89\030\uff89\031" +
    "\uff89\032\uff89\033\uff89\034\uff89\035\uff89\036\uff89\037\uff89" +
    "\001\002\000\030\013\127\033\155\034\154\041\151\042" +
    "\145\053\140\066\157\072\156\076\131\077\164\100\130" +
    "\001\002\000\030\013\127\033\155\034\154\041\151\042" +
    "\145\053\140\066\157\072\156\076\131\077\164\100\130" +
    "\001\002\000\062\006\uff99\007\uff99\010\uff99\011\uff99\012" +
    "\uff99\014\uff99\016\uff99\017\uff99\020\uff99\021\uff99\022\uff99" +
    "\023\uff99\024\uff99\025\uff99\026\uff99\027\uff99\030\uff99\031" +
    "\uff99\032\uff99\033\uff99\034\uff99\035\206\036\205\037\204" +
    "\001\002\000\030\013\127\033\155\034\154\041\151\042" +
    "\145\053\140\066\157\072\156\076\131\077\164\100\130" +
    "\001\002\000\030\013\127\033\155\034\154\041\151\042" +
    "\145\053\140\066\157\072\156\076\131\077\164\100\130" +
    "\001\002\000\030\013\127\033\155\034\154\041\151\042" +
    "\145\053\140\066\157\072\156\076\131\077\164\100\130" +
    "\001\002\000\062\006\uff96\007\uff96\010\uff96\011\uff96\012" +
    "\uff96\014\uff96\016\uff96\017\uff96\020\uff96\021\uff96\022\uff96" +
    "\023\uff96\024\uff96\025\uff96\026\uff96\027\uff96\030\uff96\031" +
    "\uff96\032\uff96\033\uff96\034\uff96\035\uff96\036\uff96\037\uff96" +
    "\001\002\000\062\006\uff95\007\uff95\010\uff95\011\uff95\012" +
    "\uff95\014\uff95\016\uff95\017\uff95\020\uff95\021\uff95\022\uff95" +
    "\023\uff95\024\uff95\025\uff95\026\uff95\027\uff95\030\uff95\031" +
    "\uff95\032\uff95\033\uff95\034\uff95\035\uff95\036\uff95\037\uff95" +
    "\001\002\000\062\006\uff94\007\uff94\010\uff94\011\uff94\012" +
    "\uff94\014\uff94\016\uff94\017\uff94\020\uff94\021\uff94\022\uff94" +
    "\023\uff94\024\uff94\025\uff94\026\uff94\027\uff94\030\uff94\031" +
    "\uff94\032\uff94\033\uff94\034\uff94\035\uff94\036\uff94\037\uff94" +
    "\001\002\000\062\006\uff98\007\uff98\010\uff98\011\uff98\012" +
    "\uff98\014\uff98\016\uff98\017\uff98\020\uff98\021\uff98\022\uff98" +
    "\023\uff98\024\uff98\025\uff98\026\uff98\027\uff98\030\uff98\031" +
    "\uff98\032\uff98\033\uff98\034\uff98\035\206\036\205\037\204" +
    "\001\002\000\054\006\uff9c\007\uff9c\010\uff9c\011\uff9c\012" +
    "\uff9c\014\uff9c\016\uff9c\017\uff9c\020\uff9c\021\uff9c\022\uff9c" +
    "\023\uff9c\024\uff9c\025\uff9c\026\uff9c\027\uff9c\030\uff9c\031" +
    "\uff9c\032\uff9c\033\202\034\201\001\002\000\054\006\uff9b" +
    "\007\uff9b\010\uff9b\011\uff9b\012\uff9b\014\uff9b\016\uff9b\017" +
    "\uff9b\020\uff9b\021\uff9b\022\uff9b\023\uff9b\024\uff9b\025\uff9b" +
    "\026\uff9b\027\uff9b\030\uff9b\031\uff9b\032\uff9b\033\202\034" +
    "\201\001\002\000\020\045\023\050\021\055\020\063\016" +
    "\064\015\073\012\100\017\001\002\000\012\010\uffb3\011" +
    "\uffb3\012\uffb3\014\uffb3\001\002\000\004\100\220\001\002" +
    "\000\066\006\uff88\007\uff88\010\uff88\011\uff88\012\uff88\014" +
    "\uff88\016\uff88\017\uff88\020\uff88\021\uff88\022\uff88\023\uff88" +
    "\024\uff88\025\uff88\026\uff88\027\uff88\030\uff88\031\uff88\032" +
    "\uff88\033\uff88\034\uff88\035\uff88\036\uff88\037\uff88\040\uff88" +
    "\062\uff88\001\002\000\064\006\uff92\007\uff92\010\uff92\011" +
    "\uff92\012\uff92\014\uff92\016\uff92\017\uff92\020\uff92\021\uff92" +
    "\022\uff92\023\uff92\024\uff92\025\uff92\026\uff92\027\uff92\030" +
    "\uff92\031\uff92\032\uff92\033\uff92\034\uff92\035\uff92\036\uff92" +
    "\037\uff92\062\uff92\001\002\000\004\012\223\001\002\000" +
    "\052\004\uffb5\005\uffb5\043\uffb5\044\uffb5\045\uffb5\047\uffb5" +
    "\050\uffb5\051\uffb5\054\uffb5\055\uffb5\056\uffb5\057\uffb5\060" +
    "\uffb5\063\uffb5\064\uffb5\070\uffb5\071\uffb5\073\uffb5\074\uffb5" +
    "\100\uffb5\001\002\000\030\013\127\033\155\034\154\041" +
    "\151\042\145\053\140\066\157\072\156\076\131\077\164" +
    "\100\130\001\002\000\030\013\127\033\155\034\154\041" +
    "\151\042\145\053\140\066\157\072\156\076\131\077\164" +
    "\100\130\001\002\000\020\010\uffaf\011\uffaf\012\uffaf\014" +
    "\uffaf\016\uffaf\017\uffaf\020\227\001\002\000\030\013\127" +
    "\033\155\034\154\041\151\042\145\053\140\066\157\072" +
    "\156\076\131\077\164\100\130\001\002\000\022\010\uffad" +
    "\011\uffad\012\uffad\014\uffad\016\uffad\017\uffad\020\uffad\021" +
    "\231\001\002\000\030\013\127\033\155\034\154\041\151" +
    "\042\145\053\140\066\157\072\156\076\131\077\164\100" +
    "\130\001\002\000\024\010\uffab\011\uffab\012\uffab\014\uffab" +
    "\016\uffab\017\uffab\020\uffab\021\uffab\022\233\001\002\000" +
    "\030\013\127\033\155\034\154\041\151\042\145\053\140" +
    "\066\157\072\156\076\131\077\164\100\130\001\002\000" +
    "\026\010\uffa9\011\uffa9\012\uffa9\014\uffa9\016\uffa9\017\uffa9" +
    "\020\uffa9\021\uffa9\022\uffa9\023\235\001\002\000\030\013" +
    "\127\033\155\034\154\041\151\042\145\053\140\066\157" +
    "\072\156\076\131\077\164\100\130\001\002\000\032\010" +
    "\uffa7\011\uffa7\012\uffa7\014\uffa7\016\uffa7\017\uffa7\020\uffa7" +
    "\021\uffa7\022\uffa7\023\uffa7\024\240\025\237\001\002\000" +
    "\030\013\127\033\155\034\154\041\151\042\145\053\140" +
    "\066\157\072\156\076\131\077\164\100\130\001\002\000" +
    "\030\013\127\033\155\034\154\041\151\042\145\053\140" +
    "\066\157\072\156\076\131\077\164\100\130\001\002\000" +
    "\042\006\243\007\242\010\uffa5\011\uffa5\012\uffa5\014\uffa5" +
    "\016\uffa5\017\uffa5\020\uffa5\021\uffa5\022\uffa5\023\uffa5\024" +
    "\uffa5\025\uffa5\026\245\027\244\001\002\000\030\013\127" +
    "\033\155\034\154\041\151\042\145\053\140\066\157\072" +
    "\156\076\131\077\164\100\130\001\002\000\030\013\127" +
    "\033\155\034\154\041\151\042\145\053\140\066\157\072" +
    "\156\076\131\077\164\100\130\001\002\000\030\013\127" +
    "\033\155\034\154\041\151\042\145\053\140\066\157\072" +
    "\156\076\131\077\164\100\130\001\002\000\030\013\127" +
    "\033\155\034\154\041\151\042\145\053\140\066\157\072" +
    "\156\076\131\077\164\100\130\001\002\000\050\006\uffa0" +
    "\007\uffa0\010\uffa0\011\uffa0\012\uffa0\014\uffa0\016\uffa0\017" +
    "\uffa0\020\uffa0\021\uffa0\022\uffa0\023\uffa0\024\uffa0\025\uffa0" +
    "\026\uffa0\027\uffa0\030\176\031\175\032\174\001\002\000" +
    "\050\006\uff9f\007\uff9f\010\uff9f\011\uff9f\012\uff9f\014\uff9f" +
    "\016\uff9f\017\uff9f\020\uff9f\021\uff9f\022\uff9f\023\uff9f\024" +
    "\uff9f\025\uff9f\026\uff9f\027\uff9f\030\176\031\175\032\174" +
    "\001\002\000\050\006\uffa2\007\uffa2\010\uffa2\011\uffa2\012" +
    "\uffa2\014\uffa2\016\uffa2\017\uffa2\020\uffa2\021\uffa2\022\uffa2" +
    "\023\uffa2\024\uffa2\025\uffa2\026\uffa2\027\uffa2\030\176\031" +
    "\175\032\174\001\002\000\050\006\uffa1\007\uffa1\010\uffa1" +
    "\011\uffa1\012\uffa1\014\uffa1\016\uffa1\017\uffa1\020\uffa1\021" +
    "\uffa1\022\uffa1\023\uffa1\024\uffa1\025\uffa1\026\uffa1\027\uffa1" +
    "\030\176\031\175\032\174\001\002\000\042\006\243\007" +
    "\242\010\uffa4\011\uffa4\012\uffa4\014\uffa4\016\uffa4\017\uffa4" +
    "\020\uffa4\021\uffa4\022\uffa4\023\uffa4\024\uffa4\025\uffa4\026" +
    "\245\027\244\001\002\000\004\010\254\001\002\000\030" +
    "\013\127\033\155\034\154\041\151\042\145\053\140\066" +
    "\157\072\156\076\131\077\164\100\130\001\002\000\012" +
    "\010\uffb1\011\uffb1\012\uffb1\014\uffb1\001\002\000\004\014" +
    "\257\001\002\000\066\006\uff8b\007\uff8b\010\uff8b\011\uff8b" +
    "\012\uff8b\014\uff8b\016\uff8b\017\uff8b\020\uff8b\021\uff8b\022" +
    "\uff8b\023\uff8b\024\uff8b\025\uff8b\026\uff8b\027\uff8b\030\uff8b" +
    "\031\uff8b\032\uff8b\033\uff8b\034\uff8b\035\uff8b\036\uff8b\037" +
    "\uff8b\040\uff87\062\uff8b\001\002\000\052\004\uffbf\005\uffbf" +
    "\043\uffbf\044\uffbf\045\uffbf\047\uffbf\050\uffbf\051\uffbf\054" +
    "\uffbf\055\uffbf\056\uffbf\057\uffbf\060\uffbf\063\uffbf\064\uffbf" +
    "\070\uffbf\071\uffbf\073\uffbf\074\uffbf\100\uffbf\001\002\000" +
    "\004\012\262\001\002\000\052\004\uffbe\005\uffbe\043\uffbe" +
    "\044\uffbe\045\uffbe\047\uffbe\050\uffbe\051\uffbe\054\uffbe\055" +
    "\uffbe\056\uffbe\057\uffbe\060\uffbe\063\uffbe\064\uffbe\070\uffbe" +
    "\071\uffbe\073\uffbe\074\uffbe\100\uffbe\001\002\000\030\013" +
    "\127\033\155\034\154\041\151\042\145\053\140\066\157" +
    "\072\156\076\131\077\164\100\130\001\002\000\004\014" +
    "\265\001\002\000\030\004\120\043\104\044\103\047\077" +
    "\056\113\057\111\060\110\070\123\071\122\074\121\100" +
    "\267\001\002\000\052\004\uffbd\005\uffbd\043\uffbd\044\uffbd" +
    "\045\uffbd\047\uffbd\050\uffbd\051\uffbd\054\uffbd\055\uffbd\056" +
    "\uffbd\057\uffbd\060\uffbd\063\uffbd\064\uffbd\070\uffbd\071\uffbd" +
    "\073\uffbd\074\uffbd\100\uffbd\001\002\000\010\010\270\011" +
    "\uffc5\015\271\001\002\000\052\004\uffd2\005\uffd2\043\uffd2" +
    "\044\uffd2\045\uffd2\047\uffd2\050\uffd2\051\uffd2\054\uffd2\055" +
    "\uffd2\056\uffd2\057\uffd2\060\uffd2\063\uffd2\064\uffd2\070\uffd2" +
    "\071\uffd2\073\uffd2\074\uffd2\100\uffd2\001\002\000\032\013" +
    "\127\033\155\034\154\041\151\042\145\053\140\065\272" +
    "\066\157\072\156\076\131\077\164\100\130\001\002\000" +
    "\020\045\023\050\021\055\020\063\016\064\015\073\012" +
    "\100\017\001\002\000\004\012\274\001\002\000\052\004" +
    "\uffd1\005\uffd1\043\uffd1\044\uffd1\045\uffd1\047\uffd1\050\uffd1" +
    "\051\uffd1\054\uffd1\055\uffd1\056\uffd1\057\uffd1\060\uffd1\063" +
    "\uffd1\064\uffd1\070\uffd1\071\uffd1\073\uffd1\074\uffd1\100\uffd1" +
    "\001\002\000\004\012\276\001\002\000\052\004\uffd0\005" +
    "\uffd0\043\uffd0\044\uffd0\045\uffd0\047\uffd0\050\uffd0\051\uffd0" +
    "\054\uffd0\055\uffd0\056\uffd0\057\uffd0\060\uffd0\063\uffd0\064" +
    "\uffd0\070\uffd0\071\uffd0\073\uffd0\074\uffd0\100\uffd0\001\002" +
    "\000\050\004\120\005\300\043\104\044\103\045\023\047" +
    "\077\050\021\054\115\055\020\056\113\057\111\060\110" +
    "\063\016\064\015\070\123\071\122\073\012\074\121\100" +
    "\102\001\002\000\052\004\uffce\005\uffce\043\uffce\044\uffce" +
    "\045\uffce\047\uffce\050\uffce\051\uffce\054\uffce\055\uffce\056" +
    "\uffce\057\uffce\060\uffce\063\uffce\064\uffce\070\uffce\071\uffce" +
    "\073\uffce\074\uffce\100\uffce\001\002\000\004\100\040\001" +
    "\002\000\004\012\303\001\002\000\050\004\uffd6\005\uffd6" +
    "\043\uffd6\044\uffd6\045\uffd6\047\uffd6\050\uffd6\054\uffd6\055" +
    "\uffd6\056\uffd6\057\uffd6\060\uffd6\063\uffd6\064\uffd6\070\uffd6" +
    "\071\uffd6\073\uffd6\074\uffd6\100\uffd6\001\002\000\004\012" +
    "\306\001\002\000\010\011\uffc5\012\uffc5\015\uffc5\001\002" +
    "\000\052\004\uffc0\005\uffc0\043\uffc0\044\uffc0\045\uffc0\047" +
    "\uffc0\050\uffc0\051\uffc0\054\uffc0\055\uffc0\056\uffc0\057\uffc0" +
    "\060\uffc0\063\uffc0\064\uffc0\070\uffc0\071\uffc0\073\uffc0\074" +
    "\uffc0\100\uffc0\001\002\000\004\012\310\001\002\000\050" +
    "\004\uffd7\005\uffd7\043\uffd7\044\uffd7\045\uffd7\047\uffd7\050" +
    "\uffd7\054\uffd7\055\uffd7\056\uffd7\057\uffd7\060\uffd7\063\uffd7" +
    "\064\uffd7\070\uffd7\071\uffd7\073\uffd7\074\uffd7\100\uffd7\001" +
    "\002\000\004\012\312\001\002\000\052\004\uffb4\005\uffb4" +
    "\043\uffb4\044\uffb4\045\uffb4\047\uffb4\050\uffb4\051\uffb4\054" +
    "\uffb4\055\uffb4\056\uffb4\057\uffb4\060\uffb4\063\uffb4\064\uffb4" +
    "\070\uffb4\071\uffb4\073\uffb4\074\uffb4\100\uffb4\001\002\000" +
    "\030\013\127\033\155\034\154\041\151\042\145\053\140" +
    "\066\157\072\156\076\131\077\164\100\130\001\002\000" +
    "\004\014\315\001\002\000\030\004\120\043\104\044\103" +
    "\047\077\056\113\057\111\060\110\070\123\071\122\074" +
    "\121\100\267\001\002\000\052\004\uffb8\005\uffb8\043\uffb8" +
    "\044\uffb8\045\uffb8\047\uffb8\050\uffb8\051\uffb8\054\uffb8\055" +
    "\uffb8\056\uffb8\057\uffb8\060\uffb8\063\uffb8\064\uffb8\070\uffb8" +
    "\071\uffb8\073\uffb8\074\uffb8\100\uffb8\001\002\000\052\004" +
    "\uffbb\005\uffbb\043\uffbb\044\uffbb\045\uffbb\047\uffbb\050\uffbb" +
    "\051\321\054\uffbb\055\uffbb\056\uffbb\057\uffbb\060\uffbb\063" +
    "\uffbb\064\uffbb\070\uffbb\071\uffbb\073\uffbb\074\uffbb\100\uffbb" +
    "\001\002\000\052\004\uffb7\005\uffb7\043\uffb7\044\uffb7\045" +
    "\uffb7\047\uffb7\050\uffb7\051\uffb7\054\uffb7\055\uffb7\056\uffb7" +
    "\057\uffb7\060\uffb7\063\uffb7\064\uffb7\070\uffb7\071\uffb7\073" +
    "\uffb7\074\uffb7\100\uffb7\001\002\000\030\004\120\043\104" +
    "\044\103\047\077\056\113\057\111\060\323\070\123\071" +
    "\122\074\121\100\267\001\002\000\052\004\uffba\005\uffba" +
    "\043\uffba\044\uffba\045\uffba\047\uffba\050\uffba\051\uffba\054" +
    "\uffba\055\uffba\056\uffba\057\uffba\060\uffba\063\uffba\064\uffba" +
    "\070\uffba\071\uffba\073\uffba\074\uffba\100\uffba\001\002\000" +
    "\004\013\324\001\002\000\030\013\127\033\155\034\154" +
    "\041\151\042\145\053\140\066\157\072\156\076\131\077" +
    "\164\100\130\001\002\000\004\014\326\001\002\000\030" +
    "\004\120\043\104\044\103\047\077\056\113\057\111\060" +
    "\110\070\123\071\122\074\121\100\267\001\002\000\052" +
    "\004\uffb9\005\uffb9\043\uffb9\044\uffb9\045\uffb9\047\uffb9\050" +
    "\uffb9\051\uffb9\054\uffb9\055\uffb9\056\uffb9\057\uffb9\060\uffb9" +
    "\063\uffb9\064\uffb9\070\uffb9\071\uffb9\073\uffb9\074\uffb9\100" +
    "\uffb9\001\002\000\004\100\305\001\002\000\006\012\uffc3" +
    "\015\uffc3\001\002\000\030\013\127\033\155\034\154\041" +
    "\151\042\145\053\140\066\157\072\156\076\131\077\164" +
    "\100\130\001\002\000\004\014\334\001\002\000\004\012" +
    "\335\001\002\000\052\004\uffc2\005\uffc2\043\uffc2\044\uffc2" +
    "\045\uffc2\047\uffc2\050\uffc2\051\uffc2\054\uffc2\055\uffc2\056" +
    "\uffc2\057\uffc2\060\uffc2\063\uffc2\064\uffc2\070\uffc2\071\uffc2" +
    "\073\uffc2\074\uffc2\100\uffc2\001\002\000\030\013\127\033" +
    "\155\034\154\041\151\042\145\053\140\066\157\072\156" +
    "\076\131\077\164\100\130\001\002\000\004\014\340\001" +
    "\002\000\004\012\341\001\002\000\052\004\uffc1\005\uffc1" +
    "\043\uffc1\044\uffc1\045\uffc1\047\uffc1\050\uffc1\051\uffc1\054" +
    "\uffc1\055\uffc1\056\uffc1\057\uffc1\060\uffc1\063\uffc1\064\uffc1" +
    "\070\uffc1\071\uffc1\073\uffc1\074\uffc1\100\uffc1\001\002\000" +
    "\004\074\343\001\002\000\004\013\344\001\002\000\030" +
    "\013\127\033\155\034\154\041\151\042\145\053\140\066" +
    "\157\072\156\076\131\077\164\100\130\001\002\000\004" +
    "\014\346\001\002\000\052\004\uffbc\005\uffbc\043\uffbc\044" +
    "\uffbc\045\uffbc\047\uffbc\050\uffbc\051\uffbc\054\uffbc\055\uffbc" +
    "\056\uffbc\057\uffbc\060\uffbc\063\uffbc\064\uffbc\070\uffbc\071" +
    "\uffbc\073\uffbc\074\uffbc\100\uffbc\001\002\000\006\067\351" +
    "\100\350\001\002\000\004\013\356\001\002\000\004\013" +
    "\352\001\002\000\030\013\127\033\155\034\154\041\151" +
    "\042\145\053\140\066\157\072\156\076\131\077\164\100" +
    "\130\001\002\000\004\014\354\001\002\000\004\012\355" +
    "\001\002\000\052\004\uffb6\005\uffb6\043\uffb6\044\uffb6\045" +
    "\uffb6\047\uffb6\050\uffb6\051\uffb6\054\uffb6\055\uffb6\056\uffb6" +
    "\057\uffb6\060\uffb6\063\uffb6\064\uffb6\070\uffb6\071\uffb6\073" +
    "\uffb6\074\uffb6\100\uffb6\001\002\000\030\013\127\033\155" +
    "\034\154\041\151\042\145\053\140\066\157\072\156\076" +
    "\131\077\164\100\130\001\002\000\004\014\360\001\002" +
    "\000\004\012\361\001\002\000\052\004\uffcf\005\uffcf\043" +
    "\uffcf\044\uffcf\045\uffcf\047\uffcf\050\uffcf\051\uffcf\054\uffcf" +
    "\055\uffcf\056\uffcf\057\uffcf\060\uffcf\063\uffcf\064\uffcf\070" +
    "\uffcf\071\uffcf\073\uffcf\074\uffcf\100\uffcf\001\002\000\024" +
    "\014\uffdd\045\023\050\021\054\365\055\020\063\016\064" +
    "\015\073\012\100\017\001\002\000\004\100\066\001\002" +
    "\000\004\014\373\001\002\000\020\045\023\050\021\055" +
    "\020\063\016\064\015\073\012\100\017\001\002\000\006" +
    "\011\367\014\uffdc\001\002\000\024\014\uffdd\045\023\050" +
    "\021\054\365\055\020\063\016\064\015\073\012\100\017" +
    "\001\002\000\004\014\uffdb\001\002\000\004\100\066\001" +
    "\002\000\006\011\uffde\014\uffde\001\002\000\010\004\uffe1" +
    "\012\uffe1\061\374\001\002\000\004\075\375\001\002\000" +
    "\006\004\uffe0\012\uffe0\001\002\000\006\011\uffdf\014\uffdf" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\374\000\006\002\004\007\003\001\001\000\012\003" +
    "\007\004\012\005\010\012\006\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\021\066\022\067\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\003\057\004\012\013\060\014\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\026\001\001\000\006\010\046" +
    "\011\044\001\001\000\004\016\032\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\031\001\001\000\002" +
    "\001\001\000\010\003\033\004\012\015\035\001\001\000" +
    "\006\017\040\020\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\017\040\020\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\010\046\011\050\001\001\000\002" +
    "\001\001\000\006\003\052\004\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\055\001\001\000\010" +
    "\003\033\004\012\015\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\003\057\004\012\013\060\014\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\025\071\026\072\001\001\000\004\030\074\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\003\111\004\012\027\113\031\077\034\105\035" +
    "\075\036\115\037\100\040\123\041\106\044\104\001\001" +
    "\000\002\001\001\000\022\031\341\034\105\035\075\036" +
    "\115\037\100\040\123\041\106\044\104\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\034\105\035" +
    "\310\001\001\000\006\017\040\020\306\001\001\000\006" +
    "\034\105\035\303\001\001\000\002\001\001\000\006\003" +
    "\300\004\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\030\276\001\001\000\002\001\001\000\064\032" +
    "\170\033\260\045\147\046\141\047\140\050\136\051\135" +
    "\052\134\053\133\054\132\055\131\056\166\057\165\060" +
    "\164\061\161\062\160\063\157\064\142\065\162\066\152" +
    "\067\151\070\145\071\167\072\125\073\146\001\001\000" +
    "\002\001\001\000\002\001\001\000\064\032\170\033\143" +
    "\045\147\046\141\047\140\050\136\051\135\052\134\053" +
    "\133\054\132\055\131\056\166\057\165\060\164\061\161" +
    "\062\160\063\157\064\142\065\162\066\152\067\151\070" +
    "\145\071\167\072\125\073\146\001\001\000\002\001\001" +
    "\000\060\045\255\046\141\047\140\050\136\051\135\052" +
    "\134\053\133\054\132\055\131\056\166\057\165\060\164" +
    "\061\161\062\160\063\157\064\142\065\162\066\152\067" +
    "\151\070\145\071\167\072\125\073\146\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\062\220\063\157\066" +
    "\152\067\151\070\145\071\167\072\125\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\064\032\170\033\172\045\147" +
    "\046\141\047\140\050\136\051\135\052\134\053\133\054" +
    "\132\055\131\056\166\057\165\060\164\061\161\062\160" +
    "\063\157\064\142\065\162\066\152\067\151\070\145\071" +
    "\167\072\125\073\146\001\001\000\002\001\001\000\032" +
    "\057\213\060\164\061\177\062\160\063\157\065\162\066" +
    "\152\067\151\070\145\071\167\072\125\073\146\001\001" +
    "\000\032\057\212\060\164\061\177\062\160\063\157\065" +
    "\162\066\152\067\151\070\145\071\167\072\125\073\146" +
    "\001\001\000\032\057\176\060\164\061\177\062\160\063" +
    "\157\065\162\066\152\067\151\070\145\071\167\072\125" +
    "\073\146\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\060\211\061\177\062\160\063\157\065\162\066\152" +
    "\067\151\070\145\071\167\072\125\073\146\001\001\000" +
    "\030\060\202\061\177\062\160\063\157\065\162\066\152" +
    "\067\151\070\145\071\167\072\125\073\146\001\001\000" +
    "\002\001\001\000\026\061\177\062\160\063\157\065\210" +
    "\066\152\067\151\070\145\071\167\072\125\073\146\001" +
    "\001\000\026\061\177\062\160\063\157\065\207\066\152" +
    "\067\151\070\145\071\167\072\125\073\146\001\001\000" +
    "\026\061\177\062\160\063\157\065\206\066\152\067\151" +
    "\070\145\071\167\072\125\073\146\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\003\215\004" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\060\045\252\046\141\047\140\050\136\051\135" +
    "\052\134\053\133\054\132\055\131\056\166\057\165\060" +
    "\164\061\161\062\160\063\157\064\142\065\162\066\152" +
    "\067\151\070\145\071\167\072\125\073\146\001\001\000" +
    "\050\050\225\051\135\052\134\053\133\054\132\055\131" +
    "\056\166\057\165\060\164\061\177\062\160\063\157\065" +
    "\162\066\152\067\151\070\145\071\167\072\125\073\146" +
    "\001\001\000\002\001\001\000\046\051\227\052\134\053" +
    "\133\054\132\055\131\056\166\057\165\060\164\061\177" +
    "\062\160\063\157\065\162\066\152\067\151\070\145\071" +
    "\167\072\125\073\146\001\001\000\002\001\001\000\044" +
    "\052\231\053\133\054\132\055\131\056\166\057\165\060" +
    "\164\061\177\062\160\063\157\065\162\066\152\067\151" +
    "\070\145\071\167\072\125\073\146\001\001\000\002\001" +
    "\001\000\042\053\233\054\132\055\131\056\166\057\165" +
    "\060\164\061\177\062\160\063\157\065\162\066\152\067" +
    "\151\070\145\071\167\072\125\073\146\001\001\000\002" +
    "\001\001\000\040\054\235\055\131\056\166\057\165\060" +
    "\164\061\177\062\160\063\157\065\162\066\152\067\151" +
    "\070\145\071\167\072\125\073\146\001\001\000\002\001" +
    "\001\000\036\055\251\056\166\057\165\060\164\061\177" +
    "\062\160\063\157\065\162\066\152\067\151\070\145\071" +
    "\167\072\125\073\146\001\001\000\036\055\240\056\166" +
    "\057\165\060\164\061\177\062\160\063\157\065\162\066" +
    "\152\067\151\070\145\071\167\072\125\073\146\001\001" +
    "\000\002\001\001\000\034\056\250\057\165\060\164\061" +
    "\177\062\160\063\157\065\162\066\152\067\151\070\145" +
    "\071\167\072\125\073\146\001\001\000\034\056\247\057" +
    "\165\060\164\061\177\062\160\063\157\065\162\066\152" +
    "\067\151\070\145\071\167\072\125\073\146\001\001\000" +
    "\034\056\246\057\165\060\164\061\177\062\160\063\157" +
    "\065\162\066\152\067\151\070\145\071\167\072\125\073" +
    "\146\001\001\000\034\056\245\057\165\060\164\061\177" +
    "\062\160\063\157\065\162\066\152\067\151\070\145\071" +
    "\167\072\125\073\146\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\054\046\254\047\140\050\136" +
    "\051\135\052\134\053\133\054\132\055\131\056\166\057" +
    "\165\060\164\061\177\062\160\063\157\065\162\066\152" +
    "\067\151\070\145\071\167\072\125\073\146\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\060\045" +
    "\263\046\141\047\140\050\136\051\135\052\134\053\133" +
    "\054\132\055\131\056\166\057\165\060\164\061\161\062" +
    "\160\063\157\064\142\065\162\066\152\067\151\070\145" +
    "\071\167\072\125\073\146\001\001\000\002\001\001\000" +
    "\022\031\265\034\105\035\075\036\115\037\100\040\123" +
    "\041\106\044\104\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\060\045\272\046\141\047\140" +
    "\050\136\051\135\052\134\053\133\054\132\055\131\056" +
    "\166\057\165\060\164\061\161\062\160\063\157\064\142" +
    "\065\162\066\152\067\151\070\145\071\167\072\125\073" +
    "\146\001\001\000\006\003\274\004\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\003\111\004\012\027\113\031\077\034\105" +
    "\035\075\036\115\037\100\040\123\041\106\044\104\001" +
    "\001\000\002\001\001\000\006\017\040\020\301\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\060\045" +
    "\313\046\141\047\140\050\136\051\135\052\134\053\133" +
    "\054\132\055\131\056\166\057\165\060\164\061\161\062" +
    "\160\063\157\064\142\065\162\066\152\067\151\070\145" +
    "\071\167\072\125\073\146\001\001\000\002\001\001\000" +
    "\022\031\315\034\105\035\075\036\115\037\100\040\123" +
    "\041\106\044\104\001\001\000\004\043\316\001\001\000" +
    "\004\042\317\001\001\000\002\001\001\000\022\031\321" +
    "\034\105\035\075\036\115\037\100\040\123\041\106\044" +
    "\104\001\001\000\002\001\001\000\002\001\001\000\060" +
    "\045\324\046\141\047\140\050\136\051\135\052\134\053" +
    "\133\054\132\055\131\056\166\057\165\060\164\061\161" +
    "\062\160\063\157\064\142\065\162\066\152\067\151\070" +
    "\145\071\167\072\125\073\146\001\001\000\002\001\001" +
    "\000\022\031\326\034\105\035\075\036\115\037\100\040" +
    "\123\041\106\044\104\001\001\000\004\043\316\001\001" +
    "\000\006\034\105\035\330\001\001\000\002\001\001\000" +
    "\060\045\332\046\141\047\140\050\136\051\135\052\134" +
    "\053\133\054\132\055\131\056\166\057\165\060\164\061" +
    "\161\062\160\063\157\064\142\065\162\066\152\067\151" +
    "\070\145\071\167\072\125\073\146\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\060\045\336" +
    "\046\141\047\140\050\136\051\135\052\134\053\133\054" +
    "\132\055\131\056\166\057\165\060\164\061\161\062\160" +
    "\063\157\064\142\065\162\066\152\067\151\070\145\071" +
    "\167\072\125\073\146\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\060\045\344\046\141\047\140\050\136\051\135" +
    "\052\134\053\133\054\132\055\131\056\166\057\165\060" +
    "\164\061\161\062\160\063\157\064\142\065\162\066\152" +
    "\067\151\070\145\071\167\072\125\073\146\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\064\032\170\033\352\045" +
    "\147\046\141\047\140\050\136\051\135\052\134\053\133" +
    "\054\132\055\131\056\166\057\165\060\164\061\161\062" +
    "\160\063\157\064\142\065\162\066\152\067\151\070\145" +
    "\071\167\072\125\073\146\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\064\032\170\033\356" +
    "\045\147\046\141\047\140\050\136\051\135\052\134\053" +
    "\133\054\132\055\131\056\166\057\165\060\164\061\161" +
    "\062\160\063\157\064\142\065\162\066\152\067\151\070" +
    "\145\071\167\072\125\073\146\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\003\362\004" +
    "\012\023\365\024\363\001\001\000\004\021\375\001\001" +
    "\000\002\001\001\000\006\003\370\004\012\001\001\000" +
    "\002\001\001\000\012\003\362\004\012\023\365\024\367" +
    "\001\001\000\002\001\001\000\004\021\371\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public soottocfg.ast.Absyn.ProgramFile pProgramFile() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (soottocfg.ast.Absyn.ProgramFile) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // Unary_operator ::= _SYMB_30 
            {
              soottocfg.ast.Absyn.Unary_operator RESULT =null;
		 RESULT = new soottocfg.ast.Absyn.Logicalneg(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Unary_operator",57, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // Unary_operator ::= _SYMB_29 
            {
              soottocfg.ast.Absyn.Unary_operator RESULT =null;
		 RESULT = new soottocfg.ast.Absyn.Complement(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Unary_operator",57, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // Unary_operator ::= _SYMB_24 
            {
              soottocfg.ast.Absyn.Unary_operator RESULT =null;
		 RESULT = new soottocfg.ast.Absyn.Negative(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Unary_operator",57, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // Unary_operator ::= _SYMB_23 
            {
              soottocfg.ast.Absyn.Unary_operator RESULT =null;
		 RESULT = new soottocfg.ast.Absyn.Plus(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Unary_operator",57, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // Constant ::= _SYMB_39 
            {
              soottocfg.ast.Absyn.Constant RESULT =null;
		 RESULT = new soottocfg.ast.Absyn.Efalse(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",56, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // Constant ::= _SYMB_54 
            {
              soottocfg.ast.Absyn.Constant RESULT =null;
		 RESULT = new soottocfg.ast.Absyn.Etrue(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",56, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // Constant ::= _INTEGER_ 
            {
              soottocfg.ast.Absyn.Constant RESULT =null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.Eint(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",56, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Constant ::= _DOUBLE_ 
            {
              soottocfg.ast.Absyn.Constant RESULT =null;
		Double p_1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.Edouble(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",56, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // SpecName ::= _SYMB_50 
            {
              soottocfg.ast.Absyn.SpecName RESULT =null;
		 RESULT = new soottocfg.ast.Absyn.SSnull(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SpecName",55, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // SpecExpNP ::= TupleAcc 
            {
              soottocfg.ast.Absyn.SpecExpNP RESULT =null;
		soottocfg.ast.Absyn.TupleAcc p_1 = (soottocfg.ast.Absyn.TupleAcc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.CNPfld(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SpecExpNP",54, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // SpecExpNP ::= Constant 
            {
              soottocfg.ast.Absyn.SpecExpNP RESULT =null;
		soottocfg.ast.Absyn.Constant p_1 = (soottocfg.ast.Absyn.Constant)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.CNLit(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SpecExpNP",54, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // SpecExp ::= SpecName 
            {
              soottocfg.ast.Absyn.SpecExp RESULT =null;
		soottocfg.ast.Absyn.SpecName p_1 = (soottocfg.ast.Absyn.SpecName)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.Cthis(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SpecExp",53, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // SpecExp ::= SpecExpNP 
            {
              soottocfg.ast.Absyn.SpecExp RESULT =null;
		soottocfg.ast.Absyn.SpecExpNP p_1 = (soottocfg.ast.Absyn.SpecExpNP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.Cnp(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SpecExp",53, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // SpecExp ::= _SYMB_7 Exp _SYMB_8 
            {
              soottocfg.ast.Absyn.SpecExp RESULT =null;
		soottocfg.ast.Absyn.Exp p_2 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new soottocfg.ast.Absyn.Cep(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SpecExp",53, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // TupleAcc ::= SpecExp _SYMB_28 _IDENT_ 
            {
              soottocfg.ast.Absyn.TupleAcc RESULT =null;
		soottocfg.ast.Absyn.SpecExp p_1 = (soottocfg.ast.Absyn.SpecExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.Tplvar(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TupleAcc",52, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Exp13 ::= Exp14 
            {
              soottocfg.ast.Absyn.Exp RESULT =null;
		soottocfg.ast.Absyn.Exp p_1 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp13",51, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Exp1 ::= Exp2 
            {
              soottocfg.ast.Absyn.Exp RESULT =null;
		soottocfg.ast.Absyn.Exp p_1 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp1",50, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Exp16 ::= _SYMB_7 Exp _SYMB_8 
            {
              soottocfg.ast.Absyn.Exp RESULT =null;
		soottocfg.ast.Absyn.Exp p_2 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp16",49, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Exp16 ::= _IDENT_ 
            {
              soottocfg.ast.Absyn.Exp RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.Evar(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp16",49, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Exp15 ::= Exp16 
            {
              soottocfg.ast.Absyn.Exp RESULT =null;
		soottocfg.ast.Absyn.Exp p_1 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp15",48, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Exp15 ::= Constant 
            {
              soottocfg.ast.Absyn.Exp RESULT =null;
		soottocfg.ast.Absyn.Constant p_1 = (soottocfg.ast.Absyn.Constant)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.Econst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp15",48, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Exp15 ::= TupleAcc 
            {
              soottocfg.ast.Absyn.Exp RESULT =null;
		soottocfg.ast.Absyn.TupleAcc p_1 = (soottocfg.ast.Absyn.TupleAcc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.Efld(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp15",48, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Exp15 ::= SpecName 
            {
              soottocfg.ast.Absyn.Exp RESULT =null;
		soottocfg.ast.Absyn.SpecName p_1 = (soottocfg.ast.Absyn.SpecName)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.Especname(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp15",48, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Exp14 ::= Exp15 
            {
              soottocfg.ast.Absyn.Exp RESULT =null;
		soottocfg.ast.Absyn.Exp p_1 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp14",47, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Exp14 ::= Unary_operator Exp15 
            {
              soottocfg.ast.Absyn.Exp RESULT =null;
		soottocfg.ast.Absyn.Unary_operator p_1 = (soottocfg.ast.Absyn.Unary_operator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		soottocfg.ast.Absyn.Exp p_2 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.Epreop(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp14",47, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Exp12 ::= Exp13 
            {
              soottocfg.ast.Absyn.Exp RESULT =null;
		soottocfg.ast.Absyn.Exp p_1 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp12",46, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Exp12 ::= Exp12 _SYMB_27 Exp13 
            {
              soottocfg.ast.Absyn.Exp RESULT =null;
		soottocfg.ast.Absyn.Exp p_1 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		soottocfg.ast.Absyn.Exp p_3 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.Emod(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp12",46, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Exp12 ::= Exp12 _SYMB_26 Exp13 
            {
              soottocfg.ast.Absyn.Exp RESULT =null;
		soottocfg.ast.Absyn.Exp p_1 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		soottocfg.ast.Absyn.Exp p_3 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.Ediv(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp12",46, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Exp12 ::= Exp12 _SYMB_25 Exp13 
            {
              soottocfg.ast.Absyn.Exp RESULT =null;
		soottocfg.ast.Absyn.Exp p_1 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		soottocfg.ast.Absyn.Exp p_3 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.Etimes(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp12",46, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Exp11 ::= Exp12 
            {
              soottocfg.ast.Absyn.Exp RESULT =null;
		soottocfg.ast.Absyn.Exp p_1 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp11",45, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Exp11 ::= Exp11 _SYMB_24 Exp12 
            {
              soottocfg.ast.Absyn.Exp RESULT =null;
		soottocfg.ast.Absyn.Exp p_1 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		soottocfg.ast.Absyn.Exp p_3 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.Eminus(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp11",45, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Exp11 ::= Exp11 _SYMB_23 Exp12 
            {
              soottocfg.ast.Absyn.Exp RESULT =null;
		soottocfg.ast.Absyn.Exp p_1 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		soottocfg.ast.Absyn.Exp p_3 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.Eplus(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp11",45, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Exp10 ::= Exp11 
            {
              soottocfg.ast.Absyn.Exp RESULT =null;
		soottocfg.ast.Absyn.Exp p_1 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp10",44, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Exp10 ::= Exp10 _SYMB_22 Exp11 
            {
              soottocfg.ast.Absyn.Exp RESULT =null;
		soottocfg.ast.Absyn.Exp p_1 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		soottocfg.ast.Absyn.Exp p_3 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.Etrip(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp10",44, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Exp10 ::= Exp10 _SYMB_21 Exp11 
            {
              soottocfg.ast.Absyn.Exp RESULT =null;
		soottocfg.ast.Absyn.Exp p_1 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		soottocfg.ast.Absyn.Exp p_3 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.Eright(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp10",44, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Exp10 ::= Exp10 _SYMB_20 Exp11 
            {
              soottocfg.ast.Absyn.Exp RESULT =null;
		soottocfg.ast.Absyn.Exp p_1 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		soottocfg.ast.Absyn.Exp p_3 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.Eleft(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp10",44, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Exp9 ::= Exp10 
            {
              soottocfg.ast.Absyn.Exp RESULT =null;
		soottocfg.ast.Absyn.Exp p_1 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp9",43, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Exp9 ::= Exp9 _SYMB_19 Exp10 
            {
              soottocfg.ast.Absyn.Exp RESULT =null;
		soottocfg.ast.Absyn.Exp p_1 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		soottocfg.ast.Absyn.Exp p_3 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.Ege(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp9",43, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Exp9 ::= Exp9 _SYMB_18 Exp10 
            {
              soottocfg.ast.Absyn.Exp RESULT =null;
		soottocfg.ast.Absyn.Exp p_1 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		soottocfg.ast.Absyn.Exp p_3 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.Ele(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp9",43, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Exp9 ::= Exp9 _SYMB_3 Exp10 
            {
              soottocfg.ast.Absyn.Exp RESULT =null;
		soottocfg.ast.Absyn.Exp p_1 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		soottocfg.ast.Absyn.Exp p_3 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.Egrthen(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp9",43, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Exp9 ::= Exp9 _SYMB_2 Exp10 
            {
              soottocfg.ast.Absyn.Exp RESULT =null;
		soottocfg.ast.Absyn.Exp p_1 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		soottocfg.ast.Absyn.Exp p_3 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.Elthen(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp9",43, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Exp8 ::= Exp9 
            {
              soottocfg.ast.Absyn.Exp RESULT =null;
		soottocfg.ast.Absyn.Exp p_1 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp8",42, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Exp8 ::= Exp8 _SYMB_17 Exp9 
            {
              soottocfg.ast.Absyn.Exp RESULT =null;
		soottocfg.ast.Absyn.Exp p_1 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		soottocfg.ast.Absyn.Exp p_3 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.Eneq(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp8",42, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Exp8 ::= Exp8 _SYMB_16 Exp9 
            {
              soottocfg.ast.Absyn.Exp RESULT =null;
		soottocfg.ast.Absyn.Exp p_1 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		soottocfg.ast.Absyn.Exp p_3 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.Eeq(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp8",42, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Exp7 ::= Exp8 
            {
              soottocfg.ast.Absyn.Exp RESULT =null;
		soottocfg.ast.Absyn.Exp p_1 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp7",41, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Exp7 ::= Exp7 _SYMB_15 Exp8 
            {
              soottocfg.ast.Absyn.Exp RESULT =null;
		soottocfg.ast.Absyn.Exp p_1 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		soottocfg.ast.Absyn.Exp p_3 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.Ebitand(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp7",41, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Exp6 ::= Exp7 
            {
              soottocfg.ast.Absyn.Exp RESULT =null;
		soottocfg.ast.Absyn.Exp p_1 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp6",40, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Exp6 ::= Exp6 _SYMB_14 Exp7 
            {
              soottocfg.ast.Absyn.Exp RESULT =null;
		soottocfg.ast.Absyn.Exp p_1 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		soottocfg.ast.Absyn.Exp p_3 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.Ebitexor(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp6",40, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Exp5 ::= Exp6 
            {
              soottocfg.ast.Absyn.Exp RESULT =null;
		soottocfg.ast.Absyn.Exp p_1 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp5",39, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Exp5 ::= Exp5 _SYMB_13 Exp6 
            {
              soottocfg.ast.Absyn.Exp RESULT =null;
		soottocfg.ast.Absyn.Exp p_1 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		soottocfg.ast.Absyn.Exp p_3 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.Ebitor(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp5",39, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Exp4 ::= Exp5 
            {
              soottocfg.ast.Absyn.Exp RESULT =null;
		soottocfg.ast.Absyn.Exp p_1 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp4",38, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Exp4 ::= Exp4 _SYMB_12 Exp5 
            {
              soottocfg.ast.Absyn.Exp RESULT =null;
		soottocfg.ast.Absyn.Exp p_1 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		soottocfg.ast.Absyn.Exp p_3 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.Eland(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp4",38, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Exp3 ::= Exp4 
            {
              soottocfg.ast.Absyn.Exp RESULT =null;
		soottocfg.ast.Absyn.Exp p_1 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp3",37, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Exp3 ::= Exp3 _SYMB_11 Exp4 
            {
              soottocfg.ast.Absyn.Exp RESULT =null;
		soottocfg.ast.Absyn.Exp p_1 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		soottocfg.ast.Absyn.Exp p_3 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.Elor(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp3",37, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Exp2 ::= Exp3 
            {
              soottocfg.ast.Absyn.Exp RESULT =null;
		soottocfg.ast.Absyn.Exp p_1 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp2",36, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Exp2 ::= Exp3 _SYMB_10 Exp _SYMB_4 Exp2 
            {
              soottocfg.ast.Absyn.Exp RESULT =null;
		soottocfg.ast.Absyn.Exp p_1 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		soottocfg.ast.Absyn.Exp p_3 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		soottocfg.ast.Absyn.Exp p_5 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.Econdition(p_1,p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp2",36, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Exp ::= Exp1 
            {
              soottocfg.ast.Absyn.Exp RESULT =null;
		soottocfg.ast.Absyn.Exp p_1 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",35, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Exp ::= Exp14 _SYMB_46 Type 
            {
              soottocfg.ast.Absyn.Exp RESULT =null;
		soottocfg.ast.Absyn.Exp p_1 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		soottocfg.ast.Absyn.Type p_3 = (soottocfg.ast.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.Etype(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",35, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // HeapStm ::= _SYMB_43 ListCommaIdentList _SYMB_6 
            {
              soottocfg.ast.Absyn.HeapStm RESULT =null;
		soottocfg.ast.Absyn.ListCommaIdentList p_2 = (soottocfg.ast.Absyn.ListCommaIdentList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new soottocfg.ast.Absyn.HavocSt(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("HeapStm",34, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // HeapStm ::= _SYMB_52 _SYMB_7 ListCommaExpList _SYMB_8 _SYMB_6 
            {
              soottocfg.ast.Absyn.HeapStm RESULT =null;
		soottocfg.ast.Absyn.ListCommaExpList p_3 = (soottocfg.ast.Absyn.ListCommaExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new soottocfg.ast.Absyn.PushSt(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("HeapStm",34, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // HeapStm ::= ListCommaIdentList _SYMB_9 _SYMB_51 _SYMB_7 ListCommaExpList _SYMB_8 _SYMB_6 
            {
              soottocfg.ast.Absyn.HeapStm RESULT =null;
		soottocfg.ast.Absyn.ListCommaIdentList p_1 = (soottocfg.ast.Absyn.ListCommaIdentList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		soottocfg.ast.Absyn.ListCommaExpList p_5 = (soottocfg.ast.Absyn.ListCommaExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new soottocfg.ast.Absyn.PullSt(p_1,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("HeapStm",34, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ListElseif ::= ListElseif Elseif 
            {
              soottocfg.ast.Absyn.ListElseif RESULT =null;
		soottocfg.ast.Absyn.ListElseif p_1 = (soottocfg.ast.Absyn.ListElseif)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		soottocfg.ast.Absyn.Elseif p_2 = (soottocfg.ast.Absyn.Elseif)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListElseif",33, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ListElseif ::= 
            {
              soottocfg.ast.Absyn.ListElseif RESULT =null;
		 RESULT = new soottocfg.ast.Absyn.ListElseif(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListElseif",33, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Elseif ::= _SYMB_37 _SYMB_44 _SYMB_7 Exp _SYMB_8 Stm 
            {
              soottocfg.ast.Absyn.Elseif RESULT =null;
		soottocfg.ast.Absyn.Exp p_4 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		soottocfg.ast.Absyn.Stm p_6 = (soottocfg.ast.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.EIf(p_4,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Elseif",32, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SelectionStm ::= _SYMB_44 _SYMB_7 Exp _SYMB_8 Stm ListElseif _SYMB_37 Stm 
            {
              soottocfg.ast.Absyn.SelectionStm RESULT =null;
		soottocfg.ast.Absyn.Exp p_3 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		soottocfg.ast.Absyn.Stm p_5 = (soottocfg.ast.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		soottocfg.ast.Absyn.ListElseif p_6 = (soottocfg.ast.Absyn.ListElseif)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		soottocfg.ast.Absyn.Stm p_8 = (soottocfg.ast.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.If(p_3,p_5,p_6,p_8); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SelectionStm",31, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SelectionStm ::= _SYMB_44 _SYMB_7 Exp _SYMB_8 Stm ListElseif 
            {
              soottocfg.ast.Absyn.SelectionStm RESULT =null;
		soottocfg.ast.Absyn.Exp p_3 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		soottocfg.ast.Absyn.Stm p_5 = (soottocfg.ast.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		soottocfg.ast.Absyn.ListElseif p_6 = (soottocfg.ast.Absyn.ListElseif)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.Ifone(p_3,p_5,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SelectionStm",31, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // IterStm ::= _SYMB_35 Stm _SYMB_56 _SYMB_7 Exp _SYMB_8 
            {
              soottocfg.ast.Absyn.IterStm RESULT =null;
		soottocfg.ast.Absyn.Stm p_2 = (soottocfg.ast.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		soottocfg.ast.Absyn.Exp p_5 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new soottocfg.ast.Absyn.Do(p_2,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IterStm",30, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // IterStm ::= _SYMB_56 _SYMB_7 Exp _SYMB_8 Stm 
            {
              soottocfg.ast.Absyn.IterStm RESULT =null;
		soottocfg.ast.Absyn.Exp p_3 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		soottocfg.ast.Absyn.Stm p_5 = (soottocfg.ast.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.While(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IterStm",30, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // JumpStm ::= _SYMB_53 ListCommaExpList _SYMB_6 
            {
              soottocfg.ast.Absyn.JumpStm RESULT =null;
		soottocfg.ast.Absyn.ListCommaExpList p_2 = (soottocfg.ast.Absyn.ListCommaExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new soottocfg.ast.Absyn.ReturnExp(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JumpStm",29, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // JumpStm ::= _SYMB_53 _SYMB_6 
            {
              soottocfg.ast.Absyn.JumpStm RESULT =null;
		 RESULT = new soottocfg.ast.Absyn.Return(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JumpStm",29, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // JumpStm ::= _SYMB_42 ListCommaIdentList _SYMB_6 
            {
              soottocfg.ast.Absyn.JumpStm RESULT =null;
		soottocfg.ast.Absyn.ListCommaIdentList p_2 = (soottocfg.ast.Absyn.ListCommaIdentList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new soottocfg.ast.Absyn.Glabel(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JumpStm",29, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // GuardStm ::= _SYMB_32 _SYMB_7 Exp _SYMB_8 _SYMB_6 
            {
              soottocfg.ast.Absyn.GuardStm RESULT =null;
		soottocfg.ast.Absyn.Exp p_3 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new soottocfg.ast.Absyn.Asme(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GuardStm",28, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // GuardStm ::= _SYMB_31 _SYMB_7 Exp _SYMB_8 _SYMB_6 
            {
              soottocfg.ast.Absyn.GuardStm RESULT =null;
		soottocfg.ast.Absyn.Exp p_3 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new soottocfg.ast.Absyn.Asrt(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GuardStm",28, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ListCommaIdentList ::= CommaIdentList _SYMB_5 ListCommaIdentList 
            {
              soottocfg.ast.Absyn.ListCommaIdentList RESULT =null;
		soottocfg.ast.Absyn.CommaIdentList p_1 = (soottocfg.ast.Absyn.CommaIdentList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		soottocfg.ast.Absyn.ListCommaIdentList p_3 = (soottocfg.ast.Absyn.ListCommaIdentList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListCommaIdentList",27, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ListCommaIdentList ::= CommaIdentList 
            {
              soottocfg.ast.Absyn.ListCommaIdentList RESULT =null;
		soottocfg.ast.Absyn.CommaIdentList p_1 = (soottocfg.ast.Absyn.CommaIdentList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.ListCommaIdentList(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListCommaIdentList",27, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CommaIdentList ::= _IDENT_ 
            {
              soottocfg.ast.Absyn.CommaIdentList RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.CommaId(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CommaIdentList",26, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ListCommaExpList ::= CommaExpList _SYMB_5 ListCommaExpList 
            {
              soottocfg.ast.Absyn.ListCommaExpList RESULT =null;
		soottocfg.ast.Absyn.CommaExpList p_1 = (soottocfg.ast.Absyn.CommaExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		soottocfg.ast.Absyn.ListCommaExpList p_3 = (soottocfg.ast.Absyn.ListCommaExpList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListCommaExpList",25, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ListCommaExpList ::= CommaExpList 
            {
              soottocfg.ast.Absyn.ListCommaExpList RESULT =null;
		soottocfg.ast.Absyn.CommaExpList p_1 = (soottocfg.ast.Absyn.CommaExpList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.ListCommaExpList(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListCommaExpList",25, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CommaExpList ::= Exp 
            {
              soottocfg.ast.Absyn.CommaExpList RESULT =null;
		soottocfg.ast.Absyn.Exp p_1 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.CommaExp(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CommaExpList",24, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Stm ::= HeapStm 
            {
              soottocfg.ast.Absyn.Stm RESULT =null;
		soottocfg.ast.Absyn.HeapStm p_1 = (soottocfg.ast.Absyn.HeapStm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.Hps(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Stm ::= SelectionStm 
            {
              soottocfg.ast.Absyn.Stm RESULT =null;
		soottocfg.ast.Absyn.SelectionStm p_1 = (soottocfg.ast.Absyn.SelectionStm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.Sel(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Stm ::= IterStm 
            {
              soottocfg.ast.Absyn.Stm RESULT =null;
		soottocfg.ast.Absyn.IterStm p_1 = (soottocfg.ast.Absyn.IterStm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.Iter(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Stm ::= JumpStm 
            {
              soottocfg.ast.Absyn.Stm RESULT =null;
		soottocfg.ast.Absyn.JumpStm p_1 = (soottocfg.ast.Absyn.JumpStm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.Jmp(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Stm ::= GuardStm 
            {
              soottocfg.ast.Absyn.Stm RESULT =null;
		soottocfg.ast.Absyn.GuardStm p_1 = (soottocfg.ast.Absyn.GuardStm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.Grd(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Stm ::= _SYMB_0 ListLVarStatement _SYMB_1 
            {
              soottocfg.ast.Absyn.Stm RESULT =null;
		soottocfg.ast.Absyn.ListLVarStatement p_2 = (soottocfg.ast.Absyn.ListLVarStatement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new soottocfg.ast.Absyn.LV(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Stm ::= ListCommaIdentList _SYMB_9 _IDENT_ _SYMB_7 ListCommaExpList _SYMB_8 _SYMB_6 
            {
              soottocfg.ast.Absyn.Stm RESULT =null;
		soottocfg.ast.Absyn.ListCommaIdentList p_1 = (soottocfg.ast.Absyn.ListCommaIdentList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		soottocfg.ast.Absyn.ListCommaExpList p_5 = (soottocfg.ast.Absyn.ListCommaExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new soottocfg.ast.Absyn.Cal(p_1,p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Stm ::= _IDENT_ _SYMB_9 _SYMB_49 Type _SYMB_6 
            {
              soottocfg.ast.Absyn.Stm RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		soottocfg.ast.Absyn.Type p_4 = (soottocfg.ast.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new soottocfg.ast.Absyn.NewSt(p_1,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Stm ::= _IDENT_ _SYMB_9 Exp _SYMB_6 
            {
              soottocfg.ast.Absyn.Stm RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		soottocfg.ast.Absyn.Exp p_3 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new soottocfg.ast.Absyn.Asg(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Stm ::= _IDENT_ _SYMB_4 
            {
              soottocfg.ast.Absyn.Stm RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new soottocfg.ast.Absyn.Lbl(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ListLVarStatement ::= ListLVarStatement LVarStatement 
            {
              soottocfg.ast.Absyn.ListLVarStatement RESULT =null;
		soottocfg.ast.Absyn.ListLVarStatement p_1 = (soottocfg.ast.Absyn.ListLVarStatement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		soottocfg.ast.Absyn.LVarStatement p_2 = (soottocfg.ast.Absyn.LVarStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListLVarStatement",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ListLVarStatement ::= 
            {
              soottocfg.ast.Absyn.ListLVarStatement RESULT =null;
		 RESULT = new soottocfg.ast.Absyn.ListLVarStatement(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListLVarStatement",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // LVarStatement ::= Stm 
            {
              soottocfg.ast.Absyn.LVarStatement RESULT =null;
		soottocfg.ast.Absyn.Stm p_1 = (soottocfg.ast.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.Statem(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LVarStatement",21, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // LVarStatement ::= _SYMB_40 Type ListVarDecl _SYMB_6 
            {
              soottocfg.ast.Absyn.LVarStatement RESULT =null;
		soottocfg.ast.Absyn.Type p_2 = (soottocfg.ast.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		soottocfg.ast.Absyn.ListVarDecl p_3 = (soottocfg.ast.Absyn.ListVarDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new soottocfg.ast.Absyn.LVarf(p_2,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LVarStatement",21, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // LVarStatement ::= Type ListVarDecl _SYMB_6 
            {
              soottocfg.ast.Absyn.LVarStatement RESULT =null;
		soottocfg.ast.Absyn.Type p_1 = (soottocfg.ast.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		soottocfg.ast.Absyn.ListVarDecl p_2 = (soottocfg.ast.Absyn.ListVarDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new soottocfg.ast.Absyn.LVar(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LVarStatement",21, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Body ::= _SYMB_0 ListLVarStatement _SYMB_1 
            {
              soottocfg.ast.Absyn.Body RESULT =null;
		soottocfg.ast.Absyn.ListLVarStatement p_2 = (soottocfg.ast.Absyn.ListLVarStatement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new soottocfg.ast.Absyn.XBody(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Body",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // MethodBody ::= Body 
            {
              soottocfg.ast.Absyn.MethodBody RESULT =null;
		soottocfg.ast.Absyn.Body p_1 = (soottocfg.ast.Absyn.Body)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.MBody(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MethodBody",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // MethodBody ::= _SYMB_6 
            {
              soottocfg.ast.Absyn.MethodBody RESULT =null;
		 RESULT = new soottocfg.ast.Absyn.IBody(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MethodBody",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ListParameter ::= Parameter _SYMB_5 ListParameter 
            {
              soottocfg.ast.Absyn.ListParameter RESULT =null;
		soottocfg.ast.Absyn.Parameter p_1 = (soottocfg.ast.Absyn.Parameter)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		soottocfg.ast.Absyn.ListParameter p_3 = (soottocfg.ast.Absyn.ListParameter)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListParameter",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ListParameter ::= Parameter 
            {
              soottocfg.ast.Absyn.ListParameter RESULT =null;
		soottocfg.ast.Absyn.Parameter p_1 = (soottocfg.ast.Absyn.Parameter)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.ListParameter(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListParameter",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ListParameter ::= 
            {
              soottocfg.ast.Absyn.ListParameter RESULT =null;
		 RESULT = new soottocfg.ast.Absyn.ListParameter(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListParameter",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Parameter ::= _SYMB_40 Type DeclaratorName 
            {
              soottocfg.ast.Absyn.Parameter RESULT =null;
		soottocfg.ast.Absyn.Type p_2 = (soottocfg.ast.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		soottocfg.ast.Absyn.DeclaratorName p_3 = (soottocfg.ast.Absyn.DeclaratorName)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.Pfinal(p_2,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Parameter",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Parameter ::= Type DeclaratorName 
            {
              soottocfg.ast.Absyn.Parameter RESULT =null;
		soottocfg.ast.Absyn.Type p_1 = (soottocfg.ast.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		soottocfg.ast.Absyn.DeclaratorName p_2 = (soottocfg.ast.Absyn.DeclaratorName)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.Param(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Parameter",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // MethodDecl ::= DeclaratorName _SYMB_7 ListParameter _SYMB_8 _SYMB_45 _STRING_ 
            {
              soottocfg.ast.Absyn.MethodDecl RESULT =null;
		soottocfg.ast.Absyn.DeclaratorName p_1 = (soottocfg.ast.Absyn.DeclaratorName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		soottocfg.ast.Absyn.ListParameter p_3 = (soottocfg.ast.Absyn.ListParameter)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		String p_6 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.Mth2(p_1,p_3,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MethodDecl",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // MethodDecl ::= DeclaratorName _SYMB_7 ListParameter _SYMB_8 
            {
              soottocfg.ast.Absyn.MethodDecl RESULT =null;
		soottocfg.ast.Absyn.DeclaratorName p_1 = (soottocfg.ast.Absyn.DeclaratorName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		soottocfg.ast.Absyn.ListParameter p_3 = (soottocfg.ast.Absyn.ListParameter)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new soottocfg.ast.Absyn.Mth(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MethodDecl",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DeclaratorName ::= _IDENT_ 
            {
              soottocfg.ast.Absyn.DeclaratorName RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.DeclName(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclaratorName",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ListVarDecl ::= VarDecl _SYMB_5 ListVarDecl 
            {
              soottocfg.ast.Absyn.ListVarDecl RESULT =null;
		soottocfg.ast.Absyn.VarDecl p_1 = (soottocfg.ast.Absyn.VarDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		soottocfg.ast.Absyn.ListVarDecl p_3 = (soottocfg.ast.Absyn.ListVarDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListVarDecl",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ListVarDecl ::= VarDecl 
            {
              soottocfg.ast.Absyn.ListVarDecl RESULT =null;
		soottocfg.ast.Absyn.VarDecl p_1 = (soottocfg.ast.Absyn.VarDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.ListVarDecl(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListVarDecl",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // VarDecl ::= _IDENT_ 
            {
              soottocfg.ast.Absyn.VarDecl RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.VDecl(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecl",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ListFieldDeclaration ::= ListFieldDeclaration FieldDeclaration 
            {
              soottocfg.ast.Absyn.ListFieldDeclaration RESULT =null;
		soottocfg.ast.Absyn.ListFieldDeclaration p_1 = (soottocfg.ast.Absyn.ListFieldDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		soottocfg.ast.Absyn.FieldDeclaration p_2 = (soottocfg.ast.Absyn.FieldDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListFieldDeclaration",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ListFieldDeclaration ::= 
            {
              soottocfg.ast.Absyn.ListFieldDeclaration RESULT =null;
		 RESULT = new soottocfg.ast.Absyn.ListFieldDeclaration(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListFieldDeclaration",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FieldDeclaration ::= Type ListVarDecl _SYMB_6 
            {
              soottocfg.ast.Absyn.FieldDeclaration RESULT =null;
		soottocfg.ast.Absyn.Type p_1 = (soottocfg.ast.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		soottocfg.ast.Absyn.ListVarDecl p_2 = (soottocfg.ast.Absyn.ListVarDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new soottocfg.ast.Absyn.Dvar(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FieldDeclaration",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ListTypes ::= Types _SYMB_5 ListTypes 
            {
              soottocfg.ast.Absyn.ListTypes RESULT =null;
		soottocfg.ast.Absyn.Types p_1 = (soottocfg.ast.Absyn.Types)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		soottocfg.ast.Absyn.ListTypes p_3 = (soottocfg.ast.Absyn.ListTypes)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListTypes",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ListTypes ::= Types 
            {
              soottocfg.ast.Absyn.ListTypes RESULT =null;
		soottocfg.ast.Absyn.Types p_1 = (soottocfg.ast.Absyn.Types)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.ListTypes(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListTypes",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Types ::= Type 
            {
              soottocfg.ast.Absyn.Types RESULT =null;
		soottocfg.ast.Absyn.Type p_1 = (soottocfg.ast.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.TNames(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Types",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TypeList ::= _SYMB_2 ListTypes _SYMB_3 
            {
              soottocfg.ast.Absyn.TypeList RESULT =null;
		soottocfg.ast.Absyn.ListTypes p_2 = (soottocfg.ast.Absyn.ListTypes)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new soottocfg.ast.Absyn.TList2(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeList",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TypeList ::= Type 
            {
              soottocfg.ast.Absyn.TypeList RESULT =null;
		soottocfg.ast.Absyn.Type p_1 = (soottocfg.ast.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.TList1(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeList",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ListTupleEntry ::= TupleEntry _SYMB_5 ListTupleEntry 
            {
              soottocfg.ast.Absyn.ListTupleEntry RESULT =null;
		soottocfg.ast.Absyn.TupleEntry p_1 = (soottocfg.ast.Absyn.TupleEntry)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		soottocfg.ast.Absyn.ListTupleEntry p_3 = (soottocfg.ast.Absyn.ListTupleEntry)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListTupleEntry",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ListTupleEntry ::= TupleEntry 
            {
              soottocfg.ast.Absyn.ListTupleEntry RESULT =null;
		soottocfg.ast.Absyn.TupleEntry p_1 = (soottocfg.ast.Absyn.TupleEntry)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.ListTupleEntry(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListTupleEntry",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TupleEntry ::= _IDENT_ _SYMB_4 Type 
            {
              soottocfg.ast.Absyn.TupleEntry RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		soottocfg.ast.Absyn.Type p_3 = (soottocfg.ast.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.NamedTpl(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TupleEntry",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ListDecl ::= ListDecl Decl 
            {
              soottocfg.ast.Absyn.ListDecl RESULT =null;
		soottocfg.ast.Absyn.ListDecl p_1 = (soottocfg.ast.Absyn.ListDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		soottocfg.ast.Absyn.Decl p_2 = (soottocfg.ast.Absyn.Decl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListDecl",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ListDecl ::= 
            {
              soottocfg.ast.Absyn.ListDecl RESULT =null;
		 RESULT = new soottocfg.ast.Absyn.ListDecl(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListDecl",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DeclBody ::= _SYMB_2 ListTupleEntry _SYMB_3 _SYMB_0 ListFieldDeclaration _SYMB_1 
            {
              soottocfg.ast.Absyn.DeclBody RESULT =null;
		soottocfg.ast.Absyn.ListTupleEntry p_2 = (soottocfg.ast.Absyn.ListTupleEntry)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		soottocfg.ast.Absyn.ListFieldDeclaration p_5 = (soottocfg.ast.Absyn.ListFieldDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new soottocfg.ast.Absyn.TDeclBody2(p_2,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclBody",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DeclBody ::= _SYMB_0 ListFieldDeclaration _SYMB_1 
            {
              soottocfg.ast.Absyn.DeclBody RESULT =null;
		soottocfg.ast.Absyn.ListFieldDeclaration p_2 = (soottocfg.ast.Absyn.ListFieldDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new soottocfg.ast.Absyn.TDeclBody(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclBody",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Decl ::= TypeList MethodDecl MethodBody 
            {
              soottocfg.ast.Absyn.Decl RESULT =null;
		soottocfg.ast.Absyn.TypeList p_1 = (soottocfg.ast.Absyn.TypeList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		soottocfg.ast.Absyn.MethodDecl p_2 = (soottocfg.ast.Absyn.MethodDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		soottocfg.ast.Absyn.MethodBody p_3 = (soottocfg.ast.Absyn.MethodBody)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.MDecl(p_1,p_2,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Decl ::= _SYMB_34 _IDENT_ _SYMB_38 _IDENT_ DeclBody 
            {
              soottocfg.ast.Absyn.Decl RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		String p_4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		soottocfg.ast.Absyn.DeclBody p_5 = (soottocfg.ast.Absyn.DeclBody)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.TDecl2(p_2,p_4,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Decl ::= _SYMB_34 _IDENT_ DeclBody 
            {
              soottocfg.ast.Absyn.Decl RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		soottocfg.ast.Absyn.DeclBody p_3 = (soottocfg.ast.Absyn.DeclBody)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.TDecl(p_2,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // BasicType ::= _SYMB_33 
            {
              soottocfg.ast.Absyn.BasicType RESULT =null;
		 RESULT = new soottocfg.ast.Absyn.Tboolean(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BasicType",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // BasicType ::= _SYMB_55 
            {
              soottocfg.ast.Absyn.BasicType RESULT =null;
		 RESULT = new soottocfg.ast.Absyn.TVoid(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BasicType",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // BasicType ::= _SYMB_36 
            {
              soottocfg.ast.Absyn.BasicType RESULT =null;
		 RESULT = new soottocfg.ast.Absyn.Tdouble(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BasicType",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // BasicType ::= _SYMB_41 
            {
              soottocfg.ast.Absyn.BasicType RESULT =null;
		 RESULT = new soottocfg.ast.Absyn.Tfloat(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BasicType",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BasicType ::= _SYMB_48 
            {
              soottocfg.ast.Absyn.BasicType RESULT =null;
		 RESULT = new soottocfg.ast.Absyn.Tlong(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BasicType",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // BasicType ::= _SYMB_47 
            {
              soottocfg.ast.Absyn.BasicType RESULT =null;
		 RESULT = new soottocfg.ast.Absyn.Tint(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BasicType",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Type ::= _IDENT_ 
            {
              soottocfg.ast.Absyn.Type RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.ClassType(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Type ::= BasicType 
            {
              soottocfg.ast.Absyn.Type RESULT =null;
		soottocfg.ast.Absyn.BasicType p_1 = (soottocfg.ast.Absyn.BasicType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.BuiltIn(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ProgramFile ::= ListDecl 
            {
              soottocfg.ast.Absyn.ProgramFile RESULT =null;
		soottocfg.ast.Absyn.ListDecl p_1 = (soottocfg.ast.Absyn.ListDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.JhPrg(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProgramFile",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ProgramFile EOF 
            {
              Object RESULT =null;
		soottocfg.ast.Absyn.ProgramFile start_val = (soottocfg.ast.Absyn.ProgramFile)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

