/* The following code was generated by JFlex 1.6.1 */

// This JLex file was machine-generated by the BNF converter
package soottocfg.ast;

import java_cup.runtime.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>soottocfg/ast/Yylex</tt>
 */
public class Yylex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int CHAR = 4;
  public static final int CHARESC = 6;
  public static final int CHAREND = 8;
  public static final int STRING = 10;
  public static final int ESCAPED = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  2,  2,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\65\1\60\1\62\1\61\1\61\22\0\1\65\1\22\1\63"+
    "\2\0\1\27\1\20\1\3\1\13\1\14\1\25\1\23\1\11\1\24"+
    "\1\30\1\26\12\2\1\10\1\12\1\6\1\15\1\7\1\16\1\0"+
    "\32\1\1\0\1\64\1\0\1\21\1\3\1\0\1\32\1\41\1\45"+
    "\1\46\1\34\1\50\1\52\1\53\1\51\2\1\1\43\1\40\1\44"+
    "\1\42\1\55\1\57\1\35\1\33\1\36\1\37\1\54\1\56\1\47"+
    "\2\1\1\4\1\17\1\5\1\31\6\0\1\62\72\0\27\1\1\0"+
    "\7\1\30\1\1\0\10\1\u1f28\0\1\62\1\62\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\21\1\1\31\1\32\2\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\0\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\0"+
    "\13\1\1\55\5\1\1\56\5\1\1\0\1\57\1\60"+
    "\1\61\1\54\1\62\10\1\1\63\10\1\1\64\6\1"+
    "\1\0\2\1\1\65\2\1\1\66\2\1\1\67\1\70"+
    "\7\1\1\71\1\1\1\72\1\73\1\74\1\1\1\60"+
    "\1\0\6\1\1\75\1\1\1\76\1\77\1\100\2\1"+
    "\1\101\1\102\1\103\1\104\1\1\1\105\1\106\1\1"+
    "\1\107\2\1\1\110\1\111\6\1\1\112\1\113";

  private static int [] zzUnpackAction() {
    int [] result = new int[182];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\330\0\u010e\0\u0144\0\154"+
    "\0\154\0\u017a\0\u01b0\0\154\0\154\0\154\0\154\0\154"+
    "\0\u01e6\0\154\0\u021c\0\u0252\0\154\0\u0288\0\154\0\154"+
    "\0\154\0\u02be\0\154\0\154\0\154\0\u02f4\0\u032a\0\u0360"+
    "\0\u0396\0\u03cc\0\u0402\0\u0438\0\u046e\0\u04a4\0\u04da\0\u0510"+
    "\0\u0546\0\u057c\0\u05b2\0\u05e8\0\u061e\0\u0654\0\154\0\154"+
    "\0\154\0\u068a\0\154\0\154\0\154\0\154\0\154\0\154"+
    "\0\154\0\154\0\u06c0\0\154\0\154\0\u06f6\0\154\0\154"+
    "\0\154\0\154\0\154\0\u072c\0\u0762\0\u0798\0\u07ce\0\u0804"+
    "\0\u083a\0\u0870\0\u08a6\0\u08dc\0\u0912\0\u0948\0\u097e\0\u09b4"+
    "\0\u09ea\0\u0a20\0\u0a56\0\u0a8c\0\u0ac2\0\u0af8\0\u010e\0\u0b2e"+
    "\0\u0b64\0\u0b9a\0\u0bd0\0\u0c06\0\u0c3c\0\154\0\u0c72\0\154"+
    "\0\154\0\154\0\u0ca8\0\u0cde\0\u0d14\0\u0d4a\0\u0d80\0\u0db6"+
    "\0\u0dec\0\u0e22\0\u010e\0\u0e58\0\u0e8e\0\u0ec4\0\u0efa\0\u0f30"+
    "\0\u0f66\0\u0f9c\0\u0fd2\0\u010e\0\u1008\0\u103e\0\u1074\0\u10aa"+
    "\0\u10e0\0\u1116\0\u114c\0\u1182\0\u11b8\0\u010e\0\u11ee\0\u1224"+
    "\0\u010e\0\u125a\0\u1290\0\u010e\0\u010e\0\u12c6\0\u12fc\0\u1332"+
    "\0\u1368\0\u139e\0\u13d4\0\u140a\0\u010e\0\u1440\0\u010e\0\u010e"+
    "\0\u010e\0\u1476\0\u14ac\0\u14ac\0\u14e2\0\u1518\0\u154e\0\u1584"+
    "\0\u15ba\0\u15f0\0\u010e\0\u1626\0\u010e\0\u010e\0\u010e\0\u165c"+
    "\0\u1692\0\u010e\0\u010e\0\u010e\0\u010e\0\u16c8\0\u010e\0\u010e"+
    "\0\u16fe\0\u010e\0\u1734\0\u176a\0\u010e\0\u010e\0\u17a0\0\u17d6"+
    "\0\u180c\0\u1842\0\u1878\0\u18ae\0\u010e\0\u010e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[182];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\6\1\7\1\0\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\6\1\37\1\40\1\41\1\42"+
    "\1\6\1\43\1\6\1\44\1\45\1\46\1\47\1\6"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\6"+
    "\2\57\1\0\1\60\1\0\1\57\25\61\1\62\33\61"+
    "\2\0\3\61\66\0\60\63\3\0\1\64\1\65\1\63"+
    "\36\66\1\67\5\66\1\70\13\66\3\0\1\71\1\72"+
    "\1\66\1\0\3\6\26\0\26\6\10\0\1\7\25\0"+
    "\1\73\43\0\1\74\6\0\1\75\57\0\1\76\5\0"+
    "\1\77\65\0\1\100\67\0\1\101\66\0\1\102\62\0"+
    "\1\103\75\0\1\104\1\105\40\0\3\6\26\0\1\6"+
    "\1\106\24\6\7\0\3\6\26\0\11\6\1\107\3\6"+
    "\1\110\10\6\7\0\3\6\26\0\2\6\1\111\23\6"+
    "\7\0\3\6\26\0\3\6\1\112\22\6\7\0\3\6"+
    "\26\0\12\6\1\113\13\6\7\0\3\6\26\0\10\6"+
    "\1\114\15\6\7\0\3\6\26\0\10\6\1\115\15\6"+
    "\7\0\3\6\26\0\2\6\1\116\2\6\1\117\20\6"+
    "\7\0\3\6\26\0\11\6\1\120\14\6\7\0\3\6"+
    "\26\0\10\6\1\121\15\6\7\0\3\6\26\0\1\122"+
    "\10\6\1\123\5\6\1\124\6\6\7\0\3\6\26\0"+
    "\6\6\1\125\3\6\1\126\3\6\1\127\7\6\7\0"+
    "\3\6\26\0\10\6\1\130\15\6\7\0\3\6\26\0"+
    "\1\131\25\6\7\0\3\6\26\0\10\6\1\132\15\6"+
    "\7\0\3\6\26\0\5\6\1\133\20\6\7\0\3\6"+
    "\26\0\21\6\1\134\4\6\33\0\1\135\1\136\41\0"+
    "\1\137\72\0\1\140\103\0\1\141\40\0\60\105\1\142"+
    "\5\105\1\0\3\6\26\0\1\6\1\143\24\6\7\0"+
    "\3\6\26\0\1\6\1\144\24\6\7\0\3\6\26\0"+
    "\4\6\1\145\21\6\7\0\3\6\26\0\4\6\1\146"+
    "\21\6\7\0\3\6\26\0\5\6\1\147\20\6\7\0"+
    "\3\6\26\0\17\6\1\150\6\6\7\0\3\6\26\0"+
    "\10\6\1\151\15\6\7\0\3\6\26\0\12\6\1\152"+
    "\13\6\7\0\3\6\26\0\24\6\1\153\1\6\7\0"+
    "\3\6\26\0\11\6\1\154\14\6\7\0\3\6\26\0"+
    "\1\155\25\6\7\0\3\6\26\0\5\6\1\156\20\6"+
    "\7\0\3\6\26\0\11\6\1\157\14\6\7\0\3\6"+
    "\26\0\10\6\1\160\15\6\7\0\3\6\26\0\12\6"+
    "\1\161\13\6\7\0\3\6\26\0\23\6\1\162\2\6"+
    "\7\0\3\6\26\0\1\6\1\163\2\6\1\164\21\6"+
    "\7\0\3\6\26\0\4\6\1\165\21\6\7\0\3\6"+
    "\26\0\22\6\1\166\3\6\7\0\3\6\26\0\17\6"+
    "\1\167\6\6\7\0\3\6\26\0\1\6\1\170\7\6"+
    "\1\171\14\6\7\0\3\6\26\0\17\6\1\172\6\6"+
    "\34\0\1\136\41\0\1\137\31\0\1\173\32\0\3\6"+
    "\26\0\2\6\1\174\2\6\1\175\20\6\7\0\3\6"+
    "\26\0\2\6\1\176\23\6\7\0\3\6\26\0\2\6"+
    "\1\177\23\6\7\0\3\6\26\0\5\6\1\200\20\6"+
    "\7\0\3\6\26\0\2\6\1\201\23\6\7\0\3\6"+
    "\26\0\25\6\1\202\7\0\3\6\26\0\11\6\1\203"+
    "\14\6\7\0\3\6\26\0\20\6\1\204\5\6\7\0"+
    "\3\6\26\0\11\6\1\205\14\6\7\0\3\6\26\0"+
    "\1\6\1\206\24\6\7\0\3\6\26\0\7\6\1\207"+
    "\16\6\7\0\3\6\26\0\1\6\1\210\24\6\7\0"+
    "\3\6\26\0\1\211\25\6\7\0\3\6\26\0\1\212"+
    "\25\6\7\0\3\6\26\0\11\6\1\213\14\6\7\0"+
    "\3\6\26\0\4\6\1\214\21\6\7\0\3\6\26\0"+
    "\10\6\1\215\15\6\7\0\3\6\26\0\10\6\1\216"+
    "\15\6\7\0\3\6\26\0\14\6\1\217\11\6\7\0"+
    "\3\6\26\0\21\6\1\220\4\6\7\0\3\6\26\0"+
    "\11\6\1\221\14\6\7\0\3\6\26\0\11\6\1\222"+
    "\14\6\10\0\1\223\21\0\1\224\42\0\3\6\26\0"+
    "\3\6\1\225\22\6\7\0\3\6\26\0\6\6\1\226"+
    "\17\6\7\0\3\6\26\0\12\6\1\227\13\6\7\0"+
    "\3\6\26\0\3\6\1\230\22\6\7\0\3\6\26\0"+
    "\5\6\1\231\20\6\7\0\3\6\26\0\2\6\1\232"+
    "\23\6\7\0\3\6\26\0\1\6\1\233\24\6\7\0"+
    "\3\6\26\0\11\6\1\234\14\6\7\0\3\6\26\0"+
    "\2\6\1\235\23\6\7\0\3\6\26\0\4\6\1\236"+
    "\21\6\7\0\3\6\26\0\11\6\1\237\14\6\7\0"+
    "\3\6\26\0\2\6\1\240\23\6\7\0\3\6\26\0"+
    "\1\241\25\6\7\0\3\6\26\0\13\6\1\242\12\6"+
    "\7\0\3\6\26\0\2\6\1\243\23\6\10\0\1\223"+
    "\64\0\3\6\26\0\4\6\1\244\21\6\7\0\3\6"+
    "\26\0\2\6\1\245\23\6\7\0\3\6\26\0\14\6"+
    "\1\246\11\6\7\0\3\6\26\0\12\6\1\247\13\6"+
    "\7\0\3\6\26\0\2\6\1\250\23\6\7\0\3\6"+
    "\26\0\1\251\25\6\7\0\3\6\26\0\2\6\1\252"+
    "\23\6\7\0\3\6\26\0\6\6\1\253\17\6\7\0"+
    "\3\6\26\0\12\6\1\254\13\6\7\0\3\6\26\0"+
    "\1\6\1\255\24\6\7\0\3\6\26\0\12\6\1\256"+
    "\13\6\7\0\3\6\26\0\2\6\1\257\23\6\7\0"+
    "\3\6\26\0\13\6\1\260\12\6\7\0\3\6\26\0"+
    "\12\6\1\261\13\6\7\0\3\6\26\0\2\6\1\262"+
    "\23\6\7\0\3\6\26\0\4\6\1\263\21\6\7\0"+
    "\3\6\26\0\10\6\1\264\15\6\7\0\3\6\26\0"+
    "\1\6\1\265\24\6\7\0\3\6\26\0\16\6\1\266"+
    "\7\6\6\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6372];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\10\2\0\2\1\2\11\2\1\5\11\1\1"+
    "\1\11\2\1\1\11\1\1\3\11\1\1\3\11\21\1"+
    "\3\11\1\1\10\11\1\0\2\11\1\1\5\11\1\1"+
    "\1\0\27\1\1\0\1\11\1\1\3\11\30\1\1\0"+
    "\30\1\1\0\42\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[182];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  String pstring = new String();
  public int line_num() { return (yyline+1); }
  public String buff() {return new String(zzBuffer,zzCurrentPos,10).trim();}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Yylex(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 188) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return new Symbol(sym._IDENT_, yytext().intern());
            }
          case 76: break;
          case 2: 
            { return new Symbol(sym._INTEGER_, new Integer(yytext()));
            }
          case 77: break;
          case 3: 
            { return new Symbol(sym._SYMB_0);
            }
          case 78: break;
          case 4: 
            { return new Symbol(sym._SYMB_1);
            }
          case 79: break;
          case 5: 
            { return new Symbol(sym._SYMB_2);
            }
          case 80: break;
          case 6: 
            { return new Symbol(sym._SYMB_3);
            }
          case 81: break;
          case 7: 
            { return new Symbol(sym._SYMB_4);
            }
          case 82: break;
          case 8: 
            { return new Symbol(sym._SYMB_5);
            }
          case 83: break;
          case 9: 
            { return new Symbol(sym._SYMB_6);
            }
          case 84: break;
          case 10: 
            { return new Symbol(sym._SYMB_7);
            }
          case 85: break;
          case 11: 
            { return new Symbol(sym._SYMB_8);
            }
          case 86: break;
          case 12: 
            { return new Symbol(sym._SYMB_9);
            }
          case 87: break;
          case 13: 
            { return new Symbol(sym._SYMB_10);
            }
          case 88: break;
          case 14: 
            { return new Symbol(sym._SYMB_13);
            }
          case 89: break;
          case 15: 
            { return new Symbol(sym._SYMB_15);
            }
          case 90: break;
          case 16: 
            { return new Symbol(sym._SYMB_14);
            }
          case 91: break;
          case 17: 
            { return new Symbol(sym._SYMB_30);
            }
          case 92: break;
          case 18: 
            { return new Symbol(sym._SYMB_23);
            }
          case 93: break;
          case 19: 
            { return new Symbol(sym._SYMB_24);
            }
          case 94: break;
          case 20: 
            { return new Symbol(sym._SYMB_25);
            }
          case 95: break;
          case 21: 
            { return new Symbol(sym._SYMB_26);
            }
          case 96: break;
          case 22: 
            { return new Symbol(sym._SYMB_27);
            }
          case 97: break;
          case 23: 
            { return new Symbol(sym._SYMB_28);
            }
          case 98: break;
          case 24: 
            { return new Symbol(sym._SYMB_29);
            }
          case 99: break;
          case 25: 
            { /* ignore white space. */
            }
          case 100: break;
          case 26: 
            { yybegin(STRING);
            }
          case 101: break;
          case 27: 
            { 
            }
          case 102: break;
          case 28: 
            { pstring += yytext();
            }
          case 103: break;
          case 29: 
            { String foo = pstring; pstring = new String(); yybegin(YYINITIAL); return new Symbol(sym._STRING_, foo.intern());
            }
          case 104: break;
          case 30: 
            { yybegin(ESCAPED);
            }
          case 105: break;
          case 31: 
            { pstring += yytext(); yybegin(STRING);
            }
          case 106: break;
          case 32: 
            { pstring += "\t"; yybegin(STRING);
            }
          case 107: break;
          case 33: 
            { pstring +=  "\n"; yybegin(STRING);
            }
          case 108: break;
          case 34: 
            { pstring += "\""; yybegin(STRING);
            }
          case 109: break;
          case 35: 
            { pstring += "\\"; yybegin(STRING);
            }
          case 110: break;
          case 36: 
            { return new Symbol(sym._SYMB_20);
            }
          case 111: break;
          case 37: 
            { return new Symbol(sym._SYMB_18);
            }
          case 112: break;
          case 38: 
            { return new Symbol(sym._SYMB_21);
            }
          case 113: break;
          case 39: 
            { return new Symbol(sym._SYMB_19);
            }
          case 114: break;
          case 40: 
            { return new Symbol(sym._SYMB_16);
            }
          case 115: break;
          case 41: 
            { return new Symbol(sym._SYMB_11);
            }
          case 116: break;
          case 42: 
            { return new Symbol(sym._SYMB_12);
            }
          case 117: break;
          case 43: 
            { return new Symbol(sym._SYMB_17);
            }
          case 118: break;
          case 44: 
            { yybegin(COMMENT);
            }
          case 119: break;
          case 45: 
            { return new Symbol(sym._SYMB_35);
            }
          case 120: break;
          case 46: 
            { return new Symbol(sym._SYMB_44);
            }
          case 121: break;
          case 47: 
            { yybegin(YYINITIAL);
            }
          case 122: break;
          case 48: 
            { return new Symbol(sym._DOUBLE_, new Double(yytext()));
            }
          case 123: break;
          case 49: 
            { return new Symbol(sym._SYMB_22);
            }
          case 124: break;
          case 50: 
            { /* BNFC single-line comment */
            }
          case 125: break;
          case 51: 
            { return new Symbol(sym._SYMB_49);
            }
          case 126: break;
          case 52: 
            { return new Symbol(sym._SYMB_47);
            }
          case 127: break;
          case 53: 
            { return new Symbol(sym._SYMB_37);
            }
          case 128: break;
          case 54: 
            { return new Symbol(sym._SYMB_54);
            }
          case 129: break;
          case 55: 
            { return new Symbol(sym._SYMB_48);
            }
          case 130: break;
          case 56: 
            { return new Symbol(sym._SYMB_50);
            }
          case 131: break;
          case 57: 
            { return new Symbol(sym._SYMB_42);
            }
          case 132: break;
          case 58: 
            { return new Symbol(sym._SYMB_56);
            }
          case 133: break;
          case 59: 
            { return new Symbol(sym._SYMB_52);
            }
          case 134: break;
          case 60: 
            { return new Symbol(sym._SYMB_51);
            }
          case 135: break;
          case 61: 
            { return new Symbol(sym._SYMB_34);
            }
          case 136: break;
          case 62: 
            { return new Symbol(sym._SYMB_39);
            }
          case 137: break;
          case 63: 
            { return new Symbol(sym._SYMB_41);
            }
          case 138: break;
          case 64: 
            { return new Symbol(sym._SYMB_40);
            }
          case 139: break;
          case 65: 
            { return new Symbol(sym._SYMB_43);
            }
          case 140: break;
          case 66: 
            { return new Symbol(sym._SYMB_57);
            }
          case 141: break;
          case 67: 
            { return new Symbol(sym._SYMB_31);
            }
          case 142: break;
          case 68: 
            { return new Symbol(sym._SYMB_32);
            }
          case 143: break;
          case 69: 
            { return new Symbol(sym._SYMB_53);
            }
          case 144: break;
          case 70: 
            { return new Symbol(sym._SYMB_55);
            }
          case 145: break;
          case 71: 
            { return new Symbol(sym._SYMB_36);
            }
          case 146: break;
          case 72: 
            { return new Symbol(sym._SYMB_38);
            }
          case 147: break;
          case 73: 
            { return new Symbol(sym._SYMB_33);
            }
          case 148: break;
          case 74: 
            { return new Symbol(sym._SYMB_45);
            }
          case 149: break;
          case 75: 
            { return new Symbol(sym._SYMB_46);
            }
          case 150: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
