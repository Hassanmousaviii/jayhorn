
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Feb 28 20:21:03 EST 2017
//----------------------------------------------------

package soottocfg.ast;


/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Feb 28 20:21:03 EST 2017
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\206\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\005\007\000\002\005\012\000\002" +
    "\005\005\000\002\006\002\000\002\006\004\000\002\007" +
    "\005\000\002\010\003\000\002\010\005\000\002\011\003" +
    "\000\002\011\005\000\002\012\003\000\002\013\003\000" +
    "\002\013\005\000\002\014\005\000\002\015\002\000\002" +
    "\015\004\000\002\016\003\000\002\017\003\000\002\017" +
    "\005\000\002\020\003\000\002\021\006\000\002\021\010" +
    "\000\002\022\004\000\002\022\005\000\002\023\002\000" +
    "\002\023\003\000\002\023\005\000\002\024\003\000\002" +
    "\024\003\000\002\025\005\000\002\026\005\000\002\026" +
    "\006\000\002\026\003\000\002\027\002\000\002\027\004" +
    "\000\002\030\004\000\002\030\006\000\002\030\007\000" +
    "\002\030\011\000\002\030\005\000\002\030\003\000\002" +
    "\030\003\000\002\030\003\000\002\030\003\000\002\030" +
    "\003\000\002\031\003\000\002\032\003\000\002\032\005" +
    "\000\002\033\003\000\002\034\003\000\002\034\005\000" +
    "\002\035\007\000\002\035\007\000\002\036\005\000\002" +
    "\036\004\000\002\036\005\000\002\037\007\000\002\037" +
    "\010\000\002\040\010\000\002\040\012\000\002\041\010" +
    "\000\002\042\002\000\002\042\004\000\002\043\011\000" +
    "\002\043\007\000\002\043\005\000\002\044\005\000\002" +
    "\044\003\000\002\045\007\000\002\045\003\000\002\046" +
    "\005\000\002\046\003\000\002\047\005\000\002\047\003" +
    "\000\002\050\005\000\002\050\003\000\002\051\005\000" +
    "\002\051\003\000\002\052\005\000\002\052\003\000\002" +
    "\053\005\000\002\053\005\000\002\053\003\000\002\054" +
    "\005\000\002\054\005\000\002\054\005\000\002\054\005" +
    "\000\002\054\003\000\002\055\005\000\002\055\005\000" +
    "\002\055\005\000\002\055\003\000\002\056\005\000\002" +
    "\056\005\000\002\056\003\000\002\057\005\000\002\057" +
    "\005\000\002\057\005\000\002\057\003\000\002\060\004" +
    "\000\002\060\003\000\002\061\003\000\002\061\003\000" +
    "\002\061\003\000\002\061\003\000\002\062\003\000\002" +
    "\062\005\000\002\063\003\000\002\064\003\000\002\065" +
    "\005\000\002\066\005\000\002\066\003\000\002\066\003" +
    "\000\002\067\003\000\002\067\003\000\002\070\003\000" +
    "\002\071\003\000\002\071\003\000\002\071\003\000\002" +
    "\071\003\000\002\072\003\000\002\072\003\000\002\072" +
    "\003\000\002\072\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\370\000\026\002\ufff4\006\ufff4\045\ufff4\046\ufff4\050" +
    "\ufff4\054\ufff4\062\ufff4\063\ufff4\072\ufff4\077\ufff4\001\002" +
    "\000\026\002\000\006\014\045\023\046\022\050\021\054" +
    "\020\062\016\063\015\072\012\077\017\001\002\000\004" +
    "\002\006\001\002\000\004\002\001\001\002\000\004\077" +
    "\062\001\002\000\004\077\uffef\001\002\000\026\002\ufff3" +
    "\006\ufff3\045\ufff3\046\ufff3\050\ufff3\054\ufff3\062\ufff3\063" +
    "\ufff3\072\ufff3\077\ufff3\001\002\000\016\007\ufff9\010\ufff9" +
    "\011\ufff9\012\ufff9\014\ufff9\077\ufff9\001\002\000\016\007" +
    "\uffff\010\uffff\011\uffff\012\uffff\014\uffff\077\uffff\001\002" +
    "\000\020\045\023\050\021\054\020\062\016\063\015\072" +
    "\012\077\017\001\002\000\016\007\ufffc\010\ufffc\011\ufffc" +
    "\012\ufffc\014\ufffc\077\ufffc\001\002\000\016\007\ufffd\010" +
    "\ufffd\011\ufffd\012\ufffd\014\ufffd\077\ufffd\001\002\000\016" +
    "\007\ufffe\010\ufffe\011\ufffe\012\ufffe\014\ufffe\077\ufffe\001" +
    "\002\000\016\007\ufffb\010\ufffb\011\ufffb\012\ufffb\014\ufffb" +
    "\077\ufffb\001\002\000\016\007\ufffa\010\ufffa\011\ufffa\012" +
    "\ufffa\014\ufffa\077\ufffa\001\002\000\004\077\024\001\002" +
    "\000\016\007\ufff8\010\ufff8\011\ufff8\012\ufff8\014\ufff8\077" +
    "\ufff8\001\002\000\006\004\026\006\025\001\002\000\004" +
    "\077\042\001\002\000\022\005\uffe9\045\uffe9\050\uffe9\054" +
    "\uffe9\062\uffe9\063\uffe9\072\uffe9\077\uffe9\001\002\000\022" +
    "\005\031\045\023\050\021\054\020\062\016\063\015\072" +
    "\012\077\017\001\002\000\004\077\034\001\002\000\026" +
    "\002\ufff7\006\ufff7\045\ufff7\046\ufff7\050\ufff7\054\ufff7\062" +
    "\ufff7\063\ufff7\072\ufff7\077\ufff7\001\002\000\022\005\uffe8" +
    "\045\uffe8\050\uffe8\054\uffe8\062\uffe8\063\uffe8\072\uffe8\077" +
    "\uffe8\001\002\000\004\012\040\001\002\000\006\011\uffe7" +
    "\012\uffe7\001\002\000\006\011\036\012\uffe6\001\002\000" +
    "\004\077\034\001\002\000\004\012\uffe5\001\002\000\022" +
    "\005\uffea\045\uffea\050\uffea\054\uffea\062\uffea\063\uffea\072" +
    "\uffea\077\uffea\001\002\000\004\007\050\001\002\000\004" +
    "\010\046\001\002\000\006\007\ufff1\011\044\001\002\000" +
    "\004\077\042\001\002\000\004\007\ufff0\001\002\000\020" +
    "\045\023\050\021\054\020\062\016\063\015\072\012\077" +
    "\017\001\002\000\006\007\ufff2\011\ufff2\001\002\000\004" +
    "\004\051\001\002\000\022\005\uffe9\045\uffe9\050\uffe9\054" +
    "\uffe9\062\uffe9\063\uffe9\072\uffe9\077\uffe9\001\002\000\022" +
    "\005\053\045\023\050\021\054\020\062\016\063\015\072" +
    "\012\077\017\001\002\000\026\002\ufff6\006\ufff6\045\ufff6" +
    "\046\ufff6\050\ufff6\054\ufff6\062\ufff6\063\ufff6\072\ufff6\077" +
    "\ufff6\001\002\000\006\007\uffed\011\uffed\001\002\000\006" +
    "\007\uffec\011\060\001\002\000\004\007\057\001\002\000" +
    "\004\077\uffee\001\002\000\020\045\023\050\021\054\020" +
    "\062\016\063\015\072\012\077\017\001\002\000\004\007" +
    "\uffeb\001\002\000\010\011\uffe4\013\uffe4\014\uffe4\001\002" +
    "\000\004\013\356\001\002\000\006\004\065\012\070\001" +
    "\002\000\050\004\uffd6\005\uffd6\043\uffd6\044\uffd6\045\uffd6" +
    "\047\uffd6\050\uffd6\053\uffd6\054\uffd6\055\uffd6\056\uffd6\057" +
    "\uffd6\062\uffd6\063\uffd6\067\uffd6\070\uffd6\072\uffd6\073\uffd6" +
    "\077\uffd6\001\002\000\026\002\ufff5\006\ufff5\045\ufff5\046" +
    "\ufff5\050\ufff5\054\ufff5\062\ufff5\063\ufff5\072\ufff5\077\ufff5" +
    "\001\002\000\026\002\uffdb\006\uffdb\045\uffdb\046\uffdb\050" +
    "\uffdb\054\uffdb\062\uffdb\063\uffdb\072\uffdb\077\uffdb\001\002" +
    "\000\026\002\uffdc\006\uffdc\045\uffdc\046\uffdc\050\uffdc\054" +
    "\uffdc\062\uffdc\063\uffdc\072\uffdc\077\uffdc\001\002\000\050" +
    "\004\113\005\112\043\100\044\075\045\023\047\073\050" +
    "\021\053\120\054\020\055\110\056\107\057\105\062\016" +
    "\063\015\067\116\070\115\072\012\073\114\077\076\001" +
    "\002\000\004\015\343\001\002\000\030\004\113\043\100" +
    "\044\075\047\073\055\110\056\107\057\105\067\116\070" +
    "\115\073\114\077\266\001\002\000\050\004\uffd7\005\uffd7" +
    "\043\uffd7\044\uffd7\045\uffd7\047\uffd7\050\uffd7\053\uffd7\054" +
    "\uffd7\055\uffd7\056\uffd7\057\uffd7\062\uffd7\063\uffd7\067\uffd7" +
    "\070\uffd7\072\uffd7\073\uffd7\077\uffd7\001\002\000\004\013" +
    "\332\001\002\000\012\010\267\011\uffc7\015\270\077\ufffe" +
    "\001\002\000\052\004\uffce\005\uffce\043\uffce\044\uffce\045" +
    "\uffce\047\uffce\050\uffce\051\uffce\053\uffce\054\uffce\055\uffce" +
    "\056\uffce\057\uffce\062\uffce\063\uffce\067\uffce\070\uffce\072" +
    "\uffce\073\uffce\077\uffce\001\002\000\004\013\326\001\002" +
    "\000\052\004\uffcb\005\uffcb\043\uffcb\044\uffcb\045\uffcb\047" +
    "\uffcb\050\uffcb\051\uffcb\053\uffcb\054\uffcb\055\uffcb\056\uffcb" +
    "\057\uffcb\062\uffcb\063\uffcb\067\uffcb\070\uffcb\072\uffcb\073" +
    "\uffcb\077\uffcb\001\002\000\010\011\324\012\uffc6\015\uffc6" +
    "\001\002\000\052\004\uffcc\005\uffcc\043\uffcc\044\uffcc\045" +
    "\uffcc\047\uffcc\050\uffcc\051\uffcc\053\uffcc\054\uffcc\055\uffcc" +
    "\056\uffcc\057\uffcc\062\uffcc\063\uffcc\067\uffcc\070\uffcc\072" +
    "\uffcc\073\uffcc\077\uffcc\001\002\000\004\077\034\001\002" +
    "\000\004\013\305\001\002\000\050\004\uffd5\005\uffd5\043" +
    "\uffd5\044\uffd5\045\uffd5\047\uffd5\050\uffd5\053\uffd5\054\uffd5" +
    "\055\uffd5\056\uffd5\057\uffd5\062\uffd5\063\uffd5\067\uffd5\070" +
    "\uffd5\072\uffd5\073\uffd5\077\uffd5\001\002\000\004\077\301" +
    "\001\002\000\004\077\301\001\002\000\052\004\uffcf\005" +
    "\uffcf\043\uffcf\044\uffcf\045\uffcf\047\uffcf\050\uffcf\051\uffcf" +
    "\053\uffcf\054\uffcf\055\uffcf\056\uffcf\057\uffcf\062\uffcf\063" +
    "\uffcf\067\uffcf\070\uffcf\072\uffcf\073\uffcf\077\uffcf\001\002" +
    "\000\026\002\uffda\006\uffda\045\uffda\046\uffda\050\uffda\054" +
    "\uffda\062\uffda\063\uffda\072\uffda\077\uffda\001\002\000\050" +
    "\004\uffd6\005\uffd6\043\uffd6\044\uffd6\045\uffd6\047\uffd6\050" +
    "\uffd6\053\uffd6\054\uffd6\055\uffd6\056\uffd6\057\uffd6\062\uffd6" +
    "\063\uffd6\067\uffd6\070\uffd6\072\uffd6\073\uffd6\077\uffd6\001" +
    "\002\000\004\013\262\001\002\000\032\012\257\013\127" +
    "\033\155\034\154\041\151\042\145\052\141\065\125\071" +
    "\156\075\131\076\163\077\130\001\002\000\004\013\124" +
    "\001\002\000\052\004\uffcd\005\uffcd\043\uffcd\044\uffcd\045" +
    "\uffcd\047\uffcd\050\uffcd\051\uffcd\053\uffcd\054\uffcd\055\uffcd" +
    "\056\uffcd\057\uffcd\062\uffcd\063\uffcd\067\uffcd\070\uffcd\072" +
    "\uffcd\073\uffcd\077\uffcd\001\002\000\020\045\023\050\021" +
    "\054\020\062\016\063\015\072\012\077\017\001\002\000" +
    "\004\077\034\001\002\000\004\012\123\001\002\000\050" +
    "\004\uffd8\005\uffd8\043\uffd8\044\uffd8\045\uffd8\047\uffd8\050" +
    "\uffd8\053\uffd8\054\uffd8\055\uffd8\056\uffd8\057\uffd8\062\uffd8" +
    "\063\uffd8\067\uffd8\070\uffd8\072\uffd8\073\uffd8\077\uffd8\001" +
    "\002\000\030\013\127\033\155\034\154\041\151\042\145" +
    "\052\141\065\125\071\156\075\131\076\163\077\130\001" +
    "\002\000\066\006\uff84\007\uff84\010\uff84\011\uff84\012\uff84" +
    "\014\uff84\016\uff84\017\uff84\020\uff84\021\uff84\022\uff84\023" +
    "\uff84\024\uff84\025\uff84\026\uff84\027\uff84\030\uff84\031\uff84" +
    "\032\uff84\033\uff84\034\uff84\035\uff84\036\uff84\037\uff84\040" +
    "\uff84\061\uff84\001\002\000\066\006\uff90\007\uff90\010\uff90" +
    "\011\uff90\012\uff90\014\uff90\016\uff90\017\uff90\020\uff90\021" +
    "\uff90\022\uff90\023\uff90\024\uff90\025\uff90\026\uff90\027\uff90" +
    "\030\uff90\031\uff90\032\uff90\033\uff90\034\uff90\035\uff90\036" +
    "\uff90\037\uff90\040\uff86\061\uff90\001\002\000\030\013\127" +
    "\033\155\034\154\041\151\042\145\052\141\065\125\071" +
    "\156\075\131\076\163\077\130\001\002\000\064\006\uff8e" +
    "\007\uff8e\010\uff8e\011\uff8e\012\uff8e\014\uff8e\016\uff8e\017" +
    "\uff8e\020\uff8e\021\uff8e\022\uff8e\023\uff8e\024\uff8e\025\uff8e" +
    "\026\uff8e\027\uff8e\030\uff8e\031\uff8e\032\uff8e\033\uff8e\034" +
    "\uff8e\035\uff8e\036\uff8e\037\uff8e\061\uff8e\001\002\000\066" +
    "\006\uff82\007\uff82\010\uff82\011\uff82\012\uff82\014\uff82\016" +
    "\uff82\017\uff82\020\uff82\021\uff82\022\uff82\023\uff82\024\uff82" +
    "\025\uff82\026\uff82\027\uff82\030\uff82\031\uff82\032\uff82\033" +
    "\uff82\034\uff82\035\uff82\036\uff82\037\uff82\040\uff82\061\uff82" +
    "\001\002\000\042\006\243\007\241\010\uffa5\011\uffa5\012" +
    "\uffa5\014\uffa5\016\uffa5\017\uffa5\020\uffa5\021\uffa5\022\uffa5" +
    "\023\uffa5\024\uffa5\025\uffa5\026\244\027\242\001\002\000" +
    "\032\010\uffa8\011\uffa8\012\uffa8\014\uffa8\016\uffa8\017\uffa8" +
    "\020\uffa8\021\uffa8\022\uffa8\023\uffa8\024\237\025\236\001" +
    "\002\000\026\010\uffaa\011\uffaa\012\uffaa\014\uffaa\016\uffaa" +
    "\017\uffaa\020\uffaa\021\uffaa\022\uffaa\023\234\001\002\000" +
    "\024\010\uffac\011\uffac\012\uffac\014\uffac\016\uffac\017\uffac" +
    "\020\uffac\021\uffac\022\232\001\002\000\022\010\uffae\011" +
    "\uffae\012\uffae\014\uffae\016\uffae\017\uffae\020\uffae\021\230" +
    "\001\002\000\020\010\uffb0\011\uffb0\012\uffb0\014\uffb0\016" +
    "\uffb0\017\uffb0\020\226\001\002\000\016\010\uffb2\011\uffb2" +
    "\012\uffb2\014\uffb2\016\223\017\224\001\002\000\066\006" +
    "\uff80\007\uff80\010\uff80\011\uff80\012\uff80\014\uff80\016\uff80" +
    "\017\uff80\020\uff80\021\uff80\022\uff80\023\uff80\024\uff80\025" +
    "\uff80\026\uff80\027\uff80\030\uff80\031\uff80\032\uff80\033\uff80" +
    "\034\uff80\035\uff80\036\uff80\037\uff80\040\uff80\061\uff80\001" +
    "\002\000\012\010\uff8c\011\uff8c\012\uff8c\014\uff8c\001\002" +
    "\000\012\010\uffb4\011\uffb4\012\uffb4\014\uffb4\001\002\000" +
    "\004\014\221\001\002\000\020\013\uff7c\052\uff7c\065\uff7c" +
    "\071\uff7c\075\uff7c\076\uff7c\077\uff7c\001\002\000\004\040" +
    "\uff88\001\002\000\020\013\127\052\141\065\125\071\156" +
    "\075\131\076\163\077\130\001\002\000\010\011\uffca\012" +
    "\uffca\014\uffca\001\002\000\020\013\uff7d\052\uff7d\065\uff7d" +
    "\071\uff7d\075\uff7d\076\uff7d\077\uff7d\001\002\000\004\040" +
    "\216\001\002\000\066\006\uff91\007\uff91\010\uff91\011\uff91" +
    "\012\uff91\014\uff91\016\uff91\017\uff91\020\uff91\021\uff91\022" +
    "\uff91\023\uff91\024\uff91\025\uff91\026\uff91\027\uff91\030\uff91" +
    "\031\uff91\032\uff91\033\uff91\034\uff91\035\uff91\036\uff91\037" +
    "\uff91\040\uff85\061\uff91\001\002\000\020\013\uff7e\052\uff7e" +
    "\065\uff7e\071\uff7e\075\uff7e\076\uff7e\077\uff7e\001\002\000" +
    "\020\013\uff7f\052\uff7f\065\uff7f\071\uff7f\075\uff7f\076\uff7f" +
    "\077\uff7f\001\002\000\066\006\uff81\007\uff81\010\uff81\011" +
    "\uff81\012\uff81\014\uff81\016\uff81\017\uff81\020\uff81\021\uff81" +
    "\022\uff81\023\uff81\024\uff81\025\uff81\026\uff81\027\uff81\030" +
    "\uff81\031\uff81\032\uff81\033\uff81\034\uff81\035\uff81\036\uff81" +
    "\037\uff81\040\uff81\061\uff81\001\002\000\064\006\uff8f\007" +
    "\uff8f\010\uff8f\011\uff8f\012\uff8f\014\uff8f\016\uff8f\017\uff8f" +
    "\020\uff8f\021\uff8f\022\uff8f\023\uff8f\024\uff8f\025\uff8f\026" +
    "\uff8f\027\uff8f\030\uff8f\031\uff8f\032\uff8f\033\uff8f\034\uff8f" +
    "\035\uff8f\036\uff8f\037\uff8f\061\uff8f\001\002\000\064\006" +
    "\uff93\007\uff93\010\uff93\011\uff93\012\uff93\014\uff93\016\uff93" +
    "\017\uff93\020\uff93\021\uff93\022\uff93\023\uff93\024\uff93\025" +
    "\uff93\026\uff93\027\uff93\030\uff93\031\uff93\032\uff93\033\uff93" +
    "\034\uff93\035\uff93\036\uff93\037\uff93\061\uff93\001\002\000" +
    "\064\006\uff8b\007\uff8b\010\uff8b\011\uff8b\012\uff8b\014\uff8b" +
    "\016\uff8b\017\uff8b\020\uff8b\021\uff8b\022\uff8b\023\uff8b\024" +
    "\uff8b\025\uff8b\026\uff8b\027\uff8b\030\uff8b\031\uff8b\032\uff8b" +
    "\033\uff8b\034\uff8b\035\uff8b\036\uff8b\037\uff8b\061\214\001" +
    "\002\000\062\006\uff95\007\uff95\010\uff95\011\uff95\012\uff95" +
    "\014\uff95\016\uff95\017\uff95\020\uff95\021\uff95\022\uff95\023" +
    "\uff95\024\uff95\025\uff95\026\uff95\027\uff95\030\uff95\031\uff95" +
    "\032\uff95\033\uff95\034\uff95\035\uff95\036\uff95\037\uff95\001" +
    "\002\000\066\006\uff83\007\uff83\010\uff83\011\uff83\012\uff83" +
    "\014\uff83\016\uff83\017\uff83\020\uff83\021\uff83\022\uff83\023" +
    "\uff83\024\uff83\025\uff83\026\uff83\027\uff83\030\uff83\031\uff83" +
    "\032\uff83\033\uff83\034\uff83\035\uff83\036\uff83\037\uff83\040" +
    "\uff83\061\uff83\001\002\000\062\006\uff99\007\uff99\010\uff99" +
    "\011\uff99\012\uff99\014\uff99\016\uff99\017\uff99\020\uff99\021" +
    "\uff99\022\uff99\023\uff99\024\uff99\025\uff99\026\uff99\027\uff99" +
    "\030\uff99\031\uff99\032\uff99\033\uff99\034\uff99\035\205\036" +
    "\204\037\203\001\002\000\054\006\uff9c\007\uff9c\010\uff9c" +
    "\011\uff9c\012\uff9c\014\uff9c\016\uff9c\017\uff9c\020\uff9c\021" +
    "\uff9c\022\uff9c\023\uff9c\024\uff9c\025\uff9c\026\uff9c\027\uff9c" +
    "\030\uff9c\031\uff9c\032\uff9c\033\201\034\200\001\002\000" +
    "\050\006\uffa0\007\uffa0\010\uffa0\011\uffa0\012\uffa0\014\uffa0" +
    "\016\uffa0\017\uffa0\020\uffa0\021\uffa0\022\uffa0\023\uffa0\024" +
    "\uffa0\025\uffa0\026\uffa0\027\uffa0\030\175\031\174\032\173" +
    "\001\002\000\066\006\uff92\007\uff92\010\uff92\011\uff92\012" +
    "\uff92\014\uff92\016\uff92\017\uff92\020\uff92\021\uff92\022\uff92" +
    "\023\uff92\024\uff92\025\uff92\026\uff92\027\uff92\030\uff92\031" +
    "\uff92\032\uff92\033\uff92\034\uff92\035\uff92\036\uff92\037\uff92" +
    "\040\uff87\061\uff92\001\002\000\010\011\171\012\uffc9\014" +
    "\uffc9\001\002\000\030\013\127\033\155\034\154\041\151" +
    "\042\145\052\141\065\125\071\156\075\131\076\163\077" +
    "\130\001\002\000\006\012\uffc8\014\uffc8\001\002\000\030" +
    "\013\127\033\155\034\154\041\151\042\145\052\141\065" +
    "\125\071\156\075\131\076\163\077\130\001\002\000\030" +
    "\013\127\033\155\034\154\041\151\042\145\052\141\065" +
    "\125\071\156\075\131\076\163\077\130\001\002\000\030" +
    "\013\127\033\155\034\154\041\151\042\145\052\141\065" +
    "\125\071\156\075\131\076\163\077\130\001\002\000\054" +
    "\006\uff9f\007\uff9f\010\uff9f\011\uff9f\012\uff9f\014\uff9f\016" +
    "\uff9f\017\uff9f\020\uff9f\021\uff9f\022\uff9f\023\uff9f\024\uff9f" +
    "\025\uff9f\026\uff9f\027\uff9f\030\uff9f\031\uff9f\032\uff9f\033" +
    "\201\034\200\001\002\000\062\006\uff8b\007\uff8b\010\uff8b" +
    "\011\uff8b\012\uff8b\014\uff8b\016\uff8b\017\uff8b\020\uff8b\021" +
    "\uff8b\022\uff8b\023\uff8b\024\uff8b\025\uff8b\026\uff8b\027\uff8b" +
    "\030\uff8b\031\uff8b\032\uff8b\033\uff8b\034\uff8b\035\uff8b\036" +
    "\uff8b\037\uff8b\001\002\000\030\013\127\033\155\034\154" +
    "\041\151\042\145\052\141\065\125\071\156\075\131\076" +
    "\163\077\130\001\002\000\030\013\127\033\155\034\154" +
    "\041\151\042\145\052\141\065\125\071\156\075\131\076" +
    "\163\077\130\001\002\000\062\006\uff9b\007\uff9b\010\uff9b" +
    "\011\uff9b\012\uff9b\014\uff9b\016\uff9b\017\uff9b\020\uff9b\021" +
    "\uff9b\022\uff9b\023\uff9b\024\uff9b\025\uff9b\026\uff9b\027\uff9b" +
    "\030\uff9b\031\uff9b\032\uff9b\033\uff9b\034\uff9b\035\205\036" +
    "\204\037\203\001\002\000\030\013\127\033\155\034\154" +
    "\041\151\042\145\052\141\065\125\071\156\075\131\076" +
    "\163\077\130\001\002\000\030\013\127\033\155\034\154" +
    "\041\151\042\145\052\141\065\125\071\156\075\131\076" +
    "\163\077\130\001\002\000\030\013\127\033\155\034\154" +
    "\041\151\042\145\052\141\065\125\071\156\075\131\076" +
    "\163\077\130\001\002\000\062\006\uff98\007\uff98\010\uff98" +
    "\011\uff98\012\uff98\014\uff98\016\uff98\017\uff98\020\uff98\021" +
    "\uff98\022\uff98\023\uff98\024\uff98\025\uff98\026\uff98\027\uff98" +
    "\030\uff98\031\uff98\032\uff98\033\uff98\034\uff98\035\uff98\036" +
    "\uff98\037\uff98\001\002\000\062\006\uff97\007\uff97\010\uff97" +
    "\011\uff97\012\uff97\014\uff97\016\uff97\017\uff97\020\uff97\021" +
    "\uff97\022\uff97\023\uff97\024\uff97\025\uff97\026\uff97\027\uff97" +
    "\030\uff97\031\uff97\032\uff97\033\uff97\034\uff97\035\uff97\036" +
    "\uff97\037\uff97\001\002\000\062\006\uff96\007\uff96\010\uff96" +
    "\011\uff96\012\uff96\014\uff96\016\uff96\017\uff96\020\uff96\021" +
    "\uff96\022\uff96\023\uff96\024\uff96\025\uff96\026\uff96\027\uff96" +
    "\030\uff96\031\uff96\032\uff96\033\uff96\034\uff96\035\uff96\036" +
    "\uff96\037\uff96\001\002\000\062\006\uff9a\007\uff9a\010\uff9a" +
    "\011\uff9a\012\uff9a\014\uff9a\016\uff9a\017\uff9a\020\uff9a\021" +
    "\uff9a\022\uff9a\023\uff9a\024\uff9a\025\uff9a\026\uff9a\027\uff9a" +
    "\030\uff9a\031\uff9a\032\uff9a\033\uff9a\034\uff9a\035\205\036" +
    "\204\037\203\001\002\000\054\006\uff9e\007\uff9e\010\uff9e" +
    "\011\uff9e\012\uff9e\014\uff9e\016\uff9e\017\uff9e\020\uff9e\021" +
    "\uff9e\022\uff9e\023\uff9e\024\uff9e\025\uff9e\026\uff9e\027\uff9e" +
    "\030\uff9e\031\uff9e\032\uff9e\033\201\034\200\001\002\000" +
    "\054\006\uff9d\007\uff9d\010\uff9d\011\uff9d\012\uff9d\014\uff9d" +
    "\016\uff9d\017\uff9d\020\uff9d\021\uff9d\022\uff9d\023\uff9d\024" +
    "\uff9d\025\uff9d\026\uff9d\027\uff9d\030\uff9d\031\uff9d\032\uff9d" +
    "\033\201\034\200\001\002\000\020\045\023\050\021\054" +
    "\020\062\016\063\015\072\012\077\017\001\002\000\012" +
    "\010\uffb5\011\uffb5\012\uffb5\014\uffb5\001\002\000\004\077" +
    "\217\001\002\000\066\006\uff8a\007\uff8a\010\uff8a\011\uff8a" +
    "\012\uff8a\014\uff8a\016\uff8a\017\uff8a\020\uff8a\021\uff8a\022" +
    "\uff8a\023\uff8a\024\uff8a\025\uff8a\026\uff8a\027\uff8a\030\uff8a" +
    "\031\uff8a\032\uff8a\033\uff8a\034\uff8a\035\uff8a\036\uff8a\037" +
    "\uff8a\040\uff8a\061\uff8a\001\002\000\064\006\uff94\007\uff94" +
    "\010\uff94\011\uff94\012\uff94\014\uff94\016\uff94\017\uff94\020" +
    "\uff94\021\uff94\022\uff94\023\uff94\024\uff94\025\uff94\026\uff94" +
    "\027\uff94\030\uff94\031\uff94\032\uff94\033\uff94\034\uff94\035" +
    "\uff94\036\uff94\037\uff94\061\uff94\001\002\000\004\012\222" +
    "\001\002\000\052\004\uffb7\005\uffb7\043\uffb7\044\uffb7\045" +
    "\uffb7\047\uffb7\050\uffb7\051\uffb7\053\uffb7\054\uffb7\055\uffb7" +
    "\056\uffb7\057\uffb7\062\uffb7\063\uffb7\067\uffb7\070\uffb7\072" +
    "\uffb7\073\uffb7\077\uffb7\001\002\000\030\013\127\033\155" +
    "\034\154\041\151\042\145\052\141\065\125\071\156\075" +
    "\131\076\163\077\130\001\002\000\030\013\127\033\155" +
    "\034\154\041\151\042\145\052\141\065\125\071\156\075" +
    "\131\076\163\077\130\001\002\000\020\010\uffb1\011\uffb1" +
    "\012\uffb1\014\uffb1\016\uffb1\017\uffb1\020\226\001\002\000" +
    "\030\013\127\033\155\034\154\041\151\042\145\052\141" +
    "\065\125\071\156\075\131\076\163\077\130\001\002\000" +
    "\022\010\uffaf\011\uffaf\012\uffaf\014\uffaf\016\uffaf\017\uffaf" +
    "\020\uffaf\021\230\001\002\000\030\013\127\033\155\034" +
    "\154\041\151\042\145\052\141\065\125\071\156\075\131" +
    "\076\163\077\130\001\002\000\024\010\uffad\011\uffad\012" +
    "\uffad\014\uffad\016\uffad\017\uffad\020\uffad\021\uffad\022\232" +
    "\001\002\000\030\013\127\033\155\034\154\041\151\042" +
    "\145\052\141\065\125\071\156\075\131\076\163\077\130" +
    "\001\002\000\026\010\uffab\011\uffab\012\uffab\014\uffab\016" +
    "\uffab\017\uffab\020\uffab\021\uffab\022\uffab\023\234\001\002" +
    "\000\030\013\127\033\155\034\154\041\151\042\145\052" +
    "\141\065\125\071\156\075\131\076\163\077\130\001\002" +
    "\000\032\010\uffa9\011\uffa9\012\uffa9\014\uffa9\016\uffa9\017" +
    "\uffa9\020\uffa9\021\uffa9\022\uffa9\023\uffa9\024\237\025\236" +
    "\001\002\000\030\013\127\033\155\034\154\041\151\042" +
    "\145\052\141\065\125\071\156\075\131\076\163\077\130" +
    "\001\002\000\030\013\127\033\155\034\154\041\151\042" +
    "\145\052\141\065\125\071\156\075\131\076\163\077\130" +
    "\001\002\000\042\006\243\007\241\010\uffa7\011\uffa7\012" +
    "\uffa7\014\uffa7\016\uffa7\017\uffa7\020\uffa7\021\uffa7\022\uffa7" +
    "\023\uffa7\024\uffa7\025\uffa7\026\244\027\242\001\002\000" +
    "\030\013\127\033\155\034\154\041\151\042\145\052\141" +
    "\065\125\071\156\075\131\076\163\077\130\001\002\000" +
    "\030\013\127\033\155\034\154\041\151\042\145\052\141" +
    "\065\125\071\156\075\131\076\163\077\130\001\002\000" +
    "\030\013\127\033\155\034\154\041\151\042\145\052\141" +
    "\065\125\071\156\075\131\076\163\077\130\001\002\000" +
    "\030\013\127\033\155\034\154\041\151\042\145\052\141" +
    "\065\125\071\156\075\131\076\163\077\130\001\002\000" +
    "\050\006\uffa2\007\uffa2\010\uffa2\011\uffa2\012\uffa2\014\uffa2" +
    "\016\uffa2\017\uffa2\020\uffa2\021\uffa2\022\uffa2\023\uffa2\024" +
    "\uffa2\025\uffa2\026\uffa2\027\uffa2\030\175\031\174\032\173" +
    "\001\002\000\050\006\uffa4\007\uffa4\010\uffa4\011\uffa4\012" +
    "\uffa4\014\uffa4\016\uffa4\017\uffa4\020\uffa4\021\uffa4\022\uffa4" +
    "\023\uffa4\024\uffa4\025\uffa4\026\uffa4\027\uffa4\030\175\031" +
    "\174\032\173\001\002\000\050\006\uffa1\007\uffa1\010\uffa1" +
    "\011\uffa1\012\uffa1\014\uffa1\016\uffa1\017\uffa1\020\uffa1\021" +
    "\uffa1\022\uffa1\023\uffa1\024\uffa1\025\uffa1\026\uffa1\027\uffa1" +
    "\030\175\031\174\032\173\001\002\000\050\006\uffa3\007" +
    "\uffa3\010\uffa3\011\uffa3\012\uffa3\014\uffa3\016\uffa3\017\uffa3" +
    "\020\uffa3\021\uffa3\022\uffa3\023\uffa3\024\uffa3\025\uffa3\026" +
    "\uffa3\027\uffa3\030\175\031\174\032\173\001\002\000\042" +
    "\006\243\007\241\010\uffa6\011\uffa6\012\uffa6\014\uffa6\016" +
    "\uffa6\017\uffa6\020\uffa6\021\uffa6\022\uffa6\023\uffa6\024\uffa6" +
    "\025\uffa6\026\244\027\242\001\002\000\004\010\253\001" +
    "\002\000\030\013\127\033\155\034\154\041\151\042\145" +
    "\052\141\065\125\071\156\075\131\076\163\077\130\001" +
    "\002\000\012\010\uffb3\011\uffb3\012\uffb3\014\uffb3\001\002" +
    "\000\004\014\256\001\002\000\066\006\uff8d\007\uff8d\010" +
    "\uff8d\011\uff8d\012\uff8d\014\uff8d\016\uff8d\017\uff8d\020\uff8d" +
    "\021\uff8d\022\uff8d\023\uff8d\024\uff8d\025\uff8d\026\uff8d\027" +
    "\uff8d\030\uff8d\031\uff8d\032\uff8d\033\uff8d\034\uff8d\035\uff8d" +
    "\036\uff8d\037\uff8d\040\uff89\061\uff8d\001\002\000\052\004" +
    "\uffc1\005\uffc1\043\uffc1\044\uffc1\045\uffc1\047\uffc1\050\uffc1" +
    "\051\uffc1\053\uffc1\054\uffc1\055\uffc1\056\uffc1\057\uffc1\062" +
    "\uffc1\063\uffc1\067\uffc1\070\uffc1\072\uffc1\073\uffc1\077\uffc1" +
    "\001\002\000\004\012\261\001\002\000\052\004\uffc0\005" +
    "\uffc0\043\uffc0\044\uffc0\045\uffc0\047\uffc0\050\uffc0\051\uffc0" +
    "\053\uffc0\054\uffc0\055\uffc0\056\uffc0\057\uffc0\062\uffc0\063" +
    "\uffc0\067\uffc0\070\uffc0\072\uffc0\073\uffc0\077\uffc0\001\002" +
    "\000\030\013\127\033\155\034\154\041\151\042\145\052" +
    "\141\065\125\071\156\075\131\076\163\077\130\001\002" +
    "\000\004\014\264\001\002\000\030\004\113\043\100\044" +
    "\075\047\073\055\110\056\107\057\105\067\116\070\115" +
    "\073\114\077\266\001\002\000\052\004\uffbf\005\uffbf\043" +
    "\uffbf\044\uffbf\045\uffbf\047\uffbf\050\uffbf\051\uffbf\053\uffbf" +
    "\054\uffbf\055\uffbf\056\uffbf\057\uffbf\062\uffbf\063\uffbf\067" +
    "\uffbf\070\uffbf\072\uffbf\073\uffbf\077\uffbf\001\002\000\010" +
    "\010\267\011\uffc7\015\270\001\002\000\052\004\uffd4\005" +
    "\uffd4\043\uffd4\044\uffd4\045\uffd4\047\uffd4\050\uffd4\051\uffd4" +
    "\053\uffd4\054\uffd4\055\uffd4\056\uffd4\057\uffd4\062\uffd4\063" +
    "\uffd4\067\uffd4\070\uffd4\072\uffd4\073\uffd4\077\uffd4\001\002" +
    "\000\032\013\127\033\155\034\154\041\151\042\145\052" +
    "\141\064\271\065\125\071\156\075\131\076\163\077\130" +
    "\001\002\000\020\045\023\050\021\054\020\062\016\063" +
    "\015\072\012\077\017\001\002\000\004\012\273\001\002" +
    "\000\052\004\uffd3\005\uffd3\043\uffd3\044\uffd3\045\uffd3\047" +
    "\uffd3\050\uffd3\051\uffd3\053\uffd3\054\uffd3\055\uffd3\056\uffd3" +
    "\057\uffd3\062\uffd3\063\uffd3\067\uffd3\070\uffd3\072\uffd3\073" +
    "\uffd3\077\uffd3\001\002\000\004\012\275\001\002\000\052" +
    "\004\uffd2\005\uffd2\043\uffd2\044\uffd2\045\uffd2\047\uffd2\050" +
    "\uffd2\051\uffd2\053\uffd2\054\uffd2\055\uffd2\056\uffd2\057\uffd2" +
    "\062\uffd2\063\uffd2\067\uffd2\070\uffd2\072\uffd2\073\uffd2\077" +
    "\uffd2\001\002\000\050\004\113\005\277\043\100\044\075" +
    "\045\023\047\073\050\021\053\120\054\020\055\110\056" +
    "\107\057\105\062\016\063\015\067\116\070\115\072\012" +
    "\073\114\077\076\001\002\000\052\004\uffd0\005\uffd0\043" +
    "\uffd0\044\uffd0\045\uffd0\047\uffd0\050\uffd0\051\uffd0\053\uffd0" +
    "\054\uffd0\055\uffd0\056\uffd0\057\uffd0\062\uffd0\063\uffd0\067" +
    "\uffd0\070\uffd0\072\uffd0\073\uffd0\077\uffd0\001\002\000\004" +
    "\012\302\001\002\000\010\011\uffc7\012\uffc7\015\uffc7\001" +
    "\002\000\052\004\uffc2\005\uffc2\043\uffc2\044\uffc2\045\uffc2" +
    "\047\uffc2\050\uffc2\051\uffc2\053\uffc2\054\uffc2\055\uffc2\056" +
    "\uffc2\057\uffc2\062\uffc2\063\uffc2\067\uffc2\070\uffc2\072\uffc2" +
    "\073\uffc2\077\uffc2\001\002\000\004\012\304\001\002\000" +
    "\052\004\uffb6\005\uffb6\043\uffb6\044\uffb6\045\uffb6\047\uffb6" +
    "\050\uffb6\051\uffb6\053\uffb6\054\uffb6\055\uffb6\056\uffb6\057" +
    "\uffb6\062\uffb6\063\uffb6\067\uffb6\070\uffb6\072\uffb6\073\uffb6" +
    "\077\uffb6\001\002\000\030\013\127\033\155\034\154\041" +
    "\151\042\145\052\141\065\125\071\156\075\131\076\163" +
    "\077\130\001\002\000\004\014\307\001\002\000\030\004" +
    "\113\043\100\044\075\047\073\055\110\056\107\057\105" +
    "\067\116\070\115\073\114\077\266\001\002\000\052\004" +
    "\uffba\005\uffba\043\uffba\044\uffba\045\uffba\047\uffba\050\uffba" +
    "\051\uffba\053\uffba\054\uffba\055\uffba\056\uffba\057\uffba\062" +
    "\uffba\063\uffba\067\uffba\070\uffba\072\uffba\073\uffba\077\uffba" +
    "\001\002\000\052\004\uffbd\005\uffbd\043\uffbd\044\uffbd\045" +
    "\uffbd\047\uffbd\050\uffbd\051\313\053\uffbd\054\uffbd\055\uffbd" +
    "\056\uffbd\057\uffbd\062\uffbd\063\uffbd\067\uffbd\070\uffbd\072" +
    "\uffbd\073\uffbd\077\uffbd\001\002\000\052\004\uffb9\005\uffb9" +
    "\043\uffb9\044\uffb9\045\uffb9\047\uffb9\050\uffb9\051\uffb9\053" +
    "\uffb9\054\uffb9\055\uffb9\056\uffb9\057\uffb9\062\uffb9\063\uffb9" +
    "\067\uffb9\070\uffb9\072\uffb9\073\uffb9\077\uffb9\001\002\000" +
    "\030\004\113\043\100\044\075\047\073\055\110\056\107" +
    "\057\315\067\116\070\115\073\114\077\266\001\002\000" +
    "\052\004\uffbc\005\uffbc\043\uffbc\044\uffbc\045\uffbc\047\uffbc" +
    "\050\uffbc\051\uffbc\053\uffbc\054\uffbc\055\uffbc\056\uffbc\057" +
    "\uffbc\062\uffbc\063\uffbc\067\uffbc\070\uffbc\072\uffbc\073\uffbc" +
    "\077\uffbc\001\002\000\004\013\316\001\002\000\030\013" +
    "\127\033\155\034\154\041\151\042\145\052\141\065\125" +
    "\071\156\075\131\076\163\077\130\001\002\000\004\014" +
    "\320\001\002\000\030\004\113\043\100\044\075\047\073" +
    "\055\110\056\107\057\105\067\116\070\115\073\114\077" +
    "\266\001\002\000\052\004\uffbb\005\uffbb\043\uffbb\044\uffbb" +
    "\045\uffbb\047\uffbb\050\uffbb\051\uffbb\053\uffbb\054\uffbb\055" +
    "\uffbb\056\uffbb\057\uffbb\062\uffbb\063\uffbb\067\uffbb\070\uffbb" +
    "\072\uffbb\073\uffbb\077\uffbb\001\002\000\004\012\323\001" +
    "\002\000\050\004\uffd9\005\uffd9\043\uffd9\044\uffd9\045\uffd9" +
    "\047\uffd9\050\uffd9\053\uffd9\054\uffd9\055\uffd9\056\uffd9\057" +
    "\uffd9\062\uffd9\063\uffd9\067\uffd9\070\uffd9\072\uffd9\073\uffd9" +
    "\077\uffd9\001\002\000\004\077\301\001\002\000\006\012" +
    "\uffc5\015\uffc5\001\002\000\030\013\127\033\155\034\154" +
    "\041\151\042\145\052\141\065\125\071\156\075\131\076" +
    "\163\077\130\001\002\000\004\014\330\001\002\000\004" +
    "\012\331\001\002\000\052\004\uffc4\005\uffc4\043\uffc4\044" +
    "\uffc4\045\uffc4\047\uffc4\050\uffc4\051\uffc4\053\uffc4\054\uffc4" +
    "\055\uffc4\056\uffc4\057\uffc4\062\uffc4\063\uffc4\067\uffc4\070" +
    "\uffc4\072\uffc4\073\uffc4\077\uffc4\001\002\000\030\013\127" +
    "\033\155\034\154\041\151\042\145\052\141\065\125\071" +
    "\156\075\131\076\163\077\130\001\002\000\004\014\334" +
    "\001\002\000\004\012\335\001\002\000\052\004\uffc3\005" +
    "\uffc3\043\uffc3\044\uffc3\045\uffc3\047\uffc3\050\uffc3\051\uffc3" +
    "\053\uffc3\054\uffc3\055\uffc3\056\uffc3\057\uffc3\062\uffc3\063" +
    "\uffc3\067\uffc3\070\uffc3\072\uffc3\073\uffc3\077\uffc3\001\002" +
    "\000\004\073\337\001\002\000\004\013\340\001\002\000" +
    "\030\013\127\033\155\034\154\041\151\042\145\052\141" +
    "\065\125\071\156\075\131\076\163\077\130\001\002\000" +
    "\004\014\342\001\002\000\052\004\uffbe\005\uffbe\043\uffbe" +
    "\044\uffbe\045\uffbe\047\uffbe\050\uffbe\051\uffbe\053\uffbe\054" +
    "\uffbe\055\uffbe\056\uffbe\057\uffbe\062\uffbe\063\uffbe\067\uffbe" +
    "\070\uffbe\072\uffbe\073\uffbe\077\uffbe\001\002\000\006\066" +
    "\345\077\344\001\002\000\004\013\352\001\002\000\004" +
    "\013\346\001\002\000\030\013\127\033\155\034\154\041" +
    "\151\042\145\052\141\065\125\071\156\075\131\076\163" +
    "\077\130\001\002\000\004\014\350\001\002\000\004\012" +
    "\351\001\002\000\052\004\uffb8\005\uffb8\043\uffb8\044\uffb8" +
    "\045\uffb8\047\uffb8\050\uffb8\051\uffb8\053\uffb8\054\uffb8\055" +
    "\uffb8\056\uffb8\057\uffb8\062\uffb8\063\uffb8\067\uffb8\070\uffb8" +
    "\072\uffb8\073\uffb8\077\uffb8\001\002\000\030\013\127\033" +
    "\155\034\154\041\151\042\145\052\141\065\125\071\156" +
    "\075\131\076\163\077\130\001\002\000\004\014\354\001" +
    "\002\000\004\012\355\001\002\000\052\004\uffd1\005\uffd1" +
    "\043\uffd1\044\uffd1\045\uffd1\047\uffd1\050\uffd1\051\uffd1\053" +
    "\uffd1\054\uffd1\055\uffd1\056\uffd1\057\uffd1\062\uffd1\063\uffd1" +
    "\067\uffd1\070\uffd1\072\uffd1\073\uffd1\077\uffd1\001\002\000" +
    "\024\014\uffdf\045\023\050\021\053\361\054\020\062\016" +
    "\063\015\072\012\077\017\001\002\000\004\077\062\001" +
    "\002\000\004\014\367\001\002\000\020\045\023\050\021" +
    "\054\020\062\016\063\015\072\012\077\017\001\002\000" +
    "\006\011\363\014\uffde\001\002\000\024\014\uffdf\045\023" +
    "\050\021\053\361\054\020\062\016\063\015\072\012\077" +
    "\017\001\002\000\004\014\uffdd\001\002\000\004\077\062" +
    "\001\002\000\006\011\uffe0\014\uffe0\001\002\000\010\004" +
    "\uffe3\012\uffe3\060\370\001\002\000\004\074\371\001\002" +
    "\000\006\004\uffe2\012\uffe2\001\002\000\006\011\uffe1\014" +
    "\uffe1\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\370\000\006\002\004\006\003\001\001\000\012\003" +
    "\007\004\012\005\010\011\006\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\020\062\021\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\003\053\004\012\012\054\013\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\042\010\040" +
    "\001\001\000\004\015\026\001\001\000\010\003\027\004" +
    "\012\014\031\001\001\000\006\016\034\017\032\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\016\034\017\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\042" +
    "\010\044\001\001\000\002\001\001\000\006\003\046\004" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\051\001\001\000\010\003\027\004\012\014\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\003\053\004" +
    "\012\012\054\013\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\024\065\025\066\001" +
    "\001\000\004\027\070\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\003\103\004\012\026" +
    "\105\030\073\033\101\034\071\035\110\036\076\037\116" +
    "\040\102\043\100\001\001\000\002\001\001\000\022\030" +
    "\335\033\101\034\071\035\110\036\076\037\116\040\102" +
    "\043\100\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\016" +
    "\034\017\321\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\033\101\034\302\001\001\000\006\033\101\034" +
    "\277\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\027\275\001\001\000\002\001\001\000\064\031\167\032" +
    "\257\044\147\045\141\046\137\047\136\050\135\051\134" +
    "\052\133\053\132\054\131\055\165\056\164\057\163\060" +
    "\160\061\157\062\156\063\142\064\161\065\152\066\151" +
    "\067\145\070\166\071\125\072\146\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\003\120\004\012\001\001" +
    "\000\006\016\034\017\121\001\001\000\002\001\001\000" +
    "\002\001\001\000\064\031\167\032\143\044\147\045\141" +
    "\046\137\047\136\050\135\051\134\052\133\053\132\054" +
    "\131\055\165\056\164\057\163\060\160\061\157\062\156" +
    "\063\142\064\161\065\152\066\151\067\145\070\166\071" +
    "\125\072\146\001\001\000\002\001\001\000\002\001\001" +
    "\000\060\044\254\045\141\046\137\047\136\050\135\051" +
    "\134\052\133\053\132\054\131\055\165\056\164\057\163" +
    "\060\160\061\157\062\156\063\142\064\161\065\152\066" +
    "\151\067\145\070\166\071\125\072\146\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\061\217\062\156\065" +
    "\152\066\151\067\145\070\166\071\125\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\064\031\167\032\171\044\147\045\141\046\137" +
    "\047\136\050\135\051\134\052\133\053\132\054\131\055" +
    "\165\056\164\057\163\060\160\061\157\062\156\063\142" +
    "\064\161\065\152\066\151\067\145\070\166\071\125\072" +
    "\146\001\001\000\002\001\001\000\032\056\212\057\163" +
    "\060\176\061\157\062\156\064\161\065\152\066\151\067" +
    "\145\070\166\071\125\072\146\001\001\000\032\056\211" +
    "\057\163\060\176\061\157\062\156\064\161\065\152\066" +
    "\151\067\145\070\166\071\125\072\146\001\001\000\032" +
    "\056\175\057\163\060\176\061\157\062\156\064\161\065" +
    "\152\066\151\067\145\070\166\071\125\072\146\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\057\210\060" +
    "\176\061\157\062\156\064\161\065\152\066\151\067\145" +
    "\070\166\071\125\072\146\001\001\000\030\057\201\060" +
    "\176\061\157\062\156\064\161\065\152\066\151\067\145" +
    "\070\166\071\125\072\146\001\001\000\002\001\001\000" +
    "\026\060\176\061\157\062\156\064\207\065\152\066\151" +
    "\067\145\070\166\071\125\072\146\001\001\000\026\060" +
    "\176\061\157\062\156\064\206\065\152\066\151\067\145" +
    "\070\166\071\125\072\146\001\001\000\026\060\176\061" +
    "\157\062\156\064\205\065\152\066\151\067\145\070\166" +
    "\071\125\072\146\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\003\214\004\012\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\060\044" +
    "\251\045\141\046\137\047\136\050\135\051\134\052\133" +
    "\053\132\054\131\055\165\056\164\057\163\060\160\061" +
    "\157\062\156\063\142\064\161\065\152\066\151\067\145" +
    "\070\166\071\125\072\146\001\001\000\050\047\224\050" +
    "\135\051\134\052\133\053\132\054\131\055\165\056\164" +
    "\057\163\060\176\061\157\062\156\064\161\065\152\066" +
    "\151\067\145\070\166\071\125\072\146\001\001\000\002" +
    "\001\001\000\046\050\226\051\134\052\133\053\132\054" +
    "\131\055\165\056\164\057\163\060\176\061\157\062\156" +
    "\064\161\065\152\066\151\067\145\070\166\071\125\072" +
    "\146\001\001\000\002\001\001\000\044\051\230\052\133" +
    "\053\132\054\131\055\165\056\164\057\163\060\176\061" +
    "\157\062\156\064\161\065\152\066\151\067\145\070\166" +
    "\071\125\072\146\001\001\000\002\001\001\000\042\052" +
    "\232\053\132\054\131\055\165\056\164\057\163\060\176" +
    "\061\157\062\156\064\161\065\152\066\151\067\145\070" +
    "\166\071\125\072\146\001\001\000\002\001\001\000\040" +
    "\053\234\054\131\055\165\056\164\057\163\060\176\061" +
    "\157\062\156\064\161\065\152\066\151\067\145\070\166" +
    "\071\125\072\146\001\001\000\002\001\001\000\036\054" +
    "\250\055\165\056\164\057\163\060\176\061\157\062\156" +
    "\064\161\065\152\066\151\067\145\070\166\071\125\072" +
    "\146\001\001\000\036\054\237\055\165\056\164\057\163" +
    "\060\176\061\157\062\156\064\161\065\152\066\151\067" +
    "\145\070\166\071\125\072\146\001\001\000\002\001\001" +
    "\000\034\055\247\056\164\057\163\060\176\061\157\062" +
    "\156\064\161\065\152\066\151\067\145\070\166\071\125" +
    "\072\146\001\001\000\034\055\246\056\164\057\163\060" +
    "\176\061\157\062\156\064\161\065\152\066\151\067\145" +
    "\070\166\071\125\072\146\001\001\000\034\055\245\056" +
    "\164\057\163\060\176\061\157\062\156\064\161\065\152" +
    "\066\151\067\145\070\166\071\125\072\146\001\001\000" +
    "\034\055\244\056\164\057\163\060\176\061\157\062\156" +
    "\064\161\065\152\066\151\067\145\070\166\071\125\072" +
    "\146\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\054\045\253\046\137\047\136\050\135\051\134" +
    "\052\133\053\132\054\131\055\165\056\164\057\163\060" +
    "\176\061\157\062\156\064\161\065\152\066\151\067\145" +
    "\070\166\071\125\072\146\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\060\044\262\045\141\046" +
    "\137\047\136\050\135\051\134\052\133\053\132\054\131" +
    "\055\165\056\164\057\163\060\160\061\157\062\156\063" +
    "\142\064\161\065\152\066\151\067\145\070\166\071\125" +
    "\072\146\001\001\000\002\001\001\000\022\030\264\033" +
    "\101\034\071\035\110\036\076\037\116\040\102\043\100" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\060\044\271\045\141\046\137\047\136\050\135" +
    "\051\134\052\133\053\132\054\131\055\165\056\164\057" +
    "\163\060\160\061\157\062\156\063\142\064\161\065\152" +
    "\066\151\067\145\070\166\071\125\072\146\001\001\000" +
    "\006\003\273\004\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\003" +
    "\103\004\012\026\105\030\073\033\101\034\071\035\110" +
    "\036\076\037\116\040\102\043\100\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\060\044\305\045" +
    "\141\046\137\047\136\050\135\051\134\052\133\053\132" +
    "\054\131\055\165\056\164\057\163\060\160\061\157\062" +
    "\156\063\142\064\161\065\152\066\151\067\145\070\166" +
    "\071\125\072\146\001\001\000\002\001\001\000\022\030" +
    "\307\033\101\034\071\035\110\036\076\037\116\040\102" +
    "\043\100\001\001\000\004\042\310\001\001\000\004\041" +
    "\311\001\001\000\002\001\001\000\022\030\313\033\101" +
    "\034\071\035\110\036\076\037\116\040\102\043\100\001" +
    "\001\000\002\001\001\000\002\001\001\000\060\044\316" +
    "\045\141\046\137\047\136\050\135\051\134\052\133\053" +
    "\132\054\131\055\165\056\164\057\163\060\160\061\157" +
    "\062\156\063\142\064\161\065\152\066\151\067\145\070" +
    "\166\071\125\072\146\001\001\000\002\001\001\000\022" +
    "\030\320\033\101\034\071\035\110\036\076\037\116\040" +
    "\102\043\100\001\001\000\004\042\310\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\033\101\034\324\001" +
    "\001\000\002\001\001\000\060\044\326\045\141\046\137" +
    "\047\136\050\135\051\134\052\133\053\132\054\131\055" +
    "\165\056\164\057\163\060\160\061\157\062\156\063\142" +
    "\064\161\065\152\066\151\067\145\070\166\071\125\072" +
    "\146\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\060\044\332\045\141\046\137\047\136\050" +
    "\135\051\134\052\133\053\132\054\131\055\165\056\164" +
    "\057\163\060\160\061\157\062\156\063\142\064\161\065" +
    "\152\066\151\067\145\070\166\071\125\072\146\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\060\044\340\045\141" +
    "\046\137\047\136\050\135\051\134\052\133\053\132\054" +
    "\131\055\165\056\164\057\163\060\160\061\157\062\156" +
    "\063\142\064\161\065\152\066\151\067\145\070\166\071" +
    "\125\072\146\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\064\031\167\032\346\044\147\045\141\046\137\047\136" +
    "\050\135\051\134\052\133\053\132\054\131\055\165\056" +
    "\164\057\163\060\160\061\157\062\156\063\142\064\161" +
    "\065\152\066\151\067\145\070\166\071\125\072\146\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\064\031\167\032\352\044\147\045\141\046\137\047" +
    "\136\050\135\051\134\052\133\053\132\054\131\055\165" +
    "\056\164\057\163\060\160\061\157\062\156\063\142\064" +
    "\161\065\152\066\151\067\145\070\166\071\125\072\146" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\003\356\004\012\022\361\023\357\001\001" +
    "\000\004\020\371\001\001\000\002\001\001\000\006\003" +
    "\364\004\012\001\001\000\002\001\001\000\012\003\356" +
    "\004\012\022\361\023\363\001\001\000\002\001\001\000" +
    "\004\020\365\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public soottocfg.ast.Absyn.ProgramFile pProgramFile() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (soottocfg.ast.Absyn.ProgramFile) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // Unary_operator ::= _SYMB_30 
            {
              soottocfg.ast.Absyn.Unary_operator RESULT =null;
		 RESULT = new soottocfg.ast.Absyn.Logicalneg(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Unary_operator",56, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // Unary_operator ::= _SYMB_29 
            {
              soottocfg.ast.Absyn.Unary_operator RESULT =null;
		 RESULT = new soottocfg.ast.Absyn.Complement(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Unary_operator",56, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // Unary_operator ::= _SYMB_24 
            {
              soottocfg.ast.Absyn.Unary_operator RESULT =null;
		 RESULT = new soottocfg.ast.Absyn.Negative(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Unary_operator",56, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // Unary_operator ::= _SYMB_23 
            {
              soottocfg.ast.Absyn.Unary_operator RESULT =null;
		 RESULT = new soottocfg.ast.Absyn.Plus(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Unary_operator",56, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // Constant ::= _SYMB_38 
            {
              soottocfg.ast.Absyn.Constant RESULT =null;
		 RESULT = new soottocfg.ast.Absyn.Efalse(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",55, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Constant ::= _SYMB_53 
            {
              soottocfg.ast.Absyn.Constant RESULT =null;
		 RESULT = new soottocfg.ast.Absyn.Etrue(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",55, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Constant ::= _INTEGER_ 
            {
              soottocfg.ast.Absyn.Constant RESULT =null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.Eint(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",55, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Constant ::= _DOUBLE_ 
            {
              soottocfg.ast.Absyn.Constant RESULT =null;
		Double p_1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.Edouble(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",55, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // SpecName ::= _SYMB_49 
            {
              soottocfg.ast.Absyn.SpecName RESULT =null;
		 RESULT = new soottocfg.ast.Absyn.SSnull(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SpecName",54, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // SpecExpNP ::= TupleAcc 
            {
              soottocfg.ast.Absyn.SpecExpNP RESULT =null;
		soottocfg.ast.Absyn.TupleAcc p_1 = (soottocfg.ast.Absyn.TupleAcc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.CNPfld(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SpecExpNP",53, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // SpecExpNP ::= Constant 
            {
              soottocfg.ast.Absyn.SpecExpNP RESULT =null;
		soottocfg.ast.Absyn.Constant p_1 = (soottocfg.ast.Absyn.Constant)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.CNLit(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SpecExpNP",53, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // SpecExp ::= SpecName 
            {
              soottocfg.ast.Absyn.SpecExp RESULT =null;
		soottocfg.ast.Absyn.SpecName p_1 = (soottocfg.ast.Absyn.SpecName)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.Cthis(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SpecExp",52, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // SpecExp ::= SpecExpNP 
            {
              soottocfg.ast.Absyn.SpecExp RESULT =null;
		soottocfg.ast.Absyn.SpecExpNP p_1 = (soottocfg.ast.Absyn.SpecExpNP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.Cnp(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SpecExp",52, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // SpecExp ::= _SYMB_7 Exp _SYMB_8 
            {
              soottocfg.ast.Absyn.SpecExp RESULT =null;
		soottocfg.ast.Absyn.Exp p_2 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new soottocfg.ast.Absyn.Cep(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SpecExp",52, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // TupleAcc ::= SpecExp _SYMB_28 _IDENT_ 
            {
              soottocfg.ast.Absyn.TupleAcc RESULT =null;
		soottocfg.ast.Absyn.SpecExp p_1 = (soottocfg.ast.Absyn.SpecExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.Tplvar(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TupleAcc",51, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Exp13 ::= Exp14 
            {
              soottocfg.ast.Absyn.Exp RESULT =null;
		soottocfg.ast.Absyn.Exp p_1 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp13",50, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Exp1 ::= Exp2 
            {
              soottocfg.ast.Absyn.Exp RESULT =null;
		soottocfg.ast.Absyn.Exp p_1 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp1",49, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Exp16 ::= _SYMB_7 Exp _SYMB_8 
            {
              soottocfg.ast.Absyn.Exp RESULT =null;
		soottocfg.ast.Absyn.Exp p_2 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp16",48, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Exp16 ::= _IDENT_ 
            {
              soottocfg.ast.Absyn.Exp RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.Evar(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp16",48, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Exp15 ::= Exp16 
            {
              soottocfg.ast.Absyn.Exp RESULT =null;
		soottocfg.ast.Absyn.Exp p_1 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp15",47, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Exp15 ::= Constant 
            {
              soottocfg.ast.Absyn.Exp RESULT =null;
		soottocfg.ast.Absyn.Constant p_1 = (soottocfg.ast.Absyn.Constant)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.Econst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp15",47, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Exp15 ::= TupleAcc 
            {
              soottocfg.ast.Absyn.Exp RESULT =null;
		soottocfg.ast.Absyn.TupleAcc p_1 = (soottocfg.ast.Absyn.TupleAcc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.Efld(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp15",47, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Exp15 ::= SpecName 
            {
              soottocfg.ast.Absyn.Exp RESULT =null;
		soottocfg.ast.Absyn.SpecName p_1 = (soottocfg.ast.Absyn.SpecName)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.Especname(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp15",47, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Exp14 ::= Exp15 
            {
              soottocfg.ast.Absyn.Exp RESULT =null;
		soottocfg.ast.Absyn.Exp p_1 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp14",46, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Exp14 ::= Unary_operator Exp15 
            {
              soottocfg.ast.Absyn.Exp RESULT =null;
		soottocfg.ast.Absyn.Unary_operator p_1 = (soottocfg.ast.Absyn.Unary_operator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		soottocfg.ast.Absyn.Exp p_2 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.Epreop(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp14",46, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Exp12 ::= Exp13 
            {
              soottocfg.ast.Absyn.Exp RESULT =null;
		soottocfg.ast.Absyn.Exp p_1 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp12",45, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Exp12 ::= Exp12 _SYMB_27 Exp13 
            {
              soottocfg.ast.Absyn.Exp RESULT =null;
		soottocfg.ast.Absyn.Exp p_1 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		soottocfg.ast.Absyn.Exp p_3 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.Emod(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp12",45, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Exp12 ::= Exp12 _SYMB_26 Exp13 
            {
              soottocfg.ast.Absyn.Exp RESULT =null;
		soottocfg.ast.Absyn.Exp p_1 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		soottocfg.ast.Absyn.Exp p_3 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.Ediv(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp12",45, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Exp12 ::= Exp12 _SYMB_25 Exp13 
            {
              soottocfg.ast.Absyn.Exp RESULT =null;
		soottocfg.ast.Absyn.Exp p_1 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		soottocfg.ast.Absyn.Exp p_3 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.Etimes(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp12",45, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Exp11 ::= Exp12 
            {
              soottocfg.ast.Absyn.Exp RESULT =null;
		soottocfg.ast.Absyn.Exp p_1 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp11",44, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Exp11 ::= Exp11 _SYMB_24 Exp12 
            {
              soottocfg.ast.Absyn.Exp RESULT =null;
		soottocfg.ast.Absyn.Exp p_1 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		soottocfg.ast.Absyn.Exp p_3 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.Eminus(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp11",44, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Exp11 ::= Exp11 _SYMB_23 Exp12 
            {
              soottocfg.ast.Absyn.Exp RESULT =null;
		soottocfg.ast.Absyn.Exp p_1 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		soottocfg.ast.Absyn.Exp p_3 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.Eplus(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp11",44, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Exp10 ::= Exp11 
            {
              soottocfg.ast.Absyn.Exp RESULT =null;
		soottocfg.ast.Absyn.Exp p_1 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp10",43, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Exp10 ::= Exp10 _SYMB_22 Exp11 
            {
              soottocfg.ast.Absyn.Exp RESULT =null;
		soottocfg.ast.Absyn.Exp p_1 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		soottocfg.ast.Absyn.Exp p_3 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.Etrip(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp10",43, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Exp10 ::= Exp10 _SYMB_21 Exp11 
            {
              soottocfg.ast.Absyn.Exp RESULT =null;
		soottocfg.ast.Absyn.Exp p_1 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		soottocfg.ast.Absyn.Exp p_3 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.Eright(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp10",43, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Exp10 ::= Exp10 _SYMB_20 Exp11 
            {
              soottocfg.ast.Absyn.Exp RESULT =null;
		soottocfg.ast.Absyn.Exp p_1 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		soottocfg.ast.Absyn.Exp p_3 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.Eleft(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp10",43, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Exp9 ::= Exp10 
            {
              soottocfg.ast.Absyn.Exp RESULT =null;
		soottocfg.ast.Absyn.Exp p_1 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp9",42, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Exp9 ::= Exp9 _SYMB_19 Exp10 
            {
              soottocfg.ast.Absyn.Exp RESULT =null;
		soottocfg.ast.Absyn.Exp p_1 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		soottocfg.ast.Absyn.Exp p_3 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.Ege(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp9",42, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Exp9 ::= Exp9 _SYMB_18 Exp10 
            {
              soottocfg.ast.Absyn.Exp RESULT =null;
		soottocfg.ast.Absyn.Exp p_1 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		soottocfg.ast.Absyn.Exp p_3 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.Ele(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp9",42, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Exp9 ::= Exp9 _SYMB_3 Exp10 
            {
              soottocfg.ast.Absyn.Exp RESULT =null;
		soottocfg.ast.Absyn.Exp p_1 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		soottocfg.ast.Absyn.Exp p_3 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.Egrthen(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp9",42, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Exp9 ::= Exp9 _SYMB_2 Exp10 
            {
              soottocfg.ast.Absyn.Exp RESULT =null;
		soottocfg.ast.Absyn.Exp p_1 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		soottocfg.ast.Absyn.Exp p_3 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.Elthen(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp9",42, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Exp8 ::= Exp9 
            {
              soottocfg.ast.Absyn.Exp RESULT =null;
		soottocfg.ast.Absyn.Exp p_1 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp8",41, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Exp8 ::= Exp8 _SYMB_17 Exp9 
            {
              soottocfg.ast.Absyn.Exp RESULT =null;
		soottocfg.ast.Absyn.Exp p_1 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		soottocfg.ast.Absyn.Exp p_3 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.Eneq(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp8",41, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Exp8 ::= Exp8 _SYMB_16 Exp9 
            {
              soottocfg.ast.Absyn.Exp RESULT =null;
		soottocfg.ast.Absyn.Exp p_1 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		soottocfg.ast.Absyn.Exp p_3 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.Eeq(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp8",41, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Exp7 ::= Exp8 
            {
              soottocfg.ast.Absyn.Exp RESULT =null;
		soottocfg.ast.Absyn.Exp p_1 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp7",40, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Exp7 ::= Exp7 _SYMB_15 Exp8 
            {
              soottocfg.ast.Absyn.Exp RESULT =null;
		soottocfg.ast.Absyn.Exp p_1 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		soottocfg.ast.Absyn.Exp p_3 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.Ebitand(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp7",40, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Exp6 ::= Exp7 
            {
              soottocfg.ast.Absyn.Exp RESULT =null;
		soottocfg.ast.Absyn.Exp p_1 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp6",39, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Exp6 ::= Exp6 _SYMB_14 Exp7 
            {
              soottocfg.ast.Absyn.Exp RESULT =null;
		soottocfg.ast.Absyn.Exp p_1 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		soottocfg.ast.Absyn.Exp p_3 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.Ebitexor(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp6",39, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Exp5 ::= Exp6 
            {
              soottocfg.ast.Absyn.Exp RESULT =null;
		soottocfg.ast.Absyn.Exp p_1 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp5",38, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Exp5 ::= Exp5 _SYMB_13 Exp6 
            {
              soottocfg.ast.Absyn.Exp RESULT =null;
		soottocfg.ast.Absyn.Exp p_1 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		soottocfg.ast.Absyn.Exp p_3 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.Ebitor(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp5",38, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Exp4 ::= Exp5 
            {
              soottocfg.ast.Absyn.Exp RESULT =null;
		soottocfg.ast.Absyn.Exp p_1 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp4",37, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Exp4 ::= Exp4 _SYMB_12 Exp5 
            {
              soottocfg.ast.Absyn.Exp RESULT =null;
		soottocfg.ast.Absyn.Exp p_1 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		soottocfg.ast.Absyn.Exp p_3 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.Eland(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp4",37, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Exp3 ::= Exp4 
            {
              soottocfg.ast.Absyn.Exp RESULT =null;
		soottocfg.ast.Absyn.Exp p_1 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp3",36, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Exp3 ::= Exp3 _SYMB_11 Exp4 
            {
              soottocfg.ast.Absyn.Exp RESULT =null;
		soottocfg.ast.Absyn.Exp p_1 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		soottocfg.ast.Absyn.Exp p_3 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.Elor(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp3",36, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Exp2 ::= Exp3 
            {
              soottocfg.ast.Absyn.Exp RESULT =null;
		soottocfg.ast.Absyn.Exp p_1 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp2",35, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Exp2 ::= Exp3 _SYMB_10 Exp _SYMB_4 Exp2 
            {
              soottocfg.ast.Absyn.Exp RESULT =null;
		soottocfg.ast.Absyn.Exp p_1 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		soottocfg.ast.Absyn.Exp p_3 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		soottocfg.ast.Absyn.Exp p_5 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.Econdition(p_1,p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp2",35, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Exp ::= Exp1 
            {
              soottocfg.ast.Absyn.Exp RESULT =null;
		soottocfg.ast.Absyn.Exp p_1 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",34, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Exp ::= Exp14 _SYMB_45 Type 
            {
              soottocfg.ast.Absyn.Exp RESULT =null;
		soottocfg.ast.Absyn.Exp p_1 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		soottocfg.ast.Absyn.Type p_3 = (soottocfg.ast.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.Etype(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",34, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // HeapStm ::= _SYMB_42 ListCommaIdentList _SYMB_6 
            {
              soottocfg.ast.Absyn.HeapStm RESULT =null;
		soottocfg.ast.Absyn.ListCommaIdentList p_2 = (soottocfg.ast.Absyn.ListCommaIdentList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new soottocfg.ast.Absyn.HavocSt(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("HeapStm",33, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // HeapStm ::= _SYMB_51 _SYMB_7 ListCommaExpList _SYMB_8 _SYMB_6 
            {
              soottocfg.ast.Absyn.HeapStm RESULT =null;
		soottocfg.ast.Absyn.ListCommaExpList p_3 = (soottocfg.ast.Absyn.ListCommaExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new soottocfg.ast.Absyn.PushSt(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("HeapStm",33, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // HeapStm ::= ListCommaIdentList _SYMB_9 _SYMB_50 _SYMB_7 ListCommaExpList _SYMB_8 _SYMB_6 
            {
              soottocfg.ast.Absyn.HeapStm RESULT =null;
		soottocfg.ast.Absyn.ListCommaIdentList p_1 = (soottocfg.ast.Absyn.ListCommaIdentList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		soottocfg.ast.Absyn.ListCommaExpList p_5 = (soottocfg.ast.Absyn.ListCommaExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new soottocfg.ast.Absyn.PullSt(p_1,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("HeapStm",33, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ListElseif ::= ListElseif Elseif 
            {
              soottocfg.ast.Absyn.ListElseif RESULT =null;
		soottocfg.ast.Absyn.ListElseif p_1 = (soottocfg.ast.Absyn.ListElseif)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		soottocfg.ast.Absyn.Elseif p_2 = (soottocfg.ast.Absyn.Elseif)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListElseif",32, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ListElseif ::= 
            {
              soottocfg.ast.Absyn.ListElseif RESULT =null;
		 RESULT = new soottocfg.ast.Absyn.ListElseif(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListElseif",32, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Elseif ::= _SYMB_37 _SYMB_43 _SYMB_7 Exp _SYMB_8 Stm 
            {
              soottocfg.ast.Absyn.Elseif RESULT =null;
		soottocfg.ast.Absyn.Exp p_4 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		soottocfg.ast.Absyn.Stm p_6 = (soottocfg.ast.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.EIf(p_4,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Elseif",31, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SelectionStm ::= _SYMB_43 _SYMB_7 Exp _SYMB_8 Stm ListElseif _SYMB_37 Stm 
            {
              soottocfg.ast.Absyn.SelectionStm RESULT =null;
		soottocfg.ast.Absyn.Exp p_3 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		soottocfg.ast.Absyn.Stm p_5 = (soottocfg.ast.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		soottocfg.ast.Absyn.ListElseif p_6 = (soottocfg.ast.Absyn.ListElseif)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		soottocfg.ast.Absyn.Stm p_8 = (soottocfg.ast.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.If(p_3,p_5,p_6,p_8); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SelectionStm",30, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SelectionStm ::= _SYMB_43 _SYMB_7 Exp _SYMB_8 Stm ListElseif 
            {
              soottocfg.ast.Absyn.SelectionStm RESULT =null;
		soottocfg.ast.Absyn.Exp p_3 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		soottocfg.ast.Absyn.Stm p_5 = (soottocfg.ast.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		soottocfg.ast.Absyn.ListElseif p_6 = (soottocfg.ast.Absyn.ListElseif)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.Ifone(p_3,p_5,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SelectionStm",30, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // IterStm ::= _SYMB_35 Stm _SYMB_55 _SYMB_7 Exp _SYMB_8 
            {
              soottocfg.ast.Absyn.IterStm RESULT =null;
		soottocfg.ast.Absyn.Stm p_2 = (soottocfg.ast.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		soottocfg.ast.Absyn.Exp p_5 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new soottocfg.ast.Absyn.Do(p_2,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IterStm",29, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // IterStm ::= _SYMB_55 _SYMB_7 Exp _SYMB_8 Stm 
            {
              soottocfg.ast.Absyn.IterStm RESULT =null;
		soottocfg.ast.Absyn.Exp p_3 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		soottocfg.ast.Absyn.Stm p_5 = (soottocfg.ast.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.While(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IterStm",29, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // JumpStm ::= _SYMB_52 ListCommaExpList _SYMB_6 
            {
              soottocfg.ast.Absyn.JumpStm RESULT =null;
		soottocfg.ast.Absyn.ListCommaExpList p_2 = (soottocfg.ast.Absyn.ListCommaExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new soottocfg.ast.Absyn.ReturnExp(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JumpStm",28, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // JumpStm ::= _SYMB_52 _SYMB_6 
            {
              soottocfg.ast.Absyn.JumpStm RESULT =null;
		 RESULT = new soottocfg.ast.Absyn.Return(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JumpStm",28, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // JumpStm ::= _SYMB_41 ListCommaIdentList _SYMB_6 
            {
              soottocfg.ast.Absyn.JumpStm RESULT =null;
		soottocfg.ast.Absyn.ListCommaIdentList p_2 = (soottocfg.ast.Absyn.ListCommaIdentList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new soottocfg.ast.Absyn.Glabel(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JumpStm",28, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // GuardStm ::= _SYMB_32 _SYMB_7 Exp _SYMB_8 _SYMB_6 
            {
              soottocfg.ast.Absyn.GuardStm RESULT =null;
		soottocfg.ast.Absyn.Exp p_3 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new soottocfg.ast.Absyn.Asme(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GuardStm",27, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // GuardStm ::= _SYMB_31 _SYMB_7 Exp _SYMB_8 _SYMB_6 
            {
              soottocfg.ast.Absyn.GuardStm RESULT =null;
		soottocfg.ast.Absyn.Exp p_3 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new soottocfg.ast.Absyn.Asrt(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GuardStm",27, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ListCommaIdentList ::= CommaIdentList _SYMB_5 ListCommaIdentList 
            {
              soottocfg.ast.Absyn.ListCommaIdentList RESULT =null;
		soottocfg.ast.Absyn.CommaIdentList p_1 = (soottocfg.ast.Absyn.CommaIdentList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		soottocfg.ast.Absyn.ListCommaIdentList p_3 = (soottocfg.ast.Absyn.ListCommaIdentList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListCommaIdentList",26, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ListCommaIdentList ::= CommaIdentList 
            {
              soottocfg.ast.Absyn.ListCommaIdentList RESULT =null;
		soottocfg.ast.Absyn.CommaIdentList p_1 = (soottocfg.ast.Absyn.CommaIdentList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.ListCommaIdentList(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListCommaIdentList",26, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CommaIdentList ::= _IDENT_ 
            {
              soottocfg.ast.Absyn.CommaIdentList RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.CommaId(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CommaIdentList",25, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ListCommaExpList ::= CommaExpList _SYMB_5 ListCommaExpList 
            {
              soottocfg.ast.Absyn.ListCommaExpList RESULT =null;
		soottocfg.ast.Absyn.CommaExpList p_1 = (soottocfg.ast.Absyn.CommaExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		soottocfg.ast.Absyn.ListCommaExpList p_3 = (soottocfg.ast.Absyn.ListCommaExpList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListCommaExpList",24, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ListCommaExpList ::= CommaExpList 
            {
              soottocfg.ast.Absyn.ListCommaExpList RESULT =null;
		soottocfg.ast.Absyn.CommaExpList p_1 = (soottocfg.ast.Absyn.CommaExpList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.ListCommaExpList(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListCommaExpList",24, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CommaExpList ::= Exp 
            {
              soottocfg.ast.Absyn.CommaExpList RESULT =null;
		soottocfg.ast.Absyn.Exp p_1 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.CommaExp(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CommaExpList",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Stm ::= HeapStm 
            {
              soottocfg.ast.Absyn.Stm RESULT =null;
		soottocfg.ast.Absyn.HeapStm p_1 = (soottocfg.ast.Absyn.HeapStm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.Hps(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Stm ::= SelectionStm 
            {
              soottocfg.ast.Absyn.Stm RESULT =null;
		soottocfg.ast.Absyn.SelectionStm p_1 = (soottocfg.ast.Absyn.SelectionStm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.Sel(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Stm ::= IterStm 
            {
              soottocfg.ast.Absyn.Stm RESULT =null;
		soottocfg.ast.Absyn.IterStm p_1 = (soottocfg.ast.Absyn.IterStm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.Iter(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Stm ::= JumpStm 
            {
              soottocfg.ast.Absyn.Stm RESULT =null;
		soottocfg.ast.Absyn.JumpStm p_1 = (soottocfg.ast.Absyn.JumpStm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.Jmp(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Stm ::= GuardStm 
            {
              soottocfg.ast.Absyn.Stm RESULT =null;
		soottocfg.ast.Absyn.GuardStm p_1 = (soottocfg.ast.Absyn.GuardStm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.Grd(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Stm ::= _SYMB_0 ListLVarStatement _SYMB_1 
            {
              soottocfg.ast.Absyn.Stm RESULT =null;
		soottocfg.ast.Absyn.ListLVarStatement p_2 = (soottocfg.ast.Absyn.ListLVarStatement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new soottocfg.ast.Absyn.LV(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Stm ::= ListCommaIdentList _SYMB_9 _IDENT_ _SYMB_7 ListCommaExpList _SYMB_8 _SYMB_6 
            {
              soottocfg.ast.Absyn.Stm RESULT =null;
		soottocfg.ast.Absyn.ListCommaIdentList p_1 = (soottocfg.ast.Absyn.ListCommaIdentList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		soottocfg.ast.Absyn.ListCommaExpList p_5 = (soottocfg.ast.Absyn.ListCommaExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new soottocfg.ast.Absyn.Cal(p_1,p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Stm ::= _IDENT_ _SYMB_9 _SYMB_48 Type _SYMB_6 
            {
              soottocfg.ast.Absyn.Stm RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		soottocfg.ast.Absyn.Type p_4 = (soottocfg.ast.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new soottocfg.ast.Absyn.NewSt(p_1,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Stm ::= _IDENT_ _SYMB_9 Exp _SYMB_6 
            {
              soottocfg.ast.Absyn.Stm RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		soottocfg.ast.Absyn.Exp p_3 = (soottocfg.ast.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new soottocfg.ast.Absyn.Asg(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Stm ::= _IDENT_ _SYMB_4 
            {
              soottocfg.ast.Absyn.Stm RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new soottocfg.ast.Absyn.Lbl(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ListLVarStatement ::= ListLVarStatement LVarStatement 
            {
              soottocfg.ast.Absyn.ListLVarStatement RESULT =null;
		soottocfg.ast.Absyn.ListLVarStatement p_1 = (soottocfg.ast.Absyn.ListLVarStatement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		soottocfg.ast.Absyn.LVarStatement p_2 = (soottocfg.ast.Absyn.LVarStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListLVarStatement",21, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ListLVarStatement ::= 
            {
              soottocfg.ast.Absyn.ListLVarStatement RESULT =null;
		 RESULT = new soottocfg.ast.Absyn.ListLVarStatement(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListLVarStatement",21, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // LVarStatement ::= Stm 
            {
              soottocfg.ast.Absyn.LVarStatement RESULT =null;
		soottocfg.ast.Absyn.Stm p_1 = (soottocfg.ast.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.Statem(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LVarStatement",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // LVarStatement ::= _SYMB_39 Type ListVarDecl _SYMB_6 
            {
              soottocfg.ast.Absyn.LVarStatement RESULT =null;
		soottocfg.ast.Absyn.Type p_2 = (soottocfg.ast.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		soottocfg.ast.Absyn.ListVarDecl p_3 = (soottocfg.ast.Absyn.ListVarDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new soottocfg.ast.Absyn.LVarf(p_2,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LVarStatement",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // LVarStatement ::= Type ListVarDecl _SYMB_6 
            {
              soottocfg.ast.Absyn.LVarStatement RESULT =null;
		soottocfg.ast.Absyn.Type p_1 = (soottocfg.ast.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		soottocfg.ast.Absyn.ListVarDecl p_2 = (soottocfg.ast.Absyn.ListVarDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new soottocfg.ast.Absyn.LVar(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LVarStatement",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Body ::= _SYMB_0 ListLVarStatement _SYMB_1 
            {
              soottocfg.ast.Absyn.Body RESULT =null;
		soottocfg.ast.Absyn.ListLVarStatement p_2 = (soottocfg.ast.Absyn.ListLVarStatement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new soottocfg.ast.Absyn.XBody(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Body",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // MethodBody ::= Body 
            {
              soottocfg.ast.Absyn.MethodBody RESULT =null;
		soottocfg.ast.Absyn.Body p_1 = (soottocfg.ast.Absyn.Body)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.MBody(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MethodBody",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // MethodBody ::= _SYMB_6 
            {
              soottocfg.ast.Absyn.MethodBody RESULT =null;
		 RESULT = new soottocfg.ast.Absyn.IBody(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MethodBody",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ListParameter ::= Parameter _SYMB_5 ListParameter 
            {
              soottocfg.ast.Absyn.ListParameter RESULT =null;
		soottocfg.ast.Absyn.Parameter p_1 = (soottocfg.ast.Absyn.Parameter)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		soottocfg.ast.Absyn.ListParameter p_3 = (soottocfg.ast.Absyn.ListParameter)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListParameter",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ListParameter ::= Parameter 
            {
              soottocfg.ast.Absyn.ListParameter RESULT =null;
		soottocfg.ast.Absyn.Parameter p_1 = (soottocfg.ast.Absyn.Parameter)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.ListParameter(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListParameter",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ListParameter ::= 
            {
              soottocfg.ast.Absyn.ListParameter RESULT =null;
		 RESULT = new soottocfg.ast.Absyn.ListParameter(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListParameter",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Parameter ::= _SYMB_39 Type DeclaratorName 
            {
              soottocfg.ast.Absyn.Parameter RESULT =null;
		soottocfg.ast.Absyn.Type p_2 = (soottocfg.ast.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		soottocfg.ast.Absyn.DeclaratorName p_3 = (soottocfg.ast.Absyn.DeclaratorName)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.Pfinal(p_2,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Parameter",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Parameter ::= Type DeclaratorName 
            {
              soottocfg.ast.Absyn.Parameter RESULT =null;
		soottocfg.ast.Absyn.Type p_1 = (soottocfg.ast.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		soottocfg.ast.Absyn.DeclaratorName p_2 = (soottocfg.ast.Absyn.DeclaratorName)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.Param(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Parameter",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // MethodDecl ::= DeclaratorName _SYMB_7 ListParameter _SYMB_8 _SYMB_44 _STRING_ 
            {
              soottocfg.ast.Absyn.MethodDecl RESULT =null;
		soottocfg.ast.Absyn.DeclaratorName p_1 = (soottocfg.ast.Absyn.DeclaratorName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		soottocfg.ast.Absyn.ListParameter p_3 = (soottocfg.ast.Absyn.ListParameter)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		String p_6 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.Mth2(p_1,p_3,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MethodDecl",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // MethodDecl ::= DeclaratorName _SYMB_7 ListParameter _SYMB_8 
            {
              soottocfg.ast.Absyn.MethodDecl RESULT =null;
		soottocfg.ast.Absyn.DeclaratorName p_1 = (soottocfg.ast.Absyn.DeclaratorName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		soottocfg.ast.Absyn.ListParameter p_3 = (soottocfg.ast.Absyn.ListParameter)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new soottocfg.ast.Absyn.Mth(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MethodDecl",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DeclaratorName ::= _IDENT_ 
            {
              soottocfg.ast.Absyn.DeclaratorName RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.DeclName(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclaratorName",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ListVarDecl ::= VarDecl _SYMB_5 ListVarDecl 
            {
              soottocfg.ast.Absyn.ListVarDecl RESULT =null;
		soottocfg.ast.Absyn.VarDecl p_1 = (soottocfg.ast.Absyn.VarDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		soottocfg.ast.Absyn.ListVarDecl p_3 = (soottocfg.ast.Absyn.ListVarDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListVarDecl",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ListVarDecl ::= VarDecl 
            {
              soottocfg.ast.Absyn.ListVarDecl RESULT =null;
		soottocfg.ast.Absyn.VarDecl p_1 = (soottocfg.ast.Absyn.VarDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.ListVarDecl(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListVarDecl",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VarDecl ::= _IDENT_ 
            {
              soottocfg.ast.Absyn.VarDecl RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.VDecl(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecl",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ListFieldDeclaration ::= ListFieldDeclaration FieldDeclaration 
            {
              soottocfg.ast.Absyn.ListFieldDeclaration RESULT =null;
		soottocfg.ast.Absyn.ListFieldDeclaration p_1 = (soottocfg.ast.Absyn.ListFieldDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		soottocfg.ast.Absyn.FieldDeclaration p_2 = (soottocfg.ast.Absyn.FieldDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListFieldDeclaration",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ListFieldDeclaration ::= 
            {
              soottocfg.ast.Absyn.ListFieldDeclaration RESULT =null;
		 RESULT = new soottocfg.ast.Absyn.ListFieldDeclaration(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListFieldDeclaration",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FieldDeclaration ::= Type ListVarDecl _SYMB_6 
            {
              soottocfg.ast.Absyn.FieldDeclaration RESULT =null;
		soottocfg.ast.Absyn.Type p_1 = (soottocfg.ast.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		soottocfg.ast.Absyn.ListVarDecl p_2 = (soottocfg.ast.Absyn.ListVarDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new soottocfg.ast.Absyn.Dvar(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FieldDeclaration",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ListTypes ::= Types _SYMB_5 ListTypes 
            {
              soottocfg.ast.Absyn.ListTypes RESULT =null;
		soottocfg.ast.Absyn.Types p_1 = (soottocfg.ast.Absyn.Types)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		soottocfg.ast.Absyn.ListTypes p_3 = (soottocfg.ast.Absyn.ListTypes)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListTypes",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ListTypes ::= Types 
            {
              soottocfg.ast.Absyn.ListTypes RESULT =null;
		soottocfg.ast.Absyn.Types p_1 = (soottocfg.ast.Absyn.Types)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.ListTypes(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListTypes",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Types ::= Type 
            {
              soottocfg.ast.Absyn.Types RESULT =null;
		soottocfg.ast.Absyn.Type p_1 = (soottocfg.ast.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.TNames(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Types",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TypeList ::= _SYMB_2 ListTypes _SYMB_3 
            {
              soottocfg.ast.Absyn.TypeList RESULT =null;
		soottocfg.ast.Absyn.ListTypes p_2 = (soottocfg.ast.Absyn.ListTypes)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new soottocfg.ast.Absyn.TList2(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeList",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TypeList ::= Type 
            {
              soottocfg.ast.Absyn.TypeList RESULT =null;
		soottocfg.ast.Absyn.Type p_1 = (soottocfg.ast.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.TList1(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeList",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ListTupleEntry ::= TupleEntry _SYMB_5 ListTupleEntry 
            {
              soottocfg.ast.Absyn.ListTupleEntry RESULT =null;
		soottocfg.ast.Absyn.TupleEntry p_1 = (soottocfg.ast.Absyn.TupleEntry)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		soottocfg.ast.Absyn.ListTupleEntry p_3 = (soottocfg.ast.Absyn.ListTupleEntry)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListTupleEntry",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ListTupleEntry ::= TupleEntry 
            {
              soottocfg.ast.Absyn.ListTupleEntry RESULT =null;
		soottocfg.ast.Absyn.TupleEntry p_1 = (soottocfg.ast.Absyn.TupleEntry)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.ListTupleEntry(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListTupleEntry",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TupleEntry ::= _IDENT_ _SYMB_4 Type 
            {
              soottocfg.ast.Absyn.TupleEntry RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		soottocfg.ast.Absyn.Type p_3 = (soottocfg.ast.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.NamedTpl(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TupleEntry",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ListDecl ::= ListDecl Decl 
            {
              soottocfg.ast.Absyn.ListDecl RESULT =null;
		soottocfg.ast.Absyn.ListDecl p_1 = (soottocfg.ast.Absyn.ListDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		soottocfg.ast.Absyn.Decl p_2 = (soottocfg.ast.Absyn.Decl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListDecl",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ListDecl ::= 
            {
              soottocfg.ast.Absyn.ListDecl RESULT =null;
		 RESULT = new soottocfg.ast.Absyn.ListDecl(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListDecl",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Decl ::= TypeList MethodDecl MethodBody 
            {
              soottocfg.ast.Absyn.Decl RESULT =null;
		soottocfg.ast.Absyn.TypeList p_1 = (soottocfg.ast.Absyn.TypeList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		soottocfg.ast.Absyn.MethodDecl p_2 = (soottocfg.ast.Absyn.MethodDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		soottocfg.ast.Absyn.MethodBody p_3 = (soottocfg.ast.Absyn.MethodBody)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.MDecl(p_1,p_2,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Decl ::= _SYMB_34 _IDENT_ _SYMB_2 ListTupleEntry _SYMB_3 _SYMB_0 ListFieldDeclaration _SYMB_1 
            {
              soottocfg.ast.Absyn.Decl RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		soottocfg.ast.Absyn.ListTupleEntry p_4 = (soottocfg.ast.Absyn.ListTupleEntry)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		soottocfg.ast.Absyn.ListFieldDeclaration p_7 = (soottocfg.ast.Absyn.ListFieldDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new soottocfg.ast.Absyn.TDecl2(p_2,p_4,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Decl ::= _SYMB_34 _IDENT_ _SYMB_0 ListFieldDeclaration _SYMB_1 
            {
              soottocfg.ast.Absyn.Decl RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		soottocfg.ast.Absyn.ListFieldDeclaration p_4 = (soottocfg.ast.Absyn.ListFieldDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new soottocfg.ast.Absyn.TDecl(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // BasicType ::= _SYMB_33 
            {
              soottocfg.ast.Absyn.BasicType RESULT =null;
		 RESULT = new soottocfg.ast.Absyn.Tboolean(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BasicType",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // BasicType ::= _SYMB_54 
            {
              soottocfg.ast.Absyn.BasicType RESULT =null;
		 RESULT = new soottocfg.ast.Absyn.TVoid(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BasicType",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // BasicType ::= _SYMB_36 
            {
              soottocfg.ast.Absyn.BasicType RESULT =null;
		 RESULT = new soottocfg.ast.Absyn.Tdouble(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BasicType",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // BasicType ::= _SYMB_40 
            {
              soottocfg.ast.Absyn.BasicType RESULT =null;
		 RESULT = new soottocfg.ast.Absyn.Tfloat(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BasicType",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BasicType ::= _SYMB_47 
            {
              soottocfg.ast.Absyn.BasicType RESULT =null;
		 RESULT = new soottocfg.ast.Absyn.Tlong(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BasicType",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // BasicType ::= _SYMB_46 
            {
              soottocfg.ast.Absyn.BasicType RESULT =null;
		 RESULT = new soottocfg.ast.Absyn.Tint(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BasicType",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Type ::= _IDENT_ 
            {
              soottocfg.ast.Absyn.Type RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.ClassType(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Type ::= BasicType 
            {
              soottocfg.ast.Absyn.Type RESULT =null;
		soottocfg.ast.Absyn.BasicType p_1 = (soottocfg.ast.Absyn.BasicType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.BuiltIn(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ProgramFile ::= ListDecl 
            {
              soottocfg.ast.Absyn.ProgramFile RESULT =null;
		soottocfg.ast.Absyn.ListDecl p_1 = (soottocfg.ast.Absyn.ListDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new soottocfg.ast.Absyn.JhPrg(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProgramFile",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ProgramFile EOF 
            {
              Object RESULT =null;
		soottocfg.ast.Absyn.ProgramFile start_val = (soottocfg.ast.Absyn.ProgramFile)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

