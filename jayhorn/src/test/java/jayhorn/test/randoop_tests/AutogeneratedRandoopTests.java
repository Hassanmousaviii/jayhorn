package jayhorn.test.randoop_tests;

import jayhorn.test.Util;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import soottocfg.randoop.JUnit4TestRunner;
import soottocfg.randoop.Randoop;

import java.io.File;
import java.util.Collection;

/**
 * @author Huascar Sanchez
 */
@RunWith(Parameterized.class)
public class AutogeneratedRandoopTests {
  private static final String PACKAGE_NAME = "jayhorn.test.randoop_tests";

  private File sourceFile;
  private String sourceFilePath;

  public AutogeneratedRandoopTests(File sourceFile, String path){
    this.sourceFile     = sourceFile;
    this.sourceFilePath = path;
  }

  @Parameterized.Parameters(name = "{index}: check ({1})")
  public static Collection<Object[]> data() {

    final File testDirectory = cleanDirectoryAndReturn(
      "randoop_tests", "AutogeneratedRandoopTests:TransformedRandoopTests"
    );

    Randoop.configure(Util.randoopDestinationDirectory())
      .jayhorn()
      .jUnitPackageName(PACKAGE_NAME)
      .onlyTestPublicMembers()
      .silentlyIgnoreBadClassNames()
      .discardOutOfMemoryErrors()
      .permitNonZeroExitStatus()
      .timeLimit(60)
    .execute();

    return Util.getData(testDirectory);
  }

  public static File cleanDirectoryAndReturn(String subdirectoryName, String excludedTest){
    final File testDirectory = Util.currentTestDirectory(subdirectoryName);
    if(testDirectory.exists() && null != testDirectory.listFiles()){
      final File[] files = testDirectory.listFiles();

      assert files != null;
      if(files.length > 1){
        Util.deleteDirectoryContent(testDirectory, excludedTest);
      }
    }

    return testDirectory;
  }

  @Test public void test() throws Exception {
    if(Util.FILES_TO_TEST.contains(sourceFile.getName())) {
      System.out.println("\nRunning test " + sourceFilePath + "\n");
      final File directory = Util.compileJavaFile(sourceFile);
      try {
        final Class<?> compiledClass = Util.loadClass(directory);

        final boolean completed = JUnit4TestRunner.runUnitTests(compiledClass);
        Assert.assertTrue(completed);
      } catch (Throwable throwable) {
        throwable.printStackTrace();
        Assert.fail();
      } finally {
        if (directory != null) {
          directory.deleteOnExit();
        }
      }

    }

  }

}
