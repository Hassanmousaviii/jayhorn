// -*- Java -*- This Cup file was machine-generated by BNFC
package soottocfg.ast;

parser code {:
  public soottocfg.ast.Absyn.ProgramFile pProgramFile() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (soottocfg.ast.Absyn.ProgramFile) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}

:}

nonterminal soottocfg.ast.Absyn.ProgramFile ProgramFile;
nonterminal soottocfg.ast.Absyn.Type Type;
nonterminal soottocfg.ast.Absyn.BasicType BasicType;
nonterminal soottocfg.ast.Absyn.Decl Decl;
nonterminal soottocfg.ast.Absyn.DeclBody DeclBody;
nonterminal soottocfg.ast.Absyn.ListDecl ListDecl;
nonterminal soottocfg.ast.Absyn.TupleEntry TupleEntry;
nonterminal soottocfg.ast.Absyn.ListTupleEntry ListTupleEntry;
nonterminal soottocfg.ast.Absyn.TypeList TypeList;
nonterminal soottocfg.ast.Absyn.Types Types;
nonterminal soottocfg.ast.Absyn.ListTypes ListTypes;
nonterminal soottocfg.ast.Absyn.FieldDeclaration FieldDeclaration;
nonterminal soottocfg.ast.Absyn.ListFieldDeclaration ListFieldDeclaration;
nonterminal soottocfg.ast.Absyn.VarDecl VarDecl;
nonterminal soottocfg.ast.Absyn.ListVarDecl ListVarDecl;
nonterminal soottocfg.ast.Absyn.DeclaratorName DeclaratorName;
nonterminal soottocfg.ast.Absyn.MethodDecl MethodDecl;
nonterminal soottocfg.ast.Absyn.Parameter Parameter;
nonterminal soottocfg.ast.Absyn.ListParameter ListParameter;
nonterminal soottocfg.ast.Absyn.MethodBody MethodBody;
nonterminal soottocfg.ast.Absyn.Body Body;
nonterminal soottocfg.ast.Absyn.LVarStatement LVarStatement;
nonterminal soottocfg.ast.Absyn.ListLVarStatement ListLVarStatement;
nonterminal soottocfg.ast.Absyn.Stm Stm;
nonterminal soottocfg.ast.Absyn.CommaExpList CommaExpList;
nonterminal soottocfg.ast.Absyn.ListCommaExpList ListCommaExpList;
nonterminal soottocfg.ast.Absyn.CommaIdentList CommaIdentList;
nonterminal soottocfg.ast.Absyn.ListCommaIdentList ListCommaIdentList;
nonterminal soottocfg.ast.Absyn.GuardStm GuardStm;
nonterminal soottocfg.ast.Absyn.JumpStm JumpStm;
nonterminal soottocfg.ast.Absyn.IterStm IterStm;
nonterminal soottocfg.ast.Absyn.SelectionStm SelectionStm;
nonterminal soottocfg.ast.Absyn.Elseif Elseif;
nonterminal soottocfg.ast.Absyn.ListElseif ListElseif;
nonterminal soottocfg.ast.Absyn.HeapStm HeapStm;
nonterminal soottocfg.ast.Absyn.Exp Exp;
nonterminal soottocfg.ast.Absyn.Exp Exp2;
nonterminal soottocfg.ast.Absyn.Exp Exp3;
nonterminal soottocfg.ast.Absyn.Exp Exp4;
nonterminal soottocfg.ast.Absyn.Exp Exp5;
nonterminal soottocfg.ast.Absyn.Exp Exp6;
nonterminal soottocfg.ast.Absyn.Exp Exp7;
nonterminal soottocfg.ast.Absyn.Exp Exp8;
nonterminal soottocfg.ast.Absyn.Exp Exp9;
nonterminal soottocfg.ast.Absyn.Exp Exp10;
nonterminal soottocfg.ast.Absyn.Exp Exp11;
nonterminal soottocfg.ast.Absyn.Exp Exp12;
nonterminal soottocfg.ast.Absyn.Exp Exp14;
nonterminal soottocfg.ast.Absyn.Exp Exp15;
nonterminal soottocfg.ast.Absyn.Exp Exp16;
nonterminal soottocfg.ast.Absyn.Exp Exp1;
nonterminal soottocfg.ast.Absyn.Exp Exp13;
nonterminal soottocfg.ast.Absyn.TupleAcc TupleAcc;
nonterminal soottocfg.ast.Absyn.SpecExp SpecExp;
nonterminal soottocfg.ast.Absyn.SpecExpNP SpecExpNP;
nonterminal soottocfg.ast.Absyn.SpecName SpecName;
nonterminal soottocfg.ast.Absyn.Constant Constant;
nonterminal soottocfg.ast.Absyn.Unary_operator Unary_operator;

terminal _SYMB_0;    //   {
terminal _SYMB_1;    //   }
terminal _SYMB_2;    //   <
terminal _SYMB_3;    //   >
terminal _SYMB_4;    //   :
terminal _SYMB_5;    //   ,
terminal _SYMB_6;    //   ;
terminal _SYMB_7;    //   (
terminal _SYMB_8;    //   )
terminal _SYMB_9;    //   =
terminal _SYMB_10;    //   ?
terminal _SYMB_11;    //   ||
terminal _SYMB_12;    //   &&
terminal _SYMB_13;    //   |
terminal _SYMB_14;    //   ^
terminal _SYMB_15;    //   &
terminal _SYMB_16;    //   ==
terminal _SYMB_17;    //   !=
terminal _SYMB_18;    //   <=
terminal _SYMB_19;    //   >=
terminal _SYMB_20;    //   <<
terminal _SYMB_21;    //   >>
terminal _SYMB_22;    //   >>>
terminal _SYMB_23;    //   +
terminal _SYMB_24;    //   -
terminal _SYMB_25;    //   *
terminal _SYMB_26;    //   /
terminal _SYMB_27;    //   %
terminal _SYMB_28;    //   .
terminal _SYMB_29;    //   ~
terminal _SYMB_30;    //   !
terminal _SYMB_31;    //   assert
terminal _SYMB_32;    //   assume
terminal _SYMB_33;    //   boolean
terminal _SYMB_34;    //   class
terminal _SYMB_35;    //   do
terminal _SYMB_36;    //   double
terminal _SYMB_37;    //   else
terminal _SYMB_38;    //   extends
terminal _SYMB_39;    //   false
terminal _SYMB_40;    //   final
terminal _SYMB_41;    //   float
terminal _SYMB_42;    //   goto
terminal _SYMB_43;    //   havoc
terminal _SYMB_44;    //   if
terminal _SYMB_45;    //   implements
terminal _SYMB_46;    //   instanceof
terminal _SYMB_47;    //   int
terminal _SYMB_48;    //   long
terminal _SYMB_49;    //   new
terminal _SYMB_50;    //   null
terminal _SYMB_51;    //   pull
terminal _SYMB_52;    //   push
terminal _SYMB_53;    //   return
terminal _SYMB_54;    //   true
terminal _SYMB_55;    //   unique
terminal _SYMB_56;    //   void
terminal _SYMB_57;    //   while

terminal String _STRING_;

terminal Integer _INTEGER_;
terminal Double _DOUBLE_;
terminal String _IDENT_;



start with ProgramFile;


ProgramFile ::= ListDecl:p_1  {: RESULT = new soottocfg.ast.Absyn.JhPrg(p_1); :} 
;
Type ::= BasicType:p_1  {: RESULT = new soottocfg.ast.Absyn.BuiltIn(p_1); :} 
  | _IDENT_:p_1  {: RESULT = new soottocfg.ast.Absyn.ClassType(p_1); :}
;
BasicType ::= _SYMB_47  {: RESULT = new soottocfg.ast.Absyn.Tint(); :} 
  | _SYMB_48  {: RESULT = new soottocfg.ast.Absyn.Tlong(); :}
  | _SYMB_41  {: RESULT = new soottocfg.ast.Absyn.Tfloat(); :}
  | _SYMB_36  {: RESULT = new soottocfg.ast.Absyn.Tdouble(); :}
  | _SYMB_56  {: RESULT = new soottocfg.ast.Absyn.TVoid(); :}
  | _SYMB_33  {: RESULT = new soottocfg.ast.Absyn.Tboolean(); :}
;
Decl ::= _SYMB_34 _IDENT_:p_2 DeclBody:p_3  {: RESULT = new soottocfg.ast.Absyn.TDecl(p_2,p_3); :} 
  | _SYMB_34 _IDENT_:p_2 _SYMB_38 _IDENT_:p_4 DeclBody:p_5  {: RESULT = new soottocfg.ast.Absyn.TDecl2(p_2,p_4,p_5); :}
  | TypeList:p_1 MethodDecl:p_2 MethodBody:p_3  {: RESULT = new soottocfg.ast.Absyn.MDecl(p_1,p_2,p_3); :}
;
DeclBody ::= _SYMB_0 ListFieldDeclaration:p_2 _SYMB_1  {: RESULT = new soottocfg.ast.Absyn.TDeclBody(p_2); :} 
  | _SYMB_2 ListTupleEntry:p_2 _SYMB_3 _SYMB_0 ListFieldDeclaration:p_5 _SYMB_1  {: RESULT = new soottocfg.ast.Absyn.TDeclBody2(p_2,p_5); :}
;
ListDecl ::=  /* empty */  {: RESULT = new soottocfg.ast.Absyn.ListDecl(); :} 
  | ListDecl:p_1 Decl:p_2  {: RESULT = p_1; p_1.addLast(p_2); :}
;
TupleEntry ::= _IDENT_:p_1 _SYMB_4 Type:p_3  {: RESULT = new soottocfg.ast.Absyn.NamedTpl(p_1,p_3); :} 
  | _IDENT_:p_1 _SYMB_4 _SYMB_55 Type:p_4  {: RESULT = new soottocfg.ast.Absyn.UNamedTpl(p_1,p_4); :}
;
ListTupleEntry ::= TupleEntry:p_1  {: RESULT = new soottocfg.ast.Absyn.ListTupleEntry(); RESULT.addLast(p_1); :} 
  | TupleEntry:p_1 _SYMB_5 ListTupleEntry:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
TypeList ::= Type:p_1  {: RESULT = new soottocfg.ast.Absyn.TList1(p_1); :} 
  | _SYMB_2 ListTypes:p_2 _SYMB_3  {: RESULT = new soottocfg.ast.Absyn.TList2(p_2); :}
;
Types ::= Type:p_1  {: RESULT = new soottocfg.ast.Absyn.TNames(p_1); :} 
;
ListTypes ::= Types:p_1  {: RESULT = new soottocfg.ast.Absyn.ListTypes(); RESULT.addLast(p_1); :} 
  | Types:p_1 _SYMB_5 ListTypes:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
FieldDeclaration ::= Type:p_1 ListVarDecl:p_2 _SYMB_6  {: RESULT = new soottocfg.ast.Absyn.Dvar(p_1,p_2); :} 
  | _SYMB_55 Type:p_2 ListVarDecl:p_3 _SYMB_6  {: RESULT = new soottocfg.ast.Absyn.UDvar(p_2,p_3); :}
;
ListFieldDeclaration ::=  /* empty */  {: RESULT = new soottocfg.ast.Absyn.ListFieldDeclaration(); :} 
  | ListFieldDeclaration:p_1 FieldDeclaration:p_2  {: RESULT = p_1; p_1.addLast(p_2); :}
;
VarDecl ::= _IDENT_:p_1  {: RESULT = new soottocfg.ast.Absyn.VDecl(p_1); :} 
;
ListVarDecl ::= VarDecl:p_1  {: RESULT = new soottocfg.ast.Absyn.ListVarDecl(); RESULT.addLast(p_1); :} 
  | VarDecl:p_1 _SYMB_5 ListVarDecl:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
DeclaratorName ::= _IDENT_:p_1  {: RESULT = new soottocfg.ast.Absyn.DeclName(p_1); :} 
;
MethodDecl ::= DeclaratorName:p_1 _SYMB_7 ListParameter:p_3 _SYMB_8  {: RESULT = new soottocfg.ast.Absyn.Mth(p_1,p_3); :} 
  | DeclaratorName:p_1 _SYMB_7 ListParameter:p_3 _SYMB_8 _SYMB_45 _STRING_:p_6  {: RESULT = new soottocfg.ast.Absyn.Mth2(p_1,p_3,p_6); :}
;
Parameter ::= Type:p_1 DeclaratorName:p_2  {: RESULT = new soottocfg.ast.Absyn.Param(p_1,p_2); :} 
  | _SYMB_40 Type:p_2 DeclaratorName:p_3  {: RESULT = new soottocfg.ast.Absyn.Pfinal(p_2,p_3); :}
;
ListParameter ::=  /* empty */  {: RESULT = new soottocfg.ast.Absyn.ListParameter(); :} 
  | Parameter:p_1  {: RESULT = new soottocfg.ast.Absyn.ListParameter(); RESULT.addLast(p_1); :}
  | Parameter:p_1 _SYMB_5 ListParameter:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
MethodBody ::= _SYMB_6  {: RESULT = new soottocfg.ast.Absyn.IBody(); :} 
  | Body:p_1  {: RESULT = new soottocfg.ast.Absyn.MBody(p_1); :}
;
Body ::= _SYMB_0 ListLVarStatement:p_2 _SYMB_1  {: RESULT = new soottocfg.ast.Absyn.XBody(p_2); :} 
;
LVarStatement ::= Type:p_1 ListVarDecl:p_2 _SYMB_6  {: RESULT = new soottocfg.ast.Absyn.LVar(p_1,p_2); :} 
  | _SYMB_40 Type:p_2 ListVarDecl:p_3 _SYMB_6  {: RESULT = new soottocfg.ast.Absyn.LVarf(p_2,p_3); :}
  | Stm:p_1  {: RESULT = new soottocfg.ast.Absyn.Statem(p_1); :}
;
ListLVarStatement ::=  /* empty */  {: RESULT = new soottocfg.ast.Absyn.ListLVarStatement(); :} 
  | ListLVarStatement:p_1 LVarStatement:p_2  {: RESULT = p_1; p_1.addLast(p_2); :}
;
Stm ::= _IDENT_:p_1 _SYMB_4  {: RESULT = new soottocfg.ast.Absyn.Lbl(p_1); :} 
  | _IDENT_:p_1 _SYMB_9 Exp:p_3 _SYMB_6  {: RESULT = new soottocfg.ast.Absyn.Asg(p_1,p_3); :}
  | _IDENT_:p_1 _SYMB_9 _SYMB_49 Type:p_4 _SYMB_6  {: RESULT = new soottocfg.ast.Absyn.NewSt(p_1,p_4); :}
  | ListCommaIdentList:p_1 _SYMB_9 _IDENT_:p_3 _SYMB_7 ListCommaExpList:p_5 _SYMB_8 _SYMB_6  {: RESULT = new soottocfg.ast.Absyn.Cal(p_1,p_3,p_5); :}
  | _SYMB_0 ListLVarStatement:p_2 _SYMB_1  {: RESULT = new soottocfg.ast.Absyn.LV(p_2); :}
  | GuardStm:p_1  {: RESULT = new soottocfg.ast.Absyn.Grd(p_1); :}
  | JumpStm:p_1  {: RESULT = new soottocfg.ast.Absyn.Jmp(p_1); :}
  | IterStm:p_1  {: RESULT = new soottocfg.ast.Absyn.Iter(p_1); :}
  | SelectionStm:p_1  {: RESULT = new soottocfg.ast.Absyn.Sel(p_1); :}
  | HeapStm:p_1  {: RESULT = new soottocfg.ast.Absyn.Hps(p_1); :}
;
CommaExpList ::= Exp:p_1  {: RESULT = new soottocfg.ast.Absyn.CommaExp(p_1); :} 
;
ListCommaExpList ::= CommaExpList:p_1  {: RESULT = new soottocfg.ast.Absyn.ListCommaExpList(); RESULT.addLast(p_1); :} 
  | CommaExpList:p_1 _SYMB_5 ListCommaExpList:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
CommaIdentList ::= _IDENT_:p_1  {: RESULT = new soottocfg.ast.Absyn.CommaId(p_1); :} 
;
ListCommaIdentList ::= CommaIdentList:p_1  {: RESULT = new soottocfg.ast.Absyn.ListCommaIdentList(); RESULT.addLast(p_1); :} 
  | CommaIdentList:p_1 _SYMB_5 ListCommaIdentList:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
GuardStm ::= _SYMB_31 _SYMB_7 Exp:p_3 _SYMB_8 _SYMB_6  {: RESULT = new soottocfg.ast.Absyn.Asrt(p_3); :} 
  | _SYMB_32 _SYMB_7 Exp:p_3 _SYMB_8 _SYMB_6  {: RESULT = new soottocfg.ast.Absyn.Asme(p_3); :}
;
JumpStm ::= _SYMB_42 ListCommaIdentList:p_2 _SYMB_6  {: RESULT = new soottocfg.ast.Absyn.Glabel(p_2); :} 
  | _SYMB_53 _SYMB_6  {: RESULT = new soottocfg.ast.Absyn.Return(); :}
  | _SYMB_53 ListCommaExpList:p_2 _SYMB_6  {: RESULT = new soottocfg.ast.Absyn.ReturnExp(p_2); :}
;
IterStm ::= _SYMB_57 _SYMB_7 Exp:p_3 _SYMB_8 Stm:p_5  {: RESULT = new soottocfg.ast.Absyn.While(p_3,p_5); :} 
  | _SYMB_35 Stm:p_2 _SYMB_57 _SYMB_7 Exp:p_5 _SYMB_8  {: RESULT = new soottocfg.ast.Absyn.Do(p_2,p_5); :}
;
SelectionStm ::= _SYMB_44 _SYMB_7 Exp:p_3 _SYMB_8 Stm:p_5 ListElseif:p_6  {: RESULT = new soottocfg.ast.Absyn.Ifone(p_3,p_5,p_6); :} 
  | _SYMB_44 _SYMB_7 Exp:p_3 _SYMB_8 Stm:p_5 ListElseif:p_6 _SYMB_37 Stm:p_8  {: RESULT = new soottocfg.ast.Absyn.If(p_3,p_5,p_6,p_8); :}
;
Elseif ::= _SYMB_37 _SYMB_44 _SYMB_7 Exp:p_4 _SYMB_8 Stm:p_6  {: RESULT = new soottocfg.ast.Absyn.EIf(p_4,p_6); :} 
;
ListElseif ::=  /* empty */  {: RESULT = new soottocfg.ast.Absyn.ListElseif(); :} 
  | ListElseif:p_1 Elseif:p_2  {: RESULT = p_1; p_1.addLast(p_2); :}
;
HeapStm ::= ListCommaIdentList:p_1 _SYMB_9 _SYMB_51 _SYMB_7 ListCommaExpList:p_5 _SYMB_8 _SYMB_6  {: RESULT = new soottocfg.ast.Absyn.PullSt(p_1,p_5); :} 
  | _SYMB_52 _SYMB_7 ListCommaExpList:p_3 _SYMB_8 _SYMB_6  {: RESULT = new soottocfg.ast.Absyn.PushSt(p_3); :}
  | _SYMB_43 ListCommaIdentList:p_2 _SYMB_6  {: RESULT = new soottocfg.ast.Absyn.HavocSt(p_2); :}
;
Exp ::= Exp14:p_1 _SYMB_46 Type:p_3  {: RESULT = new soottocfg.ast.Absyn.Etype(p_1,p_3); :} 
  | Exp1:p_1  {: RESULT = p_1; :}
;
Exp2 ::= Exp3:p_1 _SYMB_10 Exp:p_3 _SYMB_4 Exp2:p_5  {: RESULT = new soottocfg.ast.Absyn.Econdition(p_1,p_3,p_5); :} 
  | Exp3:p_1  {: RESULT = p_1; :}
;
Exp3 ::= Exp3:p_1 _SYMB_11 Exp4:p_3  {: RESULT = new soottocfg.ast.Absyn.Elor(p_1,p_3); :} 
  | Exp4:p_1  {: RESULT = p_1; :}
;
Exp4 ::= Exp4:p_1 _SYMB_12 Exp5:p_3  {: RESULT = new soottocfg.ast.Absyn.Eland(p_1,p_3); :} 
  | Exp5:p_1  {: RESULT = p_1; :}
;
Exp5 ::= Exp5:p_1 _SYMB_13 Exp6:p_3  {: RESULT = new soottocfg.ast.Absyn.Ebitor(p_1,p_3); :} 
  | Exp6:p_1  {: RESULT = p_1; :}
;
Exp6 ::= Exp6:p_1 _SYMB_14 Exp7:p_3  {: RESULT = new soottocfg.ast.Absyn.Ebitexor(p_1,p_3); :} 
  | Exp7:p_1  {: RESULT = p_1; :}
;
Exp7 ::= Exp7:p_1 _SYMB_15 Exp8:p_3  {: RESULT = new soottocfg.ast.Absyn.Ebitand(p_1,p_3); :} 
  | Exp8:p_1  {: RESULT = p_1; :}
;
Exp8 ::= Exp8:p_1 _SYMB_16 Exp9:p_3  {: RESULT = new soottocfg.ast.Absyn.Eeq(p_1,p_3); :} 
  | Exp8:p_1 _SYMB_17 Exp9:p_3  {: RESULT = new soottocfg.ast.Absyn.Eneq(p_1,p_3); :}
  | Exp9:p_1  {: RESULT = p_1; :}
;
Exp9 ::= Exp9:p_1 _SYMB_2 Exp10:p_3  {: RESULT = new soottocfg.ast.Absyn.Elthen(p_1,p_3); :} 
  | Exp9:p_1 _SYMB_3 Exp10:p_3  {: RESULT = new soottocfg.ast.Absyn.Egrthen(p_1,p_3); :}
  | Exp9:p_1 _SYMB_18 Exp10:p_3  {: RESULT = new soottocfg.ast.Absyn.Ele(p_1,p_3); :}
  | Exp9:p_1 _SYMB_19 Exp10:p_3  {: RESULT = new soottocfg.ast.Absyn.Ege(p_1,p_3); :}
  | Exp10:p_1  {: RESULT = p_1; :}
;
Exp10 ::= Exp10:p_1 _SYMB_20 Exp11:p_3  {: RESULT = new soottocfg.ast.Absyn.Eleft(p_1,p_3); :} 
  | Exp10:p_1 _SYMB_21 Exp11:p_3  {: RESULT = new soottocfg.ast.Absyn.Eright(p_1,p_3); :}
  | Exp10:p_1 _SYMB_22 Exp11:p_3  {: RESULT = new soottocfg.ast.Absyn.Etrip(p_1,p_3); :}
  | Exp11:p_1  {: RESULT = p_1; :}
;
Exp11 ::= Exp11:p_1 _SYMB_23 Exp12:p_3  {: RESULT = new soottocfg.ast.Absyn.Eplus(p_1,p_3); :} 
  | Exp11:p_1 _SYMB_24 Exp12:p_3  {: RESULT = new soottocfg.ast.Absyn.Eminus(p_1,p_3); :}
  | Exp12:p_1  {: RESULT = p_1; :}
;
Exp12 ::= Exp12:p_1 _SYMB_25 Exp13:p_3  {: RESULT = new soottocfg.ast.Absyn.Etimes(p_1,p_3); :} 
  | Exp12:p_1 _SYMB_26 Exp13:p_3  {: RESULT = new soottocfg.ast.Absyn.Ediv(p_1,p_3); :}
  | Exp12:p_1 _SYMB_27 Exp13:p_3  {: RESULT = new soottocfg.ast.Absyn.Emod(p_1,p_3); :}
  | Exp13:p_1  {: RESULT = p_1; :}
;
Exp14 ::= Unary_operator:p_1 Exp15:p_2  {: RESULT = new soottocfg.ast.Absyn.Epreop(p_1,p_2); :} 
  | Exp15:p_1  {: RESULT = p_1; :}
;
Exp15 ::= SpecName:p_1  {: RESULT = new soottocfg.ast.Absyn.Especname(p_1); :} 
  | TupleAcc:p_1  {: RESULT = new soottocfg.ast.Absyn.Efld(p_1); :}
  | Constant:p_1  {: RESULT = new soottocfg.ast.Absyn.Econst(p_1); :}
  | Exp16:p_1  {: RESULT = p_1; :}
;
Exp16 ::= _IDENT_:p_1  {: RESULT = new soottocfg.ast.Absyn.Evar(p_1); :} 
  | _SYMB_7 Exp:p_2 _SYMB_8  {: RESULT = p_2; :}
;
Exp1 ::= Exp2:p_1  {: RESULT = p_1; :} 
;
Exp13 ::= Exp14:p_1  {: RESULT = p_1; :} 
;
TupleAcc ::= SpecExp:p_1 _SYMB_28 _IDENT_:p_3  {: RESULT = new soottocfg.ast.Absyn.Tplvar(p_1,p_3); :} 
;
SpecExp ::= _SYMB_7 Exp:p_2 _SYMB_8  {: RESULT = new soottocfg.ast.Absyn.Cep(p_2); :} 
  | SpecExpNP:p_1  {: RESULT = new soottocfg.ast.Absyn.Cnp(p_1); :}
  | SpecName:p_1  {: RESULT = new soottocfg.ast.Absyn.Cthis(p_1); :}
;
SpecExpNP ::= Constant:p_1  {: RESULT = new soottocfg.ast.Absyn.CNLit(p_1); :} 
  | TupleAcc:p_1  {: RESULT = new soottocfg.ast.Absyn.CNPfld(p_1); :}
;
SpecName ::= _SYMB_50  {: RESULT = new soottocfg.ast.Absyn.SSnull(); :} 
;
Constant ::= _DOUBLE_:p_1  {: RESULT = new soottocfg.ast.Absyn.Edouble(p_1); :} 
  | _INTEGER_:p_1  {: RESULT = new soottocfg.ast.Absyn.Eint(p_1); :}
  | _SYMB_54  {: RESULT = new soottocfg.ast.Absyn.Etrue(); :}
  | _SYMB_39  {: RESULT = new soottocfg.ast.Absyn.Efalse(); :}
;
Unary_operator ::= _SYMB_23  {: RESULT = new soottocfg.ast.Absyn.Plus(); :} 
  | _SYMB_24  {: RESULT = new soottocfg.ast.Absyn.Negative(); :}
  | _SYMB_29  {: RESULT = new soottocfg.ast.Absyn.Complement(); :}
  | _SYMB_30  {: RESULT = new soottocfg.ast.Absyn.Logicalneg(); :}
;

