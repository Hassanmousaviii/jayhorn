package jayhorn.test.randoop_tests;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

  public static boolean debug = false;

  @Test
  public void test001() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test001"); }


    org.apache.log4j.Logger logger0 = jayhorn.Log.v();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(logger0);

  }

  @Test
  public void test002() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test002"); }


    jayhorn.Options.resetInstance();

  }

  @Test
  public void test003() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test003"); }


    soottocfg.cfg.util.GraphUtil graphUtil0 = new soottocfg.cfg.util.GraphUtil();

  }

  @Test
  public void test004() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test004"); }


    jayhorn.util.SourceLocationUtil sourceLocationUtil0 = new jayhorn.util.SourceLocationUtil();

  }

  @Test
  public void test005() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test005"); }


    soottocfg.randoop.Javac javac0 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac1 = javac0.debug();
    soottocfg.cfg.util.Tree tree2 = new soottocfg.cfg.util.Tree();
    java.util.Set set3 = tree2.getLeaves();
    // The following exception was thrown during execution in test generation
    try {
      java.util.List list4 = javac0.compile((java.util.Collection)set3);
      org.junit.Assert.fail("Expected exception of type soottocfg.randoop.Command.CommandFailedException");
    } catch (soottocfg.randoop.Command.CommandFailedException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("soottocfg.randoop.Command.CommandFailedException")) {
        org.junit.Assert.fail("Expected exception of type soottocfg.randoop.Command.CommandFailedException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);

  }

  @Test
  public void test006() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test006"); }


    // The following exception was thrown during execution in test generation
    try {
      jayhorn.solver.z3.Z3Prover z3Prover0 = new jayhorn.solver.z3.Z3Prover();
      org.junit.Assert.fail("Expected exception of type java.lang.UnsatisfiedLinkError");
    } catch (java.lang.UnsatisfiedLinkError e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsatisfiedLinkError")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsatisfiedLinkError, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test007() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test007"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver1 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array2 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr3 = princessProver1.mkOr(proverExpr_array2);
    jayhorn.solver.princess.PrincessProver princessProver4 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array5 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr6 = princessProver4.mkOr(proverExpr_array5);
    // The following exception was thrown during execution in test generation
    try {
      jayhorn.solver.ProverExpr proverExpr7 = princessProver0.mkEMod(proverExpr3, proverExpr6);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr6);

  }

  @Test
  public void test008() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test008"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    princessProver0.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver3 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array4 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr5 = princessProver3.mkOr(proverExpr_array4);
    jayhorn.solver.ProverExpr proverExpr6 = princessProver0.mkOr(proverExpr_array4);
    jayhorn.solver.BoolType boolType8 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str9 = boolType8.toString();
    jayhorn.solver.ProverType[] proverType_array10 = new jayhorn.solver.ProverType[] { boolType8 };
    jayhorn.solver.princess.PrincessProver princessProver11 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array12 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr13 = princessProver11.mkOr(proverExpr_array12);
    jayhorn.solver.ProverFun proverFun14 = princessProver0.mkDefinedFunction("hi!", proverType_array10, proverExpr13);
    jayhorn.solver.ProverExpr proverExpr16 = princessProver0.mkLiteral((-1));
    jayhorn.solver.princess.PrincessProver princessProver17 = new jayhorn.solver.princess.PrincessProver();
    princessProver17.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver20 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array21 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr22 = princessProver20.mkOr(proverExpr_array21);
    jayhorn.solver.ProverExpr proverExpr23 = princessProver17.mkOr(proverExpr_array21);
    jayhorn.solver.princess.PrincessProver princessProver24 = new jayhorn.solver.princess.PrincessProver();
    princessProver24.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver27 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array28 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr29 = princessProver27.mkOr(proverExpr_array28);
    jayhorn.solver.ProverExpr proverExpr30 = princessProver24.mkOr(proverExpr_array28);
    // The following exception was thrown during execution in test generation
    try {
      jayhorn.solver.ProverExpr proverExpr31 = princessProver0.mkLt(proverExpr23, proverExpr30);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Bool"+ "'", str9.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr30);

  }

  @Test
  public void test009() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test009"); }


    soottocfg.cfg.util.Tree tree0 = new soottocfg.cfg.util.Tree();
    soottocfg.randoop.Javac javac1 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac2 = javac1.debug();
    soottocfg.cfg.util.Tree tree3 = new soottocfg.cfg.util.Tree();
    java.util.Set set4 = tree3.getLeaves();
    soottocfg.randoop.Javac javac5 = javac2.sourcepath((java.util.Collection)set4);
    soottocfg.randoop.Javac javac6 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac7 = javac6.debug();
    soottocfg.cfg.util.Tree tree8 = new soottocfg.cfg.util.Tree();
    java.util.Set set9 = tree8.getLeaves();
    soottocfg.randoop.Javac javac10 = javac7.sourcepath((java.util.Collection)set9);
    // The following exception was thrown during execution in test generation
    try {
      boolean b11 = tree0.isAncestor((java.lang.Object)set4, (java.lang.Object)javac7);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac10);

  }

  @Test
  public void test010() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test010"); }


    jayhorn.util.ConvertToDiamondShape convertToDiamondShape0 = new jayhorn.util.ConvertToDiamondShape();

  }

  @Test
  public void test011() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test011"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    princessProver0.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver3 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver4 = new jayhorn.solver.princess.PrincessProver();
    princessProver4.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver7 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array8 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr9 = princessProver7.mkOr(proverExpr_array8);
    jayhorn.solver.ProverExpr proverExpr10 = princessProver4.mkOr(proverExpr_array8);
    jayhorn.solver.BoolType boolType12 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str13 = boolType12.toString();
    jayhorn.solver.ProverType[] proverType_array14 = new jayhorn.solver.ProverType[] { boolType12 };
    jayhorn.solver.princess.PrincessProver princessProver15 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array16 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr17 = princessProver15.mkOr(proverExpr_array16);
    jayhorn.solver.ProverFun proverFun18 = princessProver4.mkDefinedFunction("hi!", proverType_array14, proverExpr17);
    jayhorn.solver.ProverExpr proverExpr20 = princessProver4.mkLiteral((-1));
    jayhorn.solver.IntType intType21 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr22 = princessProver3.mkAll(proverExpr20, (jayhorn.solver.ProverType)intType21);
    jayhorn.solver.princess.PrincessProver princessProver23 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver24 = new jayhorn.solver.princess.PrincessProver();
    princessProver24.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver27 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array28 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr29 = princessProver27.mkOr(proverExpr_array28);
    jayhorn.solver.ProverExpr proverExpr30 = princessProver24.mkOr(proverExpr_array28);
    jayhorn.solver.BoolType boolType32 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str33 = boolType32.toString();
    jayhorn.solver.ProverType[] proverType_array34 = new jayhorn.solver.ProverType[] { boolType32 };
    jayhorn.solver.princess.PrincessProver princessProver35 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array36 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr37 = princessProver35.mkOr(proverExpr_array36);
    jayhorn.solver.ProverFun proverFun38 = princessProver24.mkDefinedFunction("hi!", proverType_array34, proverExpr37);
    jayhorn.solver.ProverExpr proverExpr40 = princessProver24.mkLiteral((-1));
    jayhorn.solver.IntType intType41 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr42 = princessProver23.mkAll(proverExpr40, (jayhorn.solver.ProverType)intType41);
    // The following exception was thrown during execution in test generation
    try {
      jayhorn.solver.ProverExpr proverExpr43 = princessProver0.mkGeq(proverExpr20, proverExpr42);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Bool"+ "'", str13.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Bool"+ "'", str33.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr42);

  }

  @Test
  public void test012() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test012"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    princessProver0.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver3 = new jayhorn.solver.princess.PrincessProver();
    princessProver3.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver6 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array7 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr8 = princessProver6.mkOr(proverExpr_array7);
    jayhorn.solver.ProverExpr proverExpr9 = princessProver3.mkOr(proverExpr_array7);
    jayhorn.solver.BoolType boolType11 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str12 = boolType11.toString();
    jayhorn.solver.ProverType[] proverType_array13 = new jayhorn.solver.ProverType[] { boolType11 };
    jayhorn.solver.princess.PrincessProver princessProver14 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array15 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr16 = princessProver14.mkOr(proverExpr_array15);
    jayhorn.solver.ProverFun proverFun17 = princessProver3.mkDefinedFunction("hi!", proverType_array13, proverExpr16);
    // The following exception was thrown during execution in test generation
    try {
      jayhorn.solver.ProverExpr proverExpr18 = princessProver0.mkNeg(proverExpr16);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Bool"+ "'", str12.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun17);

  }

  @Test
  public void test013() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test013"); }


    jayhorn.Main main0 = new jayhorn.Main();

  }

  @Test
  public void test014() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test014"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array1 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr2 = princessProver0.mkOr(proverExpr_array1);
    jayhorn.solver.princess.PrincessProver princessProver3 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver4 = new jayhorn.solver.princess.PrincessProver();
    princessProver4.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver7 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array8 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr9 = princessProver7.mkOr(proverExpr_array8);
    jayhorn.solver.ProverExpr proverExpr10 = princessProver4.mkOr(proverExpr_array8);
    jayhorn.solver.BoolType boolType12 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str13 = boolType12.toString();
    jayhorn.solver.ProverType[] proverType_array14 = new jayhorn.solver.ProverType[] { boolType12 };
    jayhorn.solver.princess.PrincessProver princessProver15 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array16 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr17 = princessProver15.mkOr(proverExpr_array16);
    jayhorn.solver.ProverFun proverFun18 = princessProver4.mkDefinedFunction("hi!", proverType_array14, proverExpr17);
    jayhorn.solver.ProverExpr proverExpr20 = princessProver4.mkLiteral((-1));
    jayhorn.solver.IntType intType21 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr22 = princessProver3.mkAll(proverExpr20, (jayhorn.solver.ProverType)intType21);
    jayhorn.solver.princess.PrincessProver princessProver23 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver24 = new jayhorn.solver.princess.PrincessProver();
    princessProver24.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver27 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array28 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr29 = princessProver27.mkOr(proverExpr_array28);
    jayhorn.solver.ProverExpr proverExpr30 = princessProver24.mkOr(proverExpr_array28);
    jayhorn.solver.BoolType boolType32 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str33 = boolType32.toString();
    jayhorn.solver.ProverType[] proverType_array34 = new jayhorn.solver.ProverType[] { boolType32 };
    jayhorn.solver.princess.PrincessProver princessProver35 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array36 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr37 = princessProver35.mkOr(proverExpr_array36);
    jayhorn.solver.ProverFun proverFun38 = princessProver24.mkDefinedFunction("hi!", proverType_array34, proverExpr37);
    jayhorn.solver.ProverExpr proverExpr40 = princessProver24.mkLiteral((-1));
    jayhorn.solver.IntType intType41 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr42 = princessProver23.mkAll(proverExpr40, (jayhorn.solver.ProverType)intType41);
    // The following exception was thrown during execution in test generation
    try {
      jayhorn.solver.ProverExpr proverExpr43 = princessProver0.mkTDiv(proverExpr22, proverExpr42);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Bool"+ "'", str13.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Bool"+ "'", str33.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr42);

  }

  @Test
  public void test015() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test015"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    princessProver0.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver3 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array4 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr5 = princessProver3.mkOr(proverExpr_array4);
    jayhorn.solver.ProverExpr proverExpr6 = princessProver0.mkOr(proverExpr_array4);
    jayhorn.solver.BoolType boolType8 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str9 = boolType8.toString();
    jayhorn.solver.ProverType[] proverType_array10 = new jayhorn.solver.ProverType[] { boolType8 };
    jayhorn.solver.princess.PrincessProver princessProver11 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array12 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr13 = princessProver11.mkOr(proverExpr_array12);
    jayhorn.solver.ProverFun proverFun14 = princessProver0.mkDefinedFunction("hi!", proverType_array10, proverExpr13);
    jayhorn.solver.princess.PrincessProver princessProver15 = new jayhorn.solver.princess.PrincessProver();
    princessProver15.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver18 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array19 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr20 = princessProver18.mkOr(proverExpr_array19);
    jayhorn.solver.ProverExpr proverExpr21 = princessProver15.mkOr(proverExpr_array19);
    jayhorn.solver.BoolType boolType23 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str24 = boolType23.toString();
    jayhorn.solver.ProverType[] proverType_array25 = new jayhorn.solver.ProverType[] { boolType23 };
    jayhorn.solver.princess.PrincessProver princessProver26 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array27 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr28 = princessProver26.mkOr(proverExpr_array27);
    jayhorn.solver.ProverFun proverFun29 = princessProver15.mkDefinedFunction("hi!", proverType_array25, proverExpr28);
    jayhorn.solver.princess.PrincessProver princessProver30 = new jayhorn.solver.princess.PrincessProver();
    princessProver30.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver33 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array34 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr35 = princessProver33.mkOr(proverExpr_array34);
    jayhorn.solver.ProverExpr proverExpr36 = princessProver30.mkOr(proverExpr_array34);
    // The following exception was thrown during execution in test generation
    try {
      jayhorn.solver.ProverExpr proverExpr37 = princessProver0.mkGt(proverExpr28, proverExpr36);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Bool"+ "'", str9.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "Bool"+ "'", str24.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr36);

  }

  @Test
  public void test016() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test016"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    princessProver0.setPartitionNumber((-1));
    jayhorn.Log.debug((java.lang.Object)(-1));

  }

  @Test
  public void test017() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test017"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    princessProver0.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver3 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array4 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr5 = princessProver3.mkOr(proverExpr_array4);
    jayhorn.solver.ProverExpr proverExpr6 = princessProver0.mkOr(proverExpr_array4);
    jayhorn.solver.BoolType boolType8 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str9 = boolType8.toString();
    jayhorn.solver.ProverType[] proverType_array10 = new jayhorn.solver.ProverType[] { boolType8 };
    jayhorn.solver.princess.PrincessProver princessProver11 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array12 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr13 = princessProver11.mkOr(proverExpr_array12);
    jayhorn.solver.ProverFun proverFun14 = princessProver0.mkDefinedFunction("hi!", proverType_array10, proverExpr13);
    jayhorn.solver.princess.PrincessProver princessProver16 = new jayhorn.solver.princess.PrincessProver();
    princessProver16.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver19 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array20 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr21 = princessProver19.mkOr(proverExpr_array20);
    jayhorn.solver.ProverExpr proverExpr22 = princessProver16.mkOr(proverExpr_array20);
    jayhorn.solver.BoolType boolType24 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str25 = boolType24.toString();
    jayhorn.solver.ProverType[] proverType_array26 = new jayhorn.solver.ProverType[] { boolType24 };
    jayhorn.solver.princess.PrincessProver princessProver27 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array28 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr29 = princessProver27.mkOr(proverExpr_array28);
    jayhorn.solver.ProverFun proverFun30 = princessProver16.mkDefinedFunction("hi!", proverType_array26, proverExpr29);
    jayhorn.solver.BoolType boolType31 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str32 = boolType31.toString();
    jayhorn.solver.ProverFun proverFun33 = princessProver0.mkUnintFunction("", proverType_array26, (jayhorn.solver.ProverType)boolType31);
    // The following exception was thrown during execution in test generation
    try {
      princessProver0.pop();
      org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.RuntimeException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Bool"+ "'", str9.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Bool"+ "'", str25.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Bool"+ "'", str32.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun33);

  }

  @Test
  public void test018() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test018"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    princessProver0.setConstructProofs(true);
    jayhorn.solver.ProverResult proverResult4 = princessProver0.getResult(true);
    jayhorn.solver.princess.PrincessProver princessProver5 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array6 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr7 = princessProver5.mkOr(proverExpr_array6);
    // The following exception was thrown during execution in test generation
    try {
      jayhorn.solver.ProverExpr proverExpr8 = princessProver0.mkNeg(proverExpr7);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverResult4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr7);

  }

  @Test
  public void test019() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test019"); }


    jayhorn.util.SsaPrinter ssaPrinter0 = new jayhorn.util.SsaPrinter();

  }

  @Test
  public void test020() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test020"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    princessProver0.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver3 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array4 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr5 = princessProver3.mkOr(proverExpr_array4);
    jayhorn.solver.ProverExpr proverExpr6 = princessProver0.mkOr(proverExpr_array4);
    java.lang.String[] str_array7 = soottocfg.randoop.Strings.generateArrayOfStrings((java.lang.Object[])proverExpr_array4);
    java.lang.String[] str_array8 = soottocfg.randoop.Strings.generateArrayOfStrings((java.lang.Object[])str_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);

  }

  @Test
  public void test021() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test021"); }


    jayhorn.Log.info((java.lang.Object)(short)10);

  }

  @Test
  public void test022() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test022"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver1 = new jayhorn.solver.princess.PrincessProver();
    princessProver1.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver4 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array5 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr6 = princessProver4.mkOr(proverExpr_array5);
    jayhorn.solver.ProverExpr proverExpr7 = princessProver1.mkOr(proverExpr_array5);
    jayhorn.solver.BoolType boolType9 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str10 = boolType9.toString();
    jayhorn.solver.ProverType[] proverType_array11 = new jayhorn.solver.ProverType[] { boolType9 };
    jayhorn.solver.princess.PrincessProver princessProver12 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array13 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr14 = princessProver12.mkOr(proverExpr_array13);
    jayhorn.solver.ProverFun proverFun15 = princessProver1.mkDefinedFunction("hi!", proverType_array11, proverExpr14);
    jayhorn.solver.ProverExpr proverExpr17 = princessProver1.mkLiteral((-1));
    jayhorn.solver.IntType intType18 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr19 = princessProver0.mkAll(proverExpr17, (jayhorn.solver.ProverType)intType18);
    jayhorn.solver.princess.PrincessProver princessProver21 = new jayhorn.solver.princess.PrincessProver();
    princessProver21.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver24 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array25 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr26 = princessProver24.mkOr(proverExpr_array25);
    jayhorn.solver.ProverExpr proverExpr27 = princessProver21.mkOr(proverExpr_array25);
    jayhorn.solver.BoolType boolType29 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str30 = boolType29.toString();
    jayhorn.solver.ProverType[] proverType_array31 = new jayhorn.solver.ProverType[] { boolType29 };
    jayhorn.solver.princess.PrincessProver princessProver32 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array33 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr34 = princessProver32.mkOr(proverExpr_array33);
    jayhorn.solver.ProverFun proverFun35 = princessProver21.mkDefinedFunction("hi!", proverType_array31, proverExpr34);
    jayhorn.solver.princess.PrincessProver princessProver36 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array37 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr38 = princessProver36.mkOr(proverExpr_array37);
    jayhorn.solver.ProverFun proverFun39 = princessProver0.mkDefinedFunction("hi!", proverType_array31, proverExpr38);
    jayhorn.solver.princess.PrincessProver princessProver40 = new jayhorn.solver.princess.PrincessProver();
    princessProver40.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver43 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array44 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr45 = princessProver43.mkOr(proverExpr_array44);
    jayhorn.solver.ProverExpr proverExpr46 = princessProver40.mkOr(proverExpr_array44);
    jayhorn.solver.princess.PrincessProver princessProver47 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array48 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr49 = princessProver47.mkOr(proverExpr_array48);
    jayhorn.solver.BoolType boolType51 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str52 = boolType51.toString();
    jayhorn.solver.ProverExpr proverExpr53 = princessProver47.mkHornVariable("hi!", (jayhorn.solver.ProverType)boolType51);
    jayhorn.solver.ProverExpr proverExpr54 = princessProver40.mkNeg(proverExpr53);
    jayhorn.solver.princess.PrincessProver princessProver55 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver56 = new jayhorn.solver.princess.PrincessProver();
    princessProver56.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver59 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array60 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr61 = princessProver59.mkOr(proverExpr_array60);
    jayhorn.solver.ProverExpr proverExpr62 = princessProver56.mkOr(proverExpr_array60);
    jayhorn.solver.BoolType boolType64 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str65 = boolType64.toString();
    jayhorn.solver.ProverType[] proverType_array66 = new jayhorn.solver.ProverType[] { boolType64 };
    jayhorn.solver.princess.PrincessProver princessProver67 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array68 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr69 = princessProver67.mkOr(proverExpr_array68);
    jayhorn.solver.ProverFun proverFun70 = princessProver56.mkDefinedFunction("hi!", proverType_array66, proverExpr69);
    jayhorn.solver.ProverExpr proverExpr72 = princessProver56.mkLiteral((-1));
    jayhorn.solver.IntType intType73 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr74 = princessProver55.mkAll(proverExpr72, (jayhorn.solver.ProverType)intType73);
    // The following exception was thrown during execution in test generation
    try {
      jayhorn.solver.ProverExpr proverExpr75 = princessProver0.mkPlus(proverExpr54, proverExpr74);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Bool"+ "'", str10.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "Bool"+ "'", str30.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "Bool"+ "'", str52.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "Bool"+ "'", str65.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr74);

  }

  @Test
  public void test023() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test023"); }


    soottocfg.cfg.util.Tree tree0 = new soottocfg.cfg.util.Tree();
    jayhorn.Options options1 = jayhorn.Options.v();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj2 = tree0.getParentOf((java.lang.Object)options1);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(options1);

  }

  @Test
  public void test024() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test024"); }


    jayhorn.solver.princess.PrincessProver princessProver1 = new jayhorn.solver.princess.PrincessProver("Bool");
    jayhorn.solver.princess.PrincessProver princessProver2 = new jayhorn.solver.princess.PrincessProver();
    princessProver2.setPartitionNumber((-1));
    princessProver2.reset();
    jayhorn.solver.princess.PrincessProver princessProver6 = new jayhorn.solver.princess.PrincessProver();
    princessProver6.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver9 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array10 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr11 = princessProver9.mkOr(proverExpr_array10);
    jayhorn.solver.ProverExpr proverExpr12 = princessProver6.mkOr(proverExpr_array10);
    jayhorn.solver.princess.PrincessProver princessProver13 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver14 = new jayhorn.solver.princess.PrincessProver();
    princessProver14.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver17 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array18 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr19 = princessProver17.mkOr(proverExpr_array18);
    jayhorn.solver.ProverExpr proverExpr20 = princessProver14.mkOr(proverExpr_array18);
    jayhorn.solver.BoolType boolType22 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str23 = boolType22.toString();
    jayhorn.solver.ProverType[] proverType_array24 = new jayhorn.solver.ProverType[] { boolType22 };
    jayhorn.solver.princess.PrincessProver princessProver25 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array26 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr27 = princessProver25.mkOr(proverExpr_array26);
    jayhorn.solver.ProverFun proverFun28 = princessProver14.mkDefinedFunction("hi!", proverType_array24, proverExpr27);
    jayhorn.solver.ProverExpr proverExpr30 = princessProver14.mkLiteral((-1));
    jayhorn.solver.IntType intType31 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr32 = princessProver13.mkAll(proverExpr30, (jayhorn.solver.ProverType)intType31);
    jayhorn.solver.ProverExpr proverExpr33 = princessProver2.mkAnd(proverExpr12, proverExpr32);
    jayhorn.solver.princess.PrincessProver princessProver34 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array35 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr36 = princessProver34.mkOr(proverExpr_array35);
    jayhorn.solver.princess.PrincessProver princessProver37 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array38 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr39 = princessProver37.mkOr(proverExpr_array38);
    jayhorn.solver.BoolType boolType41 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str42 = boolType41.toString();
    jayhorn.solver.ProverExpr proverExpr43 = princessProver37.mkHornVariable("hi!", (jayhorn.solver.ProverType)boolType41);
    jayhorn.solver.princess.PrincessProver princessProver44 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver45 = new jayhorn.solver.princess.PrincessProver();
    princessProver45.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver48 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array49 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr50 = princessProver48.mkOr(proverExpr_array49);
    jayhorn.solver.ProverExpr proverExpr51 = princessProver45.mkOr(proverExpr_array49);
    jayhorn.solver.BoolType boolType53 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str54 = boolType53.toString();
    jayhorn.solver.ProverType[] proverType_array55 = new jayhorn.solver.ProverType[] { boolType53 };
    jayhorn.solver.princess.PrincessProver princessProver56 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array57 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr58 = princessProver56.mkOr(proverExpr_array57);
    jayhorn.solver.ProverFun proverFun59 = princessProver45.mkDefinedFunction("hi!", proverType_array55, proverExpr58);
    jayhorn.solver.ProverExpr proverExpr61 = princessProver45.mkLiteral((-1));
    jayhorn.solver.IntType intType62 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr63 = princessProver44.mkAll(proverExpr61, (jayhorn.solver.ProverType)intType62);
    jayhorn.solver.princess.PrincessProver princessProver65 = new jayhorn.solver.princess.PrincessProver();
    princessProver65.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver68 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array69 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr70 = princessProver68.mkOr(proverExpr_array69);
    jayhorn.solver.ProverExpr proverExpr71 = princessProver65.mkOr(proverExpr_array69);
    jayhorn.solver.BoolType boolType73 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str74 = boolType73.toString();
    jayhorn.solver.ProverType[] proverType_array75 = new jayhorn.solver.ProverType[] { boolType73 };
    jayhorn.solver.princess.PrincessProver princessProver76 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array77 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr78 = princessProver76.mkOr(proverExpr_array77);
    jayhorn.solver.ProverFun proverFun79 = princessProver65.mkDefinedFunction("hi!", proverType_array75, proverExpr78);
    jayhorn.solver.princess.PrincessProver princessProver80 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array81 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr82 = princessProver80.mkOr(proverExpr_array81);
    jayhorn.solver.ProverFun proverFun83 = princessProver44.mkDefinedFunction("hi!", proverType_array75, proverExpr82);
    jayhorn.solver.ProverExpr proverExpr84 = princessProver34.mkAnd(proverExpr43, proverExpr82);
    // The following exception was thrown during execution in test generation
    try {
      jayhorn.solver.ProverExpr proverExpr85 = princessProver1.mkGt(proverExpr12, proverExpr82);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Bool"+ "'", str23.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "Bool"+ "'", str42.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "Bool"+ "'", str54.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "Bool"+ "'", str74.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr84);

  }

  @Test
  public void test025() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test025"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    princessProver0.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver3 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array4 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr5 = princessProver3.mkOr(proverExpr_array4);
    jayhorn.solver.ProverExpr proverExpr6 = princessProver0.mkOr(proverExpr_array4);
    jayhorn.solver.princess.PrincessProver princessProver7 = new jayhorn.solver.princess.PrincessProver();
    princessProver7.setPartitionNumber((-1));
    princessProver7.reset();
    jayhorn.solver.princess.PrincessProver princessProver11 = new jayhorn.solver.princess.PrincessProver();
    princessProver11.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver14 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array15 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr16 = princessProver14.mkOr(proverExpr_array15);
    jayhorn.solver.ProverExpr proverExpr17 = princessProver11.mkOr(proverExpr_array15);
    jayhorn.solver.princess.PrincessProver princessProver18 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver19 = new jayhorn.solver.princess.PrincessProver();
    princessProver19.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver22 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array23 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr24 = princessProver22.mkOr(proverExpr_array23);
    jayhorn.solver.ProverExpr proverExpr25 = princessProver19.mkOr(proverExpr_array23);
    jayhorn.solver.BoolType boolType27 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str28 = boolType27.toString();
    jayhorn.solver.ProverType[] proverType_array29 = new jayhorn.solver.ProverType[] { boolType27 };
    jayhorn.solver.princess.PrincessProver princessProver30 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array31 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr32 = princessProver30.mkOr(proverExpr_array31);
    jayhorn.solver.ProverFun proverFun33 = princessProver19.mkDefinedFunction("hi!", proverType_array29, proverExpr32);
    jayhorn.solver.ProverExpr proverExpr35 = princessProver19.mkLiteral((-1));
    jayhorn.solver.IntType intType36 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr37 = princessProver18.mkAll(proverExpr35, (jayhorn.solver.ProverType)intType36);
    jayhorn.solver.ProverExpr proverExpr38 = princessProver7.mkAnd(proverExpr17, proverExpr37);
    jayhorn.solver.princess.PrincessProver princessProver39 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver40 = new jayhorn.solver.princess.PrincessProver();
    princessProver40.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver43 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array44 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr45 = princessProver43.mkOr(proverExpr_array44);
    jayhorn.solver.ProverExpr proverExpr46 = princessProver40.mkOr(proverExpr_array44);
    jayhorn.solver.BoolType boolType48 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str49 = boolType48.toString();
    jayhorn.solver.ProverType[] proverType_array50 = new jayhorn.solver.ProverType[] { boolType48 };
    jayhorn.solver.princess.PrincessProver princessProver51 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array52 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr53 = princessProver51.mkOr(proverExpr_array52);
    jayhorn.solver.ProverFun proverFun54 = princessProver40.mkDefinedFunction("hi!", proverType_array50, proverExpr53);
    jayhorn.solver.ProverExpr proverExpr56 = princessProver40.mkLiteral((-1));
    jayhorn.solver.IntType intType57 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr58 = princessProver39.mkAll(proverExpr56, (jayhorn.solver.ProverType)intType57);
    jayhorn.solver.princess.PrincessProver princessProver60 = new jayhorn.solver.princess.PrincessProver();
    princessProver60.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver63 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array64 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr65 = princessProver63.mkOr(proverExpr_array64);
    jayhorn.solver.ProverExpr proverExpr66 = princessProver60.mkOr(proverExpr_array64);
    jayhorn.solver.BoolType boolType68 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str69 = boolType68.toString();
    jayhorn.solver.ProverType[] proverType_array70 = new jayhorn.solver.ProverType[] { boolType68 };
    jayhorn.solver.princess.PrincessProver princessProver71 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array72 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr73 = princessProver71.mkOr(proverExpr_array72);
    jayhorn.solver.ProverFun proverFun74 = princessProver60.mkDefinedFunction("hi!", proverType_array70, proverExpr73);
    jayhorn.solver.princess.PrincessProver princessProver75 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array76 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr77 = princessProver75.mkOr(proverExpr_array76);
    jayhorn.solver.ProverFun proverFun78 = princessProver39.mkDefinedFunction("hi!", proverType_array70, proverExpr77);
    // The following exception was thrown during execution in test generation
    try {
      jayhorn.solver.ProverExpr proverExpr79 = princessProver0.mkPlus(proverExpr37, proverExpr77);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Bool"+ "'", str28.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "Bool"+ "'", str49.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "Bool"+ "'", str69.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun78);

  }

  @Test
  public void test026() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test026"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver1 = new jayhorn.solver.princess.PrincessProver();
    princessProver1.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver4 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array5 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr6 = princessProver4.mkOr(proverExpr_array5);
    jayhorn.solver.ProverExpr proverExpr7 = princessProver1.mkOr(proverExpr_array5);
    jayhorn.solver.BoolType boolType9 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str10 = boolType9.toString();
    jayhorn.solver.ProverType[] proverType_array11 = new jayhorn.solver.ProverType[] { boolType9 };
    jayhorn.solver.princess.PrincessProver princessProver12 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array13 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr14 = princessProver12.mkOr(proverExpr_array13);
    jayhorn.solver.ProverFun proverFun15 = princessProver1.mkDefinedFunction("hi!", proverType_array11, proverExpr14);
    jayhorn.solver.ProverExpr proverExpr17 = princessProver1.mkLiteral((-1));
    jayhorn.solver.IntType intType18 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr19 = princessProver0.mkAll(proverExpr17, (jayhorn.solver.ProverType)intType18);
    jayhorn.solver.princess.PrincessProver princessProver20 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array21 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr22 = princessProver20.mkOr(proverExpr_array21);
    jayhorn.solver.princess.PrincessProver princessProver23 = new jayhorn.solver.princess.PrincessProver();
    princessProver23.setPartitionNumber((-1));
    princessProver23.reset();
    jayhorn.solver.princess.PrincessProver princessProver27 = new jayhorn.solver.princess.PrincessProver();
    princessProver27.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver30 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array31 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr32 = princessProver30.mkOr(proverExpr_array31);
    jayhorn.solver.ProverExpr proverExpr33 = princessProver27.mkOr(proverExpr_array31);
    jayhorn.solver.BoolType boolType35 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str36 = boolType35.toString();
    jayhorn.solver.ProverType[] proverType_array37 = new jayhorn.solver.ProverType[] { boolType35 };
    jayhorn.solver.princess.PrincessProver princessProver38 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array39 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr40 = princessProver38.mkOr(proverExpr_array39);
    jayhorn.solver.ProverFun proverFun41 = princessProver27.mkDefinedFunction("hi!", proverType_array37, proverExpr40);
    jayhorn.solver.ProverExpr proverExpr43 = princessProver27.mkLiteral((-1));
    jayhorn.solver.ProverExpr proverExpr44 = princessProver23.mkNeg(proverExpr43);
    jayhorn.solver.z3.Z3HornExpr z3HornExpr45 = new jayhorn.solver.z3.Z3HornExpr(proverExpr19, proverExpr_array21, proverExpr44);
    // The following exception was thrown during execution in test generation
    try {
      java.math.BigInteger bigInteger46 = z3HornExpr45.getIntLiteralValue();
      org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.RuntimeException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Bool"+ "'", str10.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Bool"+ "'", str36.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr44);

  }

  @Test
  public void test027() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test027"); }


    soottocfg.cfg.util.Tree tree0 = new soottocfg.cfg.util.Tree();
    java.util.Set set1 = tree0.getLeaves();
    jayhorn.solver.princess.PrincessProverFactory princessProverFactory2 = new jayhorn.solver.princess.PrincessProverFactory();
    jayhorn.solver.Prover prover4 = princessProverFactory2.spawnWithLog("hi!");
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj5 = tree0.getParentOf((java.lang.Object)"hi!");
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(prover4);

  }

  @Test
  public void test028() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test028"); }


    soottocfg.cfg.util.Tree tree0 = new soottocfg.cfg.util.Tree();
    // The following exception was thrown during execution in test generation
    try {
      boolean b3 = tree0.isAncestor((java.lang.Object)(-1.0d), (java.lang.Object)1.0f);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test029() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test029"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    princessProver0.setPartitionNumber((-1));
    princessProver0.reset();
    princessProver0.push();
    jayhorn.solver.princess.PrincessProver princessProver5 = new jayhorn.solver.princess.PrincessProver();
    princessProver5.setPartitionNumber((-1));
    princessProver5.reset();
    jayhorn.solver.princess.PrincessProver princessProver9 = new jayhorn.solver.princess.PrincessProver();
    princessProver9.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver12 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array13 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr14 = princessProver12.mkOr(proverExpr_array13);
    jayhorn.solver.ProverExpr proverExpr15 = princessProver9.mkOr(proverExpr_array13);
    jayhorn.solver.princess.PrincessProver princessProver16 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver17 = new jayhorn.solver.princess.PrincessProver();
    princessProver17.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver20 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array21 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr22 = princessProver20.mkOr(proverExpr_array21);
    jayhorn.solver.ProverExpr proverExpr23 = princessProver17.mkOr(proverExpr_array21);
    jayhorn.solver.BoolType boolType25 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str26 = boolType25.toString();
    jayhorn.solver.ProverType[] proverType_array27 = new jayhorn.solver.ProverType[] { boolType25 };
    jayhorn.solver.princess.PrincessProver princessProver28 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array29 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr30 = princessProver28.mkOr(proverExpr_array29);
    jayhorn.solver.ProverFun proverFun31 = princessProver17.mkDefinedFunction("hi!", proverType_array27, proverExpr30);
    jayhorn.solver.ProverExpr proverExpr33 = princessProver17.mkLiteral((-1));
    jayhorn.solver.IntType intType34 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr35 = princessProver16.mkAll(proverExpr33, (jayhorn.solver.ProverType)intType34);
    jayhorn.solver.ProverExpr proverExpr36 = princessProver5.mkAnd(proverExpr15, proverExpr35);
    jayhorn.solver.princess.PrincessProver princessProver37 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver38 = new jayhorn.solver.princess.PrincessProver();
    princessProver38.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver41 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array42 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr43 = princessProver41.mkOr(proverExpr_array42);
    jayhorn.solver.ProverExpr proverExpr44 = princessProver38.mkOr(proverExpr_array42);
    jayhorn.solver.BoolType boolType46 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str47 = boolType46.toString();
    jayhorn.solver.ProverType[] proverType_array48 = new jayhorn.solver.ProverType[] { boolType46 };
    jayhorn.solver.princess.PrincessProver princessProver49 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array50 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr51 = princessProver49.mkOr(proverExpr_array50);
    jayhorn.solver.ProverFun proverFun52 = princessProver38.mkDefinedFunction("hi!", proverType_array48, proverExpr51);
    jayhorn.solver.ProverExpr proverExpr54 = princessProver38.mkLiteral((-1));
    jayhorn.solver.IntType intType55 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr56 = princessProver37.mkAll(proverExpr54, (jayhorn.solver.ProverType)intType55);
    jayhorn.solver.princess.PrincessProver princessProver58 = new jayhorn.solver.princess.PrincessProver();
    princessProver58.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver61 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array62 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr63 = princessProver61.mkOr(proverExpr_array62);
    jayhorn.solver.ProverExpr proverExpr64 = princessProver58.mkOr(proverExpr_array62);
    jayhorn.solver.BoolType boolType66 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str67 = boolType66.toString();
    jayhorn.solver.ProverType[] proverType_array68 = new jayhorn.solver.ProverType[] { boolType66 };
    jayhorn.solver.princess.PrincessProver princessProver69 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array70 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr71 = princessProver69.mkOr(proverExpr_array70);
    jayhorn.solver.ProverFun proverFun72 = princessProver58.mkDefinedFunction("hi!", proverType_array68, proverExpr71);
    jayhorn.solver.princess.PrincessProver princessProver73 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array74 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr75 = princessProver73.mkOr(proverExpr_array74);
    jayhorn.solver.ProverFun proverFun76 = princessProver37.mkDefinedFunction("hi!", proverType_array68, proverExpr75);
    // The following exception was thrown during execution in test generation
    try {
      jayhorn.solver.ProverExpr proverExpr77 = princessProver0.mkMult(proverExpr36, proverExpr75);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "Bool"+ "'", str26.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "Bool"+ "'", str47.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "Bool"+ "'", str67.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun76);

  }

  @Test
  public void test030() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test030"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array1 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr2 = princessProver0.mkOr(proverExpr_array1);
    jayhorn.solver.BoolType boolType4 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str5 = boolType4.toString();
    jayhorn.solver.ProverExpr proverExpr6 = princessProver0.mkHornVariable("hi!", (jayhorn.solver.ProverType)boolType4);
    jayhorn.solver.princess.PrincessProver princessProver7 = new jayhorn.solver.princess.PrincessProver();
    princessProver7.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver10 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array11 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr12 = princessProver10.mkOr(proverExpr_array11);
    jayhorn.solver.ProverExpr proverExpr13 = princessProver7.mkOr(proverExpr_array11);
    jayhorn.solver.BoolType boolType15 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str16 = boolType15.toString();
    jayhorn.solver.ProverType[] proverType_array17 = new jayhorn.solver.ProverType[] { boolType15 };
    jayhorn.solver.princess.PrincessProver princessProver18 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array19 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr20 = princessProver18.mkOr(proverExpr_array19);
    jayhorn.solver.ProverFun proverFun21 = princessProver7.mkDefinedFunction("hi!", proverType_array17, proverExpr20);
    jayhorn.solver.princess.PrincessProver princessProver22 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array23 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr24 = princessProver22.mkOr(proverExpr_array23);
    jayhorn.solver.BoolType boolType26 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str27 = boolType26.toString();
    jayhorn.solver.ProverExpr proverExpr28 = princessProver22.mkHornVariable("hi!", (jayhorn.solver.ProverType)boolType26);
    // The following exception was thrown during execution in test generation
    try {
      jayhorn.solver.ProverExpr proverExpr29 = princessProver0.mkLt(proverExpr20, proverExpr28);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Bool"+ "'", str5.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Bool"+ "'", str16.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "Bool"+ "'", str27.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr28);

  }

  @Test
  public void test031() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test031"); }


    soottocfg.randoop.Javac javac0 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac1 = javac0.debug();
    soottocfg.cfg.util.Tree tree2 = new soottocfg.cfg.util.Tree();
    java.util.Set set3 = tree2.getLeaves();
    soottocfg.randoop.Javac javac4 = javac1.sourcepath((java.util.Collection)set3);
    boolean b5 = javac1.inDebugMode();
    boolean b6 = javac1.inDebugMode();
    soottocfg.randoop.Classpath classpath7 = new soottocfg.randoop.Classpath();
    soottocfg.randoop.Javac javac8 = javac1.classpath(classpath7);
    java.io.File[] file_array9 = new java.io.File[] {  };
    soottocfg.randoop.Classpath classpath10 = soottocfg.randoop.Classpath.of(file_array9);
    classpath7.addAll(file_array9);
    soottocfg.randoop.Classpath classpath12 = soottocfg.randoop.Classpath.of(file_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(file_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(classpath10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(classpath12);

  }

  @Test
  public void test032() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test032"); }


    jayhorn.solver.ArrayType arrayType1 = new jayhorn.solver.ArrayType(1);

  }

  @Test
  public void test033() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test033"); }


    jayhorn.solver.ArrayType arrayType1 = new jayhorn.solver.ArrayType(10);
    int i2 = arrayType1.arity;
    jayhorn.solver.princess.PrincessProver princessProver3 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array4 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr5 = princessProver3.mkOr(proverExpr_array4);
    jayhorn.solver.princess.PrincessProver princessProver6 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array7 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr8 = princessProver6.mkOr(proverExpr_array7);
    jayhorn.solver.BoolType boolType10 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str11 = boolType10.toString();
    jayhorn.solver.ProverExpr proverExpr12 = princessProver6.mkHornVariable("hi!", (jayhorn.solver.ProverType)boolType10);
    jayhorn.solver.princess.PrincessProver princessProver13 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver14 = new jayhorn.solver.princess.PrincessProver();
    princessProver14.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver17 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array18 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr19 = princessProver17.mkOr(proverExpr_array18);
    jayhorn.solver.ProverExpr proverExpr20 = princessProver14.mkOr(proverExpr_array18);
    jayhorn.solver.BoolType boolType22 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str23 = boolType22.toString();
    jayhorn.solver.ProverType[] proverType_array24 = new jayhorn.solver.ProverType[] { boolType22 };
    jayhorn.solver.princess.PrincessProver princessProver25 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array26 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr27 = princessProver25.mkOr(proverExpr_array26);
    jayhorn.solver.ProverFun proverFun28 = princessProver14.mkDefinedFunction("hi!", proverType_array24, proverExpr27);
    jayhorn.solver.ProverExpr proverExpr30 = princessProver14.mkLiteral((-1));
    jayhorn.solver.IntType intType31 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr32 = princessProver13.mkAll(proverExpr30, (jayhorn.solver.ProverType)intType31);
    jayhorn.solver.princess.PrincessProver princessProver34 = new jayhorn.solver.princess.PrincessProver();
    princessProver34.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver37 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array38 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr39 = princessProver37.mkOr(proverExpr_array38);
    jayhorn.solver.ProverExpr proverExpr40 = princessProver34.mkOr(proverExpr_array38);
    jayhorn.solver.BoolType boolType42 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str43 = boolType42.toString();
    jayhorn.solver.ProverType[] proverType_array44 = new jayhorn.solver.ProverType[] { boolType42 };
    jayhorn.solver.princess.PrincessProver princessProver45 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array46 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr47 = princessProver45.mkOr(proverExpr_array46);
    jayhorn.solver.ProverFun proverFun48 = princessProver34.mkDefinedFunction("hi!", proverType_array44, proverExpr47);
    jayhorn.solver.princess.PrincessProver princessProver49 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array50 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr51 = princessProver49.mkOr(proverExpr_array50);
    jayhorn.solver.ProverFun proverFun52 = princessProver13.mkDefinedFunction("hi!", proverType_array44, proverExpr51);
    jayhorn.solver.ProverExpr proverExpr53 = princessProver3.mkAnd(proverExpr12, proverExpr51);
    princessProver3.reset();
    jayhorn.solver.IntType intType56 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr57 = princessProver3.mkVariable("hi!", (jayhorn.solver.ProverType)intType56);
    boolean b58 = arrayType1.equals((java.lang.Object)proverExpr57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Bool"+ "'", str11.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Bool"+ "'", str23.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "Bool"+ "'", str43.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);

  }

  @Test
  public void test034() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test034"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    princessProver0.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver3 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array4 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr5 = princessProver3.mkOr(proverExpr_array4);
    jayhorn.solver.ProverExpr proverExpr6 = princessProver0.mkOr(proverExpr_array4);
    jayhorn.solver.princess.PrincessProver princessProver7 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array8 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr9 = princessProver7.mkOr(proverExpr_array8);
    jayhorn.solver.BoolType boolType11 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str12 = boolType11.toString();
    jayhorn.solver.ProverExpr proverExpr13 = princessProver7.mkHornVariable("hi!", (jayhorn.solver.ProverType)boolType11);
    jayhorn.solver.ProverExpr proverExpr14 = princessProver0.mkNeg(proverExpr13);
    jayhorn.solver.ProverResult proverResult15 = princessProver0.stop();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Bool"+ "'", str12.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverResult15);

  }

  @Test
  public void test035() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test035"); }


    soottocfg.cfg.util.Tree tree0 = new soottocfg.cfg.util.Tree();
    java.util.Set set1 = tree0.getLeaves();
    jayhorn.solver.princess.PrincessProver princessProver2 = new jayhorn.solver.princess.PrincessProver();
    princessProver2.setPartitionNumber((-1));
    princessProver2.reset();
    // The following exception was thrown during execution in test generation
    try {
      java.util.List list6 = tree0.getChildrenOf((java.lang.Object)princessProver2);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);

  }

  @Test
  public void test036() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test036"); }


    soottocfg.randoop.Classpath classpath0 = soottocfg.randoop.Classpath.empty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(classpath0);

  }

  @Test
  public void test037() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test037"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    princessProver0.setPartitionNumber((-1));
    princessProver0.reset();
    jayhorn.solver.princess.PrincessProver princessProver5 = new jayhorn.solver.princess.PrincessProver();
    princessProver5.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver8 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array9 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr10 = princessProver8.mkOr(proverExpr_array9);
    jayhorn.solver.ProverExpr proverExpr11 = princessProver5.mkOr(proverExpr_array9);
    jayhorn.solver.BoolType boolType13 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str14 = boolType13.toString();
    jayhorn.solver.ProverType[] proverType_array15 = new jayhorn.solver.ProverType[] { boolType13 };
    jayhorn.solver.princess.PrincessProver princessProver16 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array17 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr18 = princessProver16.mkOr(proverExpr_array17);
    jayhorn.solver.ProverFun proverFun19 = princessProver5.mkDefinedFunction("hi!", proverType_array15, proverExpr18);
    jayhorn.solver.princess.PrincessProver princessProver20 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverType proverType21 = princessProver20.getBooleanType();
    jayhorn.solver.ProverFun proverFun22 = princessProver0.mkUnintFunction("Bool", proverType_array15, proverType21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Bool"+ "'", str14.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun22);

  }

  @Test
  public void test038() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test038"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver1 = new jayhorn.solver.princess.PrincessProver();
    princessProver1.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver4 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array5 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr6 = princessProver4.mkOr(proverExpr_array5);
    jayhorn.solver.ProverExpr proverExpr7 = princessProver1.mkOr(proverExpr_array5);
    jayhorn.solver.BoolType boolType9 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str10 = boolType9.toString();
    jayhorn.solver.ProverType[] proverType_array11 = new jayhorn.solver.ProverType[] { boolType9 };
    jayhorn.solver.princess.PrincessProver princessProver12 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array13 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr14 = princessProver12.mkOr(proverExpr_array13);
    jayhorn.solver.ProverFun proverFun15 = princessProver1.mkDefinedFunction("hi!", proverType_array11, proverExpr14);
    jayhorn.solver.ProverExpr proverExpr17 = princessProver1.mkLiteral((-1));
    jayhorn.solver.IntType intType18 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr19 = princessProver0.mkAll(proverExpr17, (jayhorn.solver.ProverType)intType18);
    jayhorn.solver.princess.PrincessProver princessProver20 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array21 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr22 = princessProver20.mkOr(proverExpr_array21);
    jayhorn.solver.princess.PrincessProver princessProver23 = new jayhorn.solver.princess.PrincessProver();
    princessProver23.setPartitionNumber((-1));
    princessProver23.reset();
    jayhorn.solver.princess.PrincessProver princessProver27 = new jayhorn.solver.princess.PrincessProver();
    princessProver27.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver30 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array31 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr32 = princessProver30.mkOr(proverExpr_array31);
    jayhorn.solver.ProverExpr proverExpr33 = princessProver27.mkOr(proverExpr_array31);
    jayhorn.solver.BoolType boolType35 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str36 = boolType35.toString();
    jayhorn.solver.ProverType[] proverType_array37 = new jayhorn.solver.ProverType[] { boolType35 };
    jayhorn.solver.princess.PrincessProver princessProver38 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array39 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr40 = princessProver38.mkOr(proverExpr_array39);
    jayhorn.solver.ProverFun proverFun41 = princessProver27.mkDefinedFunction("hi!", proverType_array37, proverExpr40);
    jayhorn.solver.ProverExpr proverExpr43 = princessProver27.mkLiteral((-1));
    jayhorn.solver.ProverExpr proverExpr44 = princessProver23.mkNeg(proverExpr43);
    jayhorn.solver.z3.Z3HornExpr z3HornExpr45 = new jayhorn.solver.z3.Z3HornExpr(proverExpr19, proverExpr_array21, proverExpr44);
    jayhorn.solver.ProverExpr proverExpr46 = z3HornExpr45.getHead();
    // The following exception was thrown during execution in test generation
    try {
      jayhorn.solver.ProverFun proverFun47 = z3HornExpr45.getHeadFun();
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Bool"+ "'", str10.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Bool"+ "'", str36.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr46);

  }

  @Test
  public void test039() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test039"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    princessProver0.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver3 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array4 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr5 = princessProver3.mkOr(proverExpr_array4);
    jayhorn.solver.ProverExpr proverExpr6 = princessProver0.mkOr(proverExpr_array4);
    jayhorn.solver.princess.PrincessProver princessProver7 = new jayhorn.solver.princess.PrincessProver();
    princessProver7.setPartitionNumber((-1));
    princessProver7.reset();
    jayhorn.solver.princess.PrincessProver princessProver11 = new jayhorn.solver.princess.PrincessProver();
    princessProver11.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver14 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array15 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr16 = princessProver14.mkOr(proverExpr_array15);
    jayhorn.solver.ProverExpr proverExpr17 = princessProver11.mkOr(proverExpr_array15);
    jayhorn.solver.princess.PrincessProver princessProver18 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver19 = new jayhorn.solver.princess.PrincessProver();
    princessProver19.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver22 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array23 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr24 = princessProver22.mkOr(proverExpr_array23);
    jayhorn.solver.ProverExpr proverExpr25 = princessProver19.mkOr(proverExpr_array23);
    jayhorn.solver.BoolType boolType27 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str28 = boolType27.toString();
    jayhorn.solver.ProverType[] proverType_array29 = new jayhorn.solver.ProverType[] { boolType27 };
    jayhorn.solver.princess.PrincessProver princessProver30 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array31 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr32 = princessProver30.mkOr(proverExpr_array31);
    jayhorn.solver.ProverFun proverFun33 = princessProver19.mkDefinedFunction("hi!", proverType_array29, proverExpr32);
    jayhorn.solver.ProverExpr proverExpr35 = princessProver19.mkLiteral((-1));
    jayhorn.solver.IntType intType36 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr37 = princessProver18.mkAll(proverExpr35, (jayhorn.solver.ProverType)intType36);
    jayhorn.solver.ProverExpr proverExpr38 = princessProver7.mkAnd(proverExpr17, proverExpr37);
    jayhorn.solver.princess.PrincessProver princessProver39 = new jayhorn.solver.princess.PrincessProver();
    princessProver39.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver42 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array43 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr44 = princessProver42.mkOr(proverExpr_array43);
    jayhorn.solver.ProverExpr proverExpr45 = princessProver39.mkOr(proverExpr_array43);
    java.lang.String[] str_array46 = soottocfg.randoop.Strings.generateArrayOfStrings((java.lang.Object[])proverExpr_array43);
    jayhorn.solver.princess.PrincessProver princessProver47 = new jayhorn.solver.princess.PrincessProver();
    princessProver47.setPartitionNumber((-1));
    princessProver47.reset();
    jayhorn.solver.princess.PrincessProver princessProver51 = new jayhorn.solver.princess.PrincessProver();
    princessProver51.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver54 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array55 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr56 = princessProver54.mkOr(proverExpr_array55);
    jayhorn.solver.ProverExpr proverExpr57 = princessProver51.mkOr(proverExpr_array55);
    jayhorn.solver.princess.PrincessProver princessProver58 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver59 = new jayhorn.solver.princess.PrincessProver();
    princessProver59.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver62 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array63 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr64 = princessProver62.mkOr(proverExpr_array63);
    jayhorn.solver.ProverExpr proverExpr65 = princessProver59.mkOr(proverExpr_array63);
    jayhorn.solver.BoolType boolType67 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str68 = boolType67.toString();
    jayhorn.solver.ProverType[] proverType_array69 = new jayhorn.solver.ProverType[] { boolType67 };
    jayhorn.solver.princess.PrincessProver princessProver70 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array71 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr72 = princessProver70.mkOr(proverExpr_array71);
    jayhorn.solver.ProverFun proverFun73 = princessProver59.mkDefinedFunction("hi!", proverType_array69, proverExpr72);
    jayhorn.solver.ProverExpr proverExpr75 = princessProver59.mkLiteral((-1));
    jayhorn.solver.IntType intType76 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr77 = princessProver58.mkAll(proverExpr75, (jayhorn.solver.ProverType)intType76);
    jayhorn.solver.ProverExpr proverExpr78 = princessProver47.mkAnd(proverExpr57, proverExpr77);
    jayhorn.solver.z3.Z3HornExpr z3HornExpr79 = new jayhorn.solver.z3.Z3HornExpr(proverExpr38, proverExpr_array43, proverExpr57);
    jayhorn.solver.princess.PrincessProver princessProver80 = new jayhorn.solver.princess.PrincessProver();
    princessProver80.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver83 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array84 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr85 = princessProver83.mkOr(proverExpr_array84);
    jayhorn.solver.ProverExpr proverExpr86 = princessProver80.mkOr(proverExpr_array84);
    jayhorn.solver.princess.PrincessProver princessProver87 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array88 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr89 = princessProver87.mkOr(proverExpr_array88);
    jayhorn.solver.BoolType boolType91 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str92 = boolType91.toString();
    jayhorn.solver.ProverExpr proverExpr93 = princessProver87.mkHornVariable("hi!", (jayhorn.solver.ProverType)boolType91);
    jayhorn.solver.ProverExpr proverExpr94 = princessProver80.mkNeg(proverExpr93);
    // The following exception was thrown during execution in test generation
    try {
      jayhorn.solver.ProverExpr proverExpr95 = princessProver0.mkImplies((jayhorn.solver.ProverExpr)z3HornExpr79, proverExpr94);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Bool"+ "'", str28.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "Bool"+ "'", str68.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str92 + "' != '" + "Bool"+ "'", str92.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr94);

  }

  @Test
  public void test040() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test040"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    princessProver0.setConstructProofs(true);
    jayhorn.solver.princess.PrincessProver princessProver3 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver4 = new jayhorn.solver.princess.PrincessProver();
    princessProver4.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver7 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array8 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr9 = princessProver7.mkOr(proverExpr_array8);
    jayhorn.solver.ProverExpr proverExpr10 = princessProver4.mkOr(proverExpr_array8);
    jayhorn.solver.BoolType boolType12 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str13 = boolType12.toString();
    jayhorn.solver.ProverType[] proverType_array14 = new jayhorn.solver.ProverType[] { boolType12 };
    jayhorn.solver.princess.PrincessProver princessProver15 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array16 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr17 = princessProver15.mkOr(proverExpr_array16);
    jayhorn.solver.ProverFun proverFun18 = princessProver4.mkDefinedFunction("hi!", proverType_array14, proverExpr17);
    jayhorn.solver.ProverExpr proverExpr20 = princessProver4.mkLiteral((-1));
    jayhorn.solver.IntType intType21 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr22 = princessProver3.mkAll(proverExpr20, (jayhorn.solver.ProverType)intType21);
    jayhorn.solver.princess.PrincessProver princessProver23 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array24 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr25 = princessProver23.mkOr(proverExpr_array24);
    jayhorn.solver.princess.PrincessProver princessProver26 = new jayhorn.solver.princess.PrincessProver();
    princessProver26.setPartitionNumber((-1));
    princessProver26.reset();
    jayhorn.solver.princess.PrincessProver princessProver30 = new jayhorn.solver.princess.PrincessProver();
    princessProver30.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver33 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array34 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr35 = princessProver33.mkOr(proverExpr_array34);
    jayhorn.solver.ProverExpr proverExpr36 = princessProver30.mkOr(proverExpr_array34);
    jayhorn.solver.BoolType boolType38 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str39 = boolType38.toString();
    jayhorn.solver.ProverType[] proverType_array40 = new jayhorn.solver.ProverType[] { boolType38 };
    jayhorn.solver.princess.PrincessProver princessProver41 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array42 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr43 = princessProver41.mkOr(proverExpr_array42);
    jayhorn.solver.ProverFun proverFun44 = princessProver30.mkDefinedFunction("hi!", proverType_array40, proverExpr43);
    jayhorn.solver.ProverExpr proverExpr46 = princessProver30.mkLiteral((-1));
    jayhorn.solver.ProverExpr proverExpr47 = princessProver26.mkNeg(proverExpr46);
    jayhorn.solver.z3.Z3HornExpr z3HornExpr48 = new jayhorn.solver.z3.Z3HornExpr(proverExpr22, proverExpr_array24, proverExpr47);
    jayhorn.solver.princess.PrincessProver princessProver49 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver50 = new jayhorn.solver.princess.PrincessProver();
    princessProver50.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver53 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array54 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr55 = princessProver53.mkOr(proverExpr_array54);
    jayhorn.solver.ProverExpr proverExpr56 = princessProver50.mkOr(proverExpr_array54);
    jayhorn.solver.BoolType boolType58 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str59 = boolType58.toString();
    jayhorn.solver.ProverType[] proverType_array60 = new jayhorn.solver.ProverType[] { boolType58 };
    jayhorn.solver.princess.PrincessProver princessProver61 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array62 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr63 = princessProver61.mkOr(proverExpr_array62);
    jayhorn.solver.ProverFun proverFun64 = princessProver50.mkDefinedFunction("hi!", proverType_array60, proverExpr63);
    jayhorn.solver.ProverExpr proverExpr66 = princessProver50.mkLiteral((-1));
    jayhorn.solver.IntType intType67 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr68 = princessProver49.mkAll(proverExpr66, (jayhorn.solver.ProverType)intType67);
    jayhorn.solver.princess.PrincessProver princessProver69 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array70 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr71 = princessProver69.mkOr(proverExpr_array70);
    jayhorn.solver.princess.PrincessProver princessProver72 = new jayhorn.solver.princess.PrincessProver();
    princessProver72.setPartitionNumber((-1));
    princessProver72.reset();
    jayhorn.solver.princess.PrincessProver princessProver76 = new jayhorn.solver.princess.PrincessProver();
    princessProver76.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver79 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array80 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr81 = princessProver79.mkOr(proverExpr_array80);
    jayhorn.solver.ProverExpr proverExpr82 = princessProver76.mkOr(proverExpr_array80);
    jayhorn.solver.BoolType boolType84 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str85 = boolType84.toString();
    jayhorn.solver.ProverType[] proverType_array86 = new jayhorn.solver.ProverType[] { boolType84 };
    jayhorn.solver.princess.PrincessProver princessProver87 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array88 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr89 = princessProver87.mkOr(proverExpr_array88);
    jayhorn.solver.ProverFun proverFun90 = princessProver76.mkDefinedFunction("hi!", proverType_array86, proverExpr89);
    jayhorn.solver.ProverExpr proverExpr92 = princessProver76.mkLiteral((-1));
    jayhorn.solver.ProverExpr proverExpr93 = princessProver72.mkNeg(proverExpr92);
    jayhorn.solver.z3.Z3HornExpr z3HornExpr94 = new jayhorn.solver.z3.Z3HornExpr(proverExpr68, proverExpr_array70, proverExpr93);
    jayhorn.solver.ProverExpr proverExpr95 = z3HornExpr94.getHead();
    jayhorn.solver.ProverExpr proverExpr96 = z3HornExpr94.getHead();
    jayhorn.solver.ProverExpr[] proverExpr_array97 = z3HornExpr94.getBody();
    // The following exception was thrown during execution in test generation
    try {
      jayhorn.solver.ProverExpr proverExpr98 = princessProver0.mkAnd(proverExpr22, (jayhorn.solver.ProverExpr)z3HornExpr94);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Bool"+ "'", str13.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "Bool"+ "'", str39.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "Bool"+ "'", str59.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str85 + "' != '" + "Bool"+ "'", str85.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr96);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array97);

  }

  @Test
  public void test041() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test041"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array1 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr2 = princessProver0.mkOr(proverExpr_array1);
    jayhorn.solver.princess.PrincessProver princessProver3 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array4 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr5 = princessProver3.mkOr(proverExpr_array4);
    jayhorn.solver.BoolType boolType7 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str8 = boolType7.toString();
    jayhorn.solver.ProverExpr proverExpr9 = princessProver3.mkHornVariable("hi!", (jayhorn.solver.ProverType)boolType7);
    jayhorn.solver.princess.PrincessProver princessProver10 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver11 = new jayhorn.solver.princess.PrincessProver();
    princessProver11.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver14 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array15 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr16 = princessProver14.mkOr(proverExpr_array15);
    jayhorn.solver.ProverExpr proverExpr17 = princessProver11.mkOr(proverExpr_array15);
    jayhorn.solver.BoolType boolType19 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str20 = boolType19.toString();
    jayhorn.solver.ProverType[] proverType_array21 = new jayhorn.solver.ProverType[] { boolType19 };
    jayhorn.solver.princess.PrincessProver princessProver22 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array23 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr24 = princessProver22.mkOr(proverExpr_array23);
    jayhorn.solver.ProverFun proverFun25 = princessProver11.mkDefinedFunction("hi!", proverType_array21, proverExpr24);
    jayhorn.solver.ProverExpr proverExpr27 = princessProver11.mkLiteral((-1));
    jayhorn.solver.IntType intType28 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr29 = princessProver10.mkAll(proverExpr27, (jayhorn.solver.ProverType)intType28);
    jayhorn.solver.princess.PrincessProver princessProver31 = new jayhorn.solver.princess.PrincessProver();
    princessProver31.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver34 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array35 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr36 = princessProver34.mkOr(proverExpr_array35);
    jayhorn.solver.ProverExpr proverExpr37 = princessProver31.mkOr(proverExpr_array35);
    jayhorn.solver.BoolType boolType39 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str40 = boolType39.toString();
    jayhorn.solver.ProverType[] proverType_array41 = new jayhorn.solver.ProverType[] { boolType39 };
    jayhorn.solver.princess.PrincessProver princessProver42 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array43 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr44 = princessProver42.mkOr(proverExpr_array43);
    jayhorn.solver.ProverFun proverFun45 = princessProver31.mkDefinedFunction("hi!", proverType_array41, proverExpr44);
    jayhorn.solver.princess.PrincessProver princessProver46 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array47 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr48 = princessProver46.mkOr(proverExpr_array47);
    jayhorn.solver.ProverFun proverFun49 = princessProver10.mkDefinedFunction("hi!", proverType_array41, proverExpr48);
    jayhorn.solver.ProverExpr proverExpr50 = princessProver0.mkAnd(proverExpr9, proverExpr48);
    princessProver0.reset();
    jayhorn.solver.IntType intType53 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr54 = princessProver0.mkVariable("hi!", (jayhorn.solver.ProverType)intType53);
    jayhorn.solver.ProverResult proverResult56 = princessProver0.getResult(1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Bool"+ "'", str8.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Bool"+ "'", str20.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "Bool"+ "'", str40.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverResult56);

  }

  @Test
  public void test042() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test042"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver1 = new jayhorn.solver.princess.PrincessProver();
    princessProver1.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver4 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array5 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr6 = princessProver4.mkOr(proverExpr_array5);
    jayhorn.solver.ProverExpr proverExpr7 = princessProver1.mkOr(proverExpr_array5);
    jayhorn.solver.BoolType boolType9 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str10 = boolType9.toString();
    jayhorn.solver.ProverType[] proverType_array11 = new jayhorn.solver.ProverType[] { boolType9 };
    jayhorn.solver.princess.PrincessProver princessProver12 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array13 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr14 = princessProver12.mkOr(proverExpr_array13);
    jayhorn.solver.ProverFun proverFun15 = princessProver1.mkDefinedFunction("hi!", proverType_array11, proverExpr14);
    jayhorn.solver.ProverExpr proverExpr17 = princessProver1.mkLiteral((-1));
    jayhorn.solver.IntType intType18 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr19 = princessProver0.mkAll(proverExpr17, (jayhorn.solver.ProverType)intType18);
    jayhorn.solver.princess.PrincessProver princessProver20 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array21 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr22 = princessProver20.mkOr(proverExpr_array21);
    jayhorn.solver.princess.PrincessProver princessProver23 = new jayhorn.solver.princess.PrincessProver();
    princessProver23.setPartitionNumber((-1));
    princessProver23.reset();
    jayhorn.solver.princess.PrincessProver princessProver27 = new jayhorn.solver.princess.PrincessProver();
    princessProver27.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver30 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array31 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr32 = princessProver30.mkOr(proverExpr_array31);
    jayhorn.solver.ProverExpr proverExpr33 = princessProver27.mkOr(proverExpr_array31);
    jayhorn.solver.BoolType boolType35 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str36 = boolType35.toString();
    jayhorn.solver.ProverType[] proverType_array37 = new jayhorn.solver.ProverType[] { boolType35 };
    jayhorn.solver.princess.PrincessProver princessProver38 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array39 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr40 = princessProver38.mkOr(proverExpr_array39);
    jayhorn.solver.ProverFun proverFun41 = princessProver27.mkDefinedFunction("hi!", proverType_array37, proverExpr40);
    jayhorn.solver.ProverExpr proverExpr43 = princessProver27.mkLiteral((-1));
    jayhorn.solver.ProverExpr proverExpr44 = princessProver23.mkNeg(proverExpr43);
    jayhorn.solver.z3.Z3HornExpr z3HornExpr45 = new jayhorn.solver.z3.Z3HornExpr(proverExpr19, proverExpr_array21, proverExpr44);
    jayhorn.solver.ProverExpr proverExpr46 = z3HornExpr45.getHead();
    jayhorn.solver.ProverExpr proverExpr47 = z3HornExpr45.getHead();
    // The following exception was thrown during execution in test generation
    try {
      java.math.BigInteger bigInteger48 = z3HornExpr45.getIntLiteralValue();
      org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.RuntimeException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Bool"+ "'", str10.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Bool"+ "'", str36.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr47);

  }

  @Test
  public void test043() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test043"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver1 = new jayhorn.solver.princess.PrincessProver();
    princessProver1.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver4 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array5 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr6 = princessProver4.mkOr(proverExpr_array5);
    jayhorn.solver.ProverExpr proverExpr7 = princessProver1.mkOr(proverExpr_array5);
    jayhorn.solver.BoolType boolType9 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str10 = boolType9.toString();
    jayhorn.solver.ProverType[] proverType_array11 = new jayhorn.solver.ProverType[] { boolType9 };
    jayhorn.solver.princess.PrincessProver princessProver12 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array13 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr14 = princessProver12.mkOr(proverExpr_array13);
    jayhorn.solver.ProverFun proverFun15 = princessProver1.mkDefinedFunction("hi!", proverType_array11, proverExpr14);
    jayhorn.solver.ProverExpr proverExpr17 = princessProver1.mkLiteral((-1));
    jayhorn.solver.IntType intType18 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr19 = princessProver0.mkAll(proverExpr17, (jayhorn.solver.ProverType)intType18);
    jayhorn.solver.princess.PrincessProver princessProver20 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array21 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr22 = princessProver20.mkOr(proverExpr_array21);
    jayhorn.solver.princess.PrincessProver princessProver23 = new jayhorn.solver.princess.PrincessProver();
    princessProver23.setPartitionNumber((-1));
    princessProver23.reset();
    jayhorn.solver.princess.PrincessProver princessProver27 = new jayhorn.solver.princess.PrincessProver();
    princessProver27.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver30 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array31 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr32 = princessProver30.mkOr(proverExpr_array31);
    jayhorn.solver.ProverExpr proverExpr33 = princessProver27.mkOr(proverExpr_array31);
    jayhorn.solver.BoolType boolType35 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str36 = boolType35.toString();
    jayhorn.solver.ProverType[] proverType_array37 = new jayhorn.solver.ProverType[] { boolType35 };
    jayhorn.solver.princess.PrincessProver princessProver38 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array39 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr40 = princessProver38.mkOr(proverExpr_array39);
    jayhorn.solver.ProverFun proverFun41 = princessProver27.mkDefinedFunction("hi!", proverType_array37, proverExpr40);
    jayhorn.solver.ProverExpr proverExpr43 = princessProver27.mkLiteral((-1));
    jayhorn.solver.ProverExpr proverExpr44 = princessProver23.mkNeg(proverExpr43);
    jayhorn.solver.z3.Z3HornExpr z3HornExpr45 = new jayhorn.solver.z3.Z3HornExpr(proverExpr19, proverExpr_array21, proverExpr44);
    jayhorn.solver.ProverExpr proverExpr46 = z3HornExpr45.getHead();
    jayhorn.solver.ProverExpr proverExpr47 = z3HornExpr45.getHead();
    // The following exception was thrown during execution in test generation
    try {
      jayhorn.solver.ProverFun proverFun49 = z3HornExpr45.getBodyFun(0);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Bool"+ "'", str10.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Bool"+ "'", str36.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr47);

  }

  @Test
  public void test044() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test044"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    princessProver0.setConstructProofs(true);
    jayhorn.solver.ProverResult proverResult4 = princessProver0.getResult(true);
    jayhorn.util.SimplCfgToProver simplCfgToProver5 = new jayhorn.util.SimplCfgToProver((jayhorn.solver.Prover)princessProver0);
    soottocfg.randoop.Javac javac6 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac7 = javac6.debug();
    soottocfg.cfg.util.Tree tree8 = new soottocfg.cfg.util.Tree();
    java.util.Set set9 = tree8.getLeaves();
    soottocfg.randoop.Javac javac10 = javac7.sourcepath((java.util.Collection)set9);
    soottocfg.randoop.Javac javac11 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac12 = javac11.debug();
    soottocfg.cfg.util.Tree tree13 = new soottocfg.cfg.util.Tree();
    java.util.Set set14 = tree13.getLeaves();
    soottocfg.randoop.Javac javac15 = javac12.sourcepath((java.util.Collection)set14);
    soottocfg.randoop.Javac javac16 = javac7.sourcepath((java.util.Collection)set14);
    soottocfg.randoop.Javac javac17 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac18 = javac17.debug();
    soottocfg.cfg.util.Tree tree19 = new soottocfg.cfg.util.Tree();
    java.util.Set set20 = tree19.getLeaves();
    soottocfg.randoop.Javac javac21 = javac18.sourcepath((java.util.Collection)set20);
    boolean b22 = javac18.inDebugMode();
    boolean b23 = javac18.inDebugMode();
    soottocfg.randoop.Classpath classpath24 = new soottocfg.randoop.Classpath();
    soottocfg.randoop.Javac javac25 = javac18.classpath(classpath24);
    soottocfg.randoop.Javac javac26 = javac7.bootClasspath(classpath24);
    soottocfg.randoop.Javac javac27 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac28 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac29 = javac28.debug();
    soottocfg.cfg.util.Tree tree30 = new soottocfg.cfg.util.Tree();
    java.util.Set set31 = tree30.getLeaves();
    soottocfg.randoop.Javac javac32 = javac29.sourcepath((java.util.Collection)set31);
    soottocfg.randoop.Javac javac33 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac34 = javac33.debug();
    soottocfg.cfg.util.Tree tree35 = new soottocfg.cfg.util.Tree();
    java.util.Set set36 = tree35.getLeaves();
    soottocfg.randoop.Javac javac37 = javac34.sourcepath((java.util.Collection)set36);
    soottocfg.randoop.Javac javac38 = javac29.sourcepath((java.util.Collection)set36);
    soottocfg.randoop.Javac javac39 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac40 = javac39.debug();
    soottocfg.cfg.util.Tree tree41 = new soottocfg.cfg.util.Tree();
    java.util.Set set42 = tree41.getLeaves();
    soottocfg.randoop.Javac javac43 = javac40.sourcepath((java.util.Collection)set42);
    boolean b44 = javac40.inDebugMode();
    boolean b45 = javac40.inDebugMode();
    soottocfg.randoop.Classpath classpath46 = new soottocfg.randoop.Classpath();
    soottocfg.randoop.Javac javac47 = javac40.classpath(classpath46);
    soottocfg.randoop.Javac javac48 = javac29.bootClasspath(classpath46);
    java.util.List list49 = javac48.version();
    javac27.log(list49);
    soottocfg.randoop.Javac javac51 = javac26.extraArgs(list49);
    // The following exception was thrown during execution in test generation
    try {
      jayhorn.solver.ProverExpr proverExpr52 = simplCfgToProver5.statementListToTransitionRelation(list49);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverResult4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac51);

  }

  @Test
  public void test045() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test045"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array1 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr2 = princessProver0.mkOr(proverExpr_array1);
    jayhorn.solver.princess.PrincessProver princessProver3 = new jayhorn.solver.princess.PrincessProver();
    princessProver3.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver6 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array7 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr8 = princessProver6.mkOr(proverExpr_array7);
    jayhorn.solver.ProverExpr proverExpr9 = princessProver3.mkOr(proverExpr_array7);
    jayhorn.solver.BoolType boolType11 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str12 = boolType11.toString();
    jayhorn.solver.ProverType[] proverType_array13 = new jayhorn.solver.ProverType[] { boolType11 };
    jayhorn.solver.princess.PrincessProver princessProver14 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array15 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr16 = princessProver14.mkOr(proverExpr_array15);
    jayhorn.solver.ProverFun proverFun17 = princessProver3.mkDefinedFunction("hi!", proverType_array13, proverExpr16);
    jayhorn.solver.princess.PrincessProver princessProver18 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array19 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr20 = princessProver18.mkOr(proverExpr_array19);
    jayhorn.solver.princess.PrincessProver princessProver21 = new jayhorn.solver.princess.PrincessProver();
    princessProver21.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver24 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array25 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr26 = princessProver24.mkOr(proverExpr_array25);
    jayhorn.solver.ProverExpr proverExpr27 = princessProver21.mkOr(proverExpr_array25);
    jayhorn.solver.princess.PrincessProver princessProver28 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver29 = new jayhorn.solver.princess.PrincessProver();
    princessProver29.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver32 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array33 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr34 = princessProver32.mkOr(proverExpr_array33);
    jayhorn.solver.ProverExpr proverExpr35 = princessProver29.mkOr(proverExpr_array33);
    jayhorn.solver.BoolType boolType37 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str38 = boolType37.toString();
    jayhorn.solver.ProverType[] proverType_array39 = new jayhorn.solver.ProverType[] { boolType37 };
    jayhorn.solver.princess.PrincessProver princessProver40 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array41 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr42 = princessProver40.mkOr(proverExpr_array41);
    jayhorn.solver.ProverFun proverFun43 = princessProver29.mkDefinedFunction("hi!", proverType_array39, proverExpr42);
    jayhorn.solver.ProverExpr proverExpr45 = princessProver29.mkLiteral((-1));
    jayhorn.solver.IntType intType46 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr47 = princessProver28.mkAll(proverExpr45, (jayhorn.solver.ProverType)intType46);
    jayhorn.solver.ProverExpr proverExpr48 = princessProver18.mkImplies(proverExpr27, proverExpr47);
    // The following exception was thrown during execution in test generation
    try {
      jayhorn.solver.ProverExpr proverExpr49 = princessProver0.mkLt(proverExpr16, proverExpr27);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Bool"+ "'", str12.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "Bool"+ "'", str38.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr48);

  }

  @Test
  public void test046() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test046"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    princessProver0.setPartitionNumber((-1));
    princessProver0.reset();
    jayhorn.solver.princess.PrincessProver princessProver4 = new jayhorn.solver.princess.PrincessProver();
    princessProver4.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver7 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array8 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr9 = princessProver7.mkOr(proverExpr_array8);
    jayhorn.solver.ProverExpr proverExpr10 = princessProver4.mkOr(proverExpr_array8);
    jayhorn.solver.princess.PrincessProver princessProver11 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver12 = new jayhorn.solver.princess.PrincessProver();
    princessProver12.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver15 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array16 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr17 = princessProver15.mkOr(proverExpr_array16);
    jayhorn.solver.ProverExpr proverExpr18 = princessProver12.mkOr(proverExpr_array16);
    jayhorn.solver.BoolType boolType20 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str21 = boolType20.toString();
    jayhorn.solver.ProverType[] proverType_array22 = new jayhorn.solver.ProverType[] { boolType20 };
    jayhorn.solver.princess.PrincessProver princessProver23 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array24 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr25 = princessProver23.mkOr(proverExpr_array24);
    jayhorn.solver.ProverFun proverFun26 = princessProver12.mkDefinedFunction("hi!", proverType_array22, proverExpr25);
    jayhorn.solver.ProverExpr proverExpr28 = princessProver12.mkLiteral((-1));
    jayhorn.solver.IntType intType29 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr30 = princessProver11.mkAll(proverExpr28, (jayhorn.solver.ProverType)intType29);
    jayhorn.solver.ProverExpr proverExpr31 = princessProver0.mkAnd(proverExpr10, proverExpr30);
    jayhorn.solver.princess.PrincessProver princessProver32 = new jayhorn.solver.princess.PrincessProver();
    princessProver32.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver35 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array36 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr37 = princessProver35.mkOr(proverExpr_array36);
    jayhorn.solver.ProverExpr proverExpr38 = princessProver32.mkOr(proverExpr_array36);
    java.lang.String[] str_array39 = soottocfg.randoop.Strings.generateArrayOfStrings((java.lang.Object[])proverExpr_array36);
    jayhorn.solver.princess.PrincessProver princessProver40 = new jayhorn.solver.princess.PrincessProver();
    princessProver40.setPartitionNumber((-1));
    princessProver40.reset();
    jayhorn.solver.princess.PrincessProver princessProver44 = new jayhorn.solver.princess.PrincessProver();
    princessProver44.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver47 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array48 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr49 = princessProver47.mkOr(proverExpr_array48);
    jayhorn.solver.ProverExpr proverExpr50 = princessProver44.mkOr(proverExpr_array48);
    jayhorn.solver.princess.PrincessProver princessProver51 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver52 = new jayhorn.solver.princess.PrincessProver();
    princessProver52.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver55 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array56 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr57 = princessProver55.mkOr(proverExpr_array56);
    jayhorn.solver.ProverExpr proverExpr58 = princessProver52.mkOr(proverExpr_array56);
    jayhorn.solver.BoolType boolType60 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str61 = boolType60.toString();
    jayhorn.solver.ProverType[] proverType_array62 = new jayhorn.solver.ProverType[] { boolType60 };
    jayhorn.solver.princess.PrincessProver princessProver63 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array64 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr65 = princessProver63.mkOr(proverExpr_array64);
    jayhorn.solver.ProverFun proverFun66 = princessProver52.mkDefinedFunction("hi!", proverType_array62, proverExpr65);
    jayhorn.solver.ProverExpr proverExpr68 = princessProver52.mkLiteral((-1));
    jayhorn.solver.IntType intType69 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr70 = princessProver51.mkAll(proverExpr68, (jayhorn.solver.ProverType)intType69);
    jayhorn.solver.ProverExpr proverExpr71 = princessProver40.mkAnd(proverExpr50, proverExpr70);
    jayhorn.solver.z3.Z3HornExpr z3HornExpr72 = new jayhorn.solver.z3.Z3HornExpr(proverExpr31, proverExpr_array36, proverExpr50);
    // The following exception was thrown during execution in test generation
    try {
      java.math.BigInteger bigInteger73 = z3HornExpr72.getIntLiteralValue();
      org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.RuntimeException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Bool"+ "'", str21.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "Bool"+ "'", str61.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr71);

  }

  @Test
  public void test047() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test047"); }


    soottocfg.cfg.util.Tree tree0 = new soottocfg.cfg.util.Tree();
    java.util.Set set1 = tree0.getLeaves();
    java.lang.Object obj2 = tree0.getRoot();
    jayhorn.solver.princess.PrincessProver princessProver3 = new jayhorn.solver.princess.PrincessProver();
    princessProver3.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver6 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array7 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr8 = princessProver6.mkOr(proverExpr_array7);
    jayhorn.solver.ProverExpr proverExpr9 = princessProver3.mkOr(proverExpr_array7);
    jayhorn.solver.BoolType boolType11 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str12 = boolType11.toString();
    jayhorn.solver.ProverType[] proverType_array13 = new jayhorn.solver.ProverType[] { boolType11 };
    jayhorn.solver.princess.PrincessProver princessProver14 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array15 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr16 = princessProver14.mkOr(proverExpr_array15);
    jayhorn.solver.ProverFun proverFun17 = princessProver3.mkDefinedFunction("hi!", proverType_array13, proverExpr16);
    soottocfg.randoop.Javac javac18 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac19 = javac18.debug();
    soottocfg.cfg.util.Tree tree20 = new soottocfg.cfg.util.Tree();
    java.util.Set set21 = tree20.getLeaves();
    soottocfg.randoop.Javac javac22 = javac19.sourcepath((java.util.Collection)set21);
    soottocfg.randoop.Javac javac23 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac24 = javac23.debug();
    soottocfg.cfg.util.Tree tree25 = new soottocfg.cfg.util.Tree();
    java.util.Set set26 = tree25.getLeaves();
    soottocfg.randoop.Javac javac27 = javac24.sourcepath((java.util.Collection)set26);
    soottocfg.randoop.Javac javac28 = javac19.sourcepath((java.util.Collection)set26);
    soottocfg.randoop.Javac javac29 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac30 = javac29.debug();
    soottocfg.cfg.util.Tree tree31 = new soottocfg.cfg.util.Tree();
    java.util.Set set32 = tree31.getLeaves();
    soottocfg.randoop.Javac javac33 = javac30.sourcepath((java.util.Collection)set32);
    boolean b34 = javac30.inDebugMode();
    boolean b35 = javac30.inDebugMode();
    soottocfg.randoop.Classpath classpath36 = new soottocfg.randoop.Classpath();
    soottocfg.randoop.Javac javac37 = javac30.classpath(classpath36);
    soottocfg.randoop.Javac javac38 = javac19.bootClasspath(classpath36);
    // The following exception was thrown during execution in test generation
    try {
      boolean b39 = tree0.isAncestor((java.lang.Object)"hi!", (java.lang.Object)classpath36);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obj2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Bool"+ "'", str12.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac38);

  }

  @Test
  public void test048() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test048"); }


    jayhorn.solver.z3.Z3ProverFactory z3ProverFactory0 = new jayhorn.solver.z3.Z3ProverFactory();
    // The following exception was thrown during execution in test generation
    try {
      jayhorn.solver.Prover prover1 = z3ProverFactory0.spawn();
      org.junit.Assert.fail("Expected exception of type java.lang.NoClassDefFoundError");
    } catch (java.lang.NoClassDefFoundError e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NoClassDefFoundError")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NoClassDefFoundError, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test049() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test049"); }


    jayhorn.solver.ArrayType arrayType1 = new jayhorn.solver.ArrayType(10);
    soottocfg.randoop.Javac javac2 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac3 = javac2.debug();
    soottocfg.cfg.util.Tree tree4 = new soottocfg.cfg.util.Tree();
    java.util.Set set5 = tree4.getLeaves();
    soottocfg.randoop.Javac javac6 = javac3.sourcepath((java.util.Collection)set5);
    soottocfg.randoop.Javac javac7 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac8 = javac7.debug();
    soottocfg.cfg.util.Tree tree9 = new soottocfg.cfg.util.Tree();
    java.util.Set set10 = tree9.getLeaves();
    soottocfg.randoop.Javac javac11 = javac8.sourcepath((java.util.Collection)set10);
    soottocfg.randoop.Javac javac12 = javac3.sourcepath((java.util.Collection)set10);
    soottocfg.randoop.Javac javac13 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac14 = javac13.debug();
    soottocfg.cfg.util.Tree tree15 = new soottocfg.cfg.util.Tree();
    java.util.Set set16 = tree15.getLeaves();
    soottocfg.randoop.Javac javac17 = javac14.sourcepath((java.util.Collection)set16);
    boolean b18 = javac14.inDebugMode();
    boolean b19 = javac14.inDebugMode();
    soottocfg.randoop.Classpath classpath20 = new soottocfg.randoop.Classpath();
    soottocfg.randoop.Javac javac21 = javac14.classpath(classpath20);
    soottocfg.randoop.Javac javac22 = javac3.bootClasspath(classpath20);
    java.util.List list23 = javac22.version();
    boolean b24 = arrayType1.equals((java.lang.Object)javac22);
    int i25 = arrayType1.arity;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 10);

  }

  @Test
  public void test050() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test050"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver1 = new jayhorn.solver.princess.PrincessProver();
    princessProver1.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver4 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array5 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr6 = princessProver4.mkOr(proverExpr_array5);
    jayhorn.solver.ProverExpr proverExpr7 = princessProver1.mkOr(proverExpr_array5);
    jayhorn.solver.BoolType boolType9 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str10 = boolType9.toString();
    jayhorn.solver.ProverType[] proverType_array11 = new jayhorn.solver.ProverType[] { boolType9 };
    jayhorn.solver.princess.PrincessProver princessProver12 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array13 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr14 = princessProver12.mkOr(proverExpr_array13);
    jayhorn.solver.ProverFun proverFun15 = princessProver1.mkDefinedFunction("hi!", proverType_array11, proverExpr14);
    jayhorn.solver.ProverExpr proverExpr17 = princessProver1.mkLiteral((-1));
    jayhorn.solver.IntType intType18 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr19 = princessProver0.mkAll(proverExpr17, (jayhorn.solver.ProverType)intType18);
    jayhorn.solver.ProverResult proverResult21 = princessProver0.getResult(10L);
    jayhorn.solver.princess.PrincessProver princessProver22 = new jayhorn.solver.princess.PrincessProver();
    princessProver22.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver25 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array26 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr27 = princessProver25.mkOr(proverExpr_array26);
    jayhorn.solver.ProverExpr proverExpr28 = princessProver22.mkOr(proverExpr_array26);
    jayhorn.solver.princess.PrincessProver princessProver29 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array30 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr31 = princessProver29.mkOr(proverExpr_array30);
    jayhorn.solver.BoolType boolType33 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str34 = boolType33.toString();
    jayhorn.solver.ProverExpr proverExpr35 = princessProver29.mkHornVariable("hi!", (jayhorn.solver.ProverType)boolType33);
    jayhorn.solver.ProverExpr proverExpr36 = princessProver22.mkNeg(proverExpr35);
    jayhorn.solver.princess.PrincessProver princessProver37 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver38 = new jayhorn.solver.princess.PrincessProver();
    princessProver38.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver41 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array42 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr43 = princessProver41.mkOr(proverExpr_array42);
    jayhorn.solver.ProverExpr proverExpr44 = princessProver38.mkOr(proverExpr_array42);
    jayhorn.solver.BoolType boolType46 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str47 = boolType46.toString();
    jayhorn.solver.ProverType[] proverType_array48 = new jayhorn.solver.ProverType[] { boolType46 };
    jayhorn.solver.princess.PrincessProver princessProver49 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array50 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr51 = princessProver49.mkOr(proverExpr_array50);
    jayhorn.solver.ProverFun proverFun52 = princessProver38.mkDefinedFunction("hi!", proverType_array48, proverExpr51);
    jayhorn.solver.ProverExpr proverExpr54 = princessProver38.mkLiteral((-1));
    jayhorn.solver.IntType intType55 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr56 = princessProver37.mkAll(proverExpr54, (jayhorn.solver.ProverType)intType55);
    // The following exception was thrown during execution in test generation
    try {
      jayhorn.solver.ProverExpr proverExpr57 = princessProver0.mkTMod(proverExpr35, proverExpr56);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Bool"+ "'", str10.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverResult21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "Bool"+ "'", str34.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "Bool"+ "'", str47.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr56);

  }

  @Test
  public void test051() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test051"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    princessProver0.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver3 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array4 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr5 = princessProver3.mkOr(proverExpr_array4);
    jayhorn.solver.ProverExpr proverExpr6 = princessProver0.mkOr(proverExpr_array4);
    jayhorn.solver.princess.PrincessProver princessProver7 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array8 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr9 = princessProver7.mkOr(proverExpr_array8);
    jayhorn.solver.BoolType boolType11 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str12 = boolType11.toString();
    jayhorn.solver.ProverExpr proverExpr13 = princessProver7.mkHornVariable("hi!", (jayhorn.solver.ProverType)boolType11);
    jayhorn.solver.ProverExpr proverExpr14 = princessProver0.mkNeg(proverExpr13);
    jayhorn.solver.princess.PrincessProver princessProver15 = new jayhorn.solver.princess.PrincessProver();
    princessProver15.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver18 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array19 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr20 = princessProver18.mkOr(proverExpr_array19);
    jayhorn.solver.ProverExpr proverExpr21 = princessProver15.mkOr(proverExpr_array19);
    jayhorn.solver.BoolType boolType23 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str24 = boolType23.toString();
    jayhorn.solver.ProverType[] proverType_array25 = new jayhorn.solver.ProverType[] { boolType23 };
    jayhorn.solver.princess.PrincessProver princessProver26 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array27 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr28 = princessProver26.mkOr(proverExpr_array27);
    jayhorn.solver.ProverFun proverFun29 = princessProver15.mkDefinedFunction("hi!", proverType_array25, proverExpr28);
    jayhorn.solver.ProverExpr proverExpr31 = princessProver15.mkLiteral((-1));
    jayhorn.solver.princess.PrincessProver princessProver32 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array33 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr34 = princessProver32.mkOr(proverExpr_array33);
    jayhorn.solver.princess.PrincessProver princessProver35 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array36 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr37 = princessProver35.mkOr(proverExpr_array36);
    jayhorn.solver.BoolType boolType39 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str40 = boolType39.toString();
    jayhorn.solver.ProverExpr proverExpr41 = princessProver35.mkHornVariable("hi!", (jayhorn.solver.ProverType)boolType39);
    jayhorn.solver.princess.PrincessProver princessProver42 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver43 = new jayhorn.solver.princess.PrincessProver();
    princessProver43.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver46 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array47 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr48 = princessProver46.mkOr(proverExpr_array47);
    jayhorn.solver.ProverExpr proverExpr49 = princessProver43.mkOr(proverExpr_array47);
    jayhorn.solver.BoolType boolType51 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str52 = boolType51.toString();
    jayhorn.solver.ProverType[] proverType_array53 = new jayhorn.solver.ProverType[] { boolType51 };
    jayhorn.solver.princess.PrincessProver princessProver54 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array55 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr56 = princessProver54.mkOr(proverExpr_array55);
    jayhorn.solver.ProverFun proverFun57 = princessProver43.mkDefinedFunction("hi!", proverType_array53, proverExpr56);
    jayhorn.solver.ProverExpr proverExpr59 = princessProver43.mkLiteral((-1));
    jayhorn.solver.IntType intType60 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr61 = princessProver42.mkAll(proverExpr59, (jayhorn.solver.ProverType)intType60);
    jayhorn.solver.princess.PrincessProver princessProver63 = new jayhorn.solver.princess.PrincessProver();
    princessProver63.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver66 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array67 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr68 = princessProver66.mkOr(proverExpr_array67);
    jayhorn.solver.ProverExpr proverExpr69 = princessProver63.mkOr(proverExpr_array67);
    jayhorn.solver.BoolType boolType71 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str72 = boolType71.toString();
    jayhorn.solver.ProverType[] proverType_array73 = new jayhorn.solver.ProverType[] { boolType71 };
    jayhorn.solver.princess.PrincessProver princessProver74 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array75 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr76 = princessProver74.mkOr(proverExpr_array75);
    jayhorn.solver.ProverFun proverFun77 = princessProver63.mkDefinedFunction("hi!", proverType_array73, proverExpr76);
    jayhorn.solver.princess.PrincessProver princessProver78 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array79 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr80 = princessProver78.mkOr(proverExpr_array79);
    jayhorn.solver.ProverFun proverFun81 = princessProver42.mkDefinedFunction("hi!", proverType_array73, proverExpr80);
    jayhorn.solver.ProverExpr proverExpr82 = princessProver32.mkAnd(proverExpr41, proverExpr80);
    // The following exception was thrown during execution in test generation
    try {
      jayhorn.solver.ProverExpr proverExpr83 = princessProver0.mkEDiv(proverExpr31, proverExpr80);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Bool"+ "'", str12.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "Bool"+ "'", str24.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "Bool"+ "'", str40.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "Bool"+ "'", str52.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "Bool"+ "'", str72.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr82);

  }

  @Test
  public void test052() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test052"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver1 = new jayhorn.solver.princess.PrincessProver();
    princessProver1.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver4 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array5 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr6 = princessProver4.mkOr(proverExpr_array5);
    jayhorn.solver.ProverExpr proverExpr7 = princessProver1.mkOr(proverExpr_array5);
    jayhorn.solver.BoolType boolType9 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str10 = boolType9.toString();
    jayhorn.solver.ProverType[] proverType_array11 = new jayhorn.solver.ProverType[] { boolType9 };
    jayhorn.solver.princess.PrincessProver princessProver12 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array13 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr14 = princessProver12.mkOr(proverExpr_array13);
    jayhorn.solver.ProverFun proverFun15 = princessProver1.mkDefinedFunction("hi!", proverType_array11, proverExpr14);
    jayhorn.solver.ProverExpr proverExpr17 = princessProver1.mkLiteral((-1));
    jayhorn.solver.IntType intType18 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr19 = princessProver0.mkAll(proverExpr17, (jayhorn.solver.ProverType)intType18);
    jayhorn.solver.princess.PrincessProver princessProver20 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array21 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr22 = princessProver20.mkOr(proverExpr_array21);
    jayhorn.solver.princess.PrincessProver princessProver23 = new jayhorn.solver.princess.PrincessProver();
    princessProver23.setPartitionNumber((-1));
    princessProver23.reset();
    jayhorn.solver.princess.PrincessProver princessProver27 = new jayhorn.solver.princess.PrincessProver();
    princessProver27.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver30 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array31 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr32 = princessProver30.mkOr(proverExpr_array31);
    jayhorn.solver.ProverExpr proverExpr33 = princessProver27.mkOr(proverExpr_array31);
    jayhorn.solver.BoolType boolType35 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str36 = boolType35.toString();
    jayhorn.solver.ProverType[] proverType_array37 = new jayhorn.solver.ProverType[] { boolType35 };
    jayhorn.solver.princess.PrincessProver princessProver38 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array39 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr40 = princessProver38.mkOr(proverExpr_array39);
    jayhorn.solver.ProverFun proverFun41 = princessProver27.mkDefinedFunction("hi!", proverType_array37, proverExpr40);
    jayhorn.solver.ProverExpr proverExpr43 = princessProver27.mkLiteral((-1));
    jayhorn.solver.ProverExpr proverExpr44 = princessProver23.mkNeg(proverExpr43);
    jayhorn.solver.z3.Z3HornExpr z3HornExpr45 = new jayhorn.solver.z3.Z3HornExpr(proverExpr19, proverExpr_array21, proverExpr44);
    jayhorn.solver.ProverExpr proverExpr46 = z3HornExpr45.getHead();
    jayhorn.solver.ProverType proverType47 = z3HornExpr45.getType();
    // The following exception was thrown during execution in test generation
    try {
      java.math.BigInteger bigInteger48 = z3HornExpr45.getIntLiteralValue();
      org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.RuntimeException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Bool"+ "'", str10.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Bool"+ "'", str36.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType47);

  }

  @Test
  public void test053() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test053"); }


    soottocfg.randoop.Javac javac0 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac1 = javac0.debug();
    soottocfg.cfg.util.Tree tree2 = new soottocfg.cfg.util.Tree();
    java.util.Set set3 = tree2.getLeaves();
    soottocfg.randoop.Javac javac4 = javac1.sourcepath((java.util.Collection)set3);
    java.io.File[] file_array5 = new java.io.File[] {  };
    soottocfg.randoop.Javac javac6 = javac4.sourcepath(file_array5);
    soottocfg.randoop.Javac javac7 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac8 = javac7.debug();
    soottocfg.cfg.util.Tree tree9 = new soottocfg.cfg.util.Tree();
    java.util.Set set10 = tree9.getLeaves();
    soottocfg.randoop.Javac javac11 = javac8.sourcepath((java.util.Collection)set10);
    boolean b12 = javac8.inDebugMode();
    soottocfg.randoop.Javac javac13 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac14 = javac13.debug();
    soottocfg.cfg.util.Tree tree15 = new soottocfg.cfg.util.Tree();
    java.util.Set set16 = tree15.getLeaves();
    soottocfg.randoop.Javac javac17 = javac14.sourcepath((java.util.Collection)set16);
    soottocfg.randoop.Javac javac18 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac19 = javac18.debug();
    soottocfg.cfg.util.Tree tree20 = new soottocfg.cfg.util.Tree();
    java.util.Set set21 = tree20.getLeaves();
    soottocfg.randoop.Javac javac22 = javac19.sourcepath((java.util.Collection)set21);
    soottocfg.randoop.Javac javac23 = javac14.sourcepath((java.util.Collection)set21);
    soottocfg.randoop.Javac javac24 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac25 = javac24.debug();
    soottocfg.cfg.util.Tree tree26 = new soottocfg.cfg.util.Tree();
    java.util.Set set27 = tree26.getLeaves();
    soottocfg.randoop.Javac javac28 = javac25.sourcepath((java.util.Collection)set27);
    boolean b29 = javac25.inDebugMode();
    boolean b30 = javac25.inDebugMode();
    soottocfg.randoop.Classpath classpath31 = new soottocfg.randoop.Classpath();
    soottocfg.randoop.Javac javac32 = javac25.classpath(classpath31);
    soottocfg.randoop.Javac javac33 = javac14.bootClasspath(classpath31);
    soottocfg.randoop.Javac javac34 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac35 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac36 = javac35.debug();
    soottocfg.cfg.util.Tree tree37 = new soottocfg.cfg.util.Tree();
    java.util.Set set38 = tree37.getLeaves();
    soottocfg.randoop.Javac javac39 = javac36.sourcepath((java.util.Collection)set38);
    soottocfg.randoop.Javac javac40 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac41 = javac40.debug();
    soottocfg.cfg.util.Tree tree42 = new soottocfg.cfg.util.Tree();
    java.util.Set set43 = tree42.getLeaves();
    soottocfg.randoop.Javac javac44 = javac41.sourcepath((java.util.Collection)set43);
    soottocfg.randoop.Javac javac45 = javac36.sourcepath((java.util.Collection)set43);
    soottocfg.randoop.Javac javac46 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac47 = javac46.debug();
    soottocfg.cfg.util.Tree tree48 = new soottocfg.cfg.util.Tree();
    java.util.Set set49 = tree48.getLeaves();
    soottocfg.randoop.Javac javac50 = javac47.sourcepath((java.util.Collection)set49);
    boolean b51 = javac47.inDebugMode();
    boolean b52 = javac47.inDebugMode();
    soottocfg.randoop.Classpath classpath53 = new soottocfg.randoop.Classpath();
    soottocfg.randoop.Javac javac54 = javac47.classpath(classpath53);
    soottocfg.randoop.Javac javac55 = javac36.bootClasspath(classpath53);
    java.util.List list56 = javac55.version();
    javac34.log(list56);
    soottocfg.randoop.Javac javac58 = javac33.extraArgs(list56);
    javac8.log(list56);
    soottocfg.randoop.Javac javac60 = javac4.extraArgs(list56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(file_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac60);

  }

  @Test
  public void test054() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test054"); }


    soottocfg.cfg.SourceLocation sourceLocation2 = new soottocfg.cfg.SourceLocation("", 0);
    java.lang.String str3 = sourceLocation2.getSourceFileName();
    java.lang.String str4 = sourceLocation2.getSourceFileName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + ""+ "'", str3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + ""+ "'", str4.equals(""));

  }

  @Test
  public void test055() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test055"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver1 = new jayhorn.solver.princess.PrincessProver();
    princessProver1.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver4 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array5 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr6 = princessProver4.mkOr(proverExpr_array5);
    jayhorn.solver.ProverExpr proverExpr7 = princessProver1.mkOr(proverExpr_array5);
    jayhorn.solver.BoolType boolType9 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str10 = boolType9.toString();
    jayhorn.solver.ProverType[] proverType_array11 = new jayhorn.solver.ProverType[] { boolType9 };
    jayhorn.solver.princess.PrincessProver princessProver12 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array13 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr14 = princessProver12.mkOr(proverExpr_array13);
    jayhorn.solver.ProverFun proverFun15 = princessProver1.mkDefinedFunction("hi!", proverType_array11, proverExpr14);
    jayhorn.solver.ProverExpr proverExpr17 = princessProver1.mkLiteral((-1));
    jayhorn.solver.IntType intType18 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr19 = princessProver0.mkAll(proverExpr17, (jayhorn.solver.ProverType)intType18);
    jayhorn.solver.princess.PrincessProver princessProver20 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array21 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr22 = princessProver20.mkOr(proverExpr_array21);
    jayhorn.solver.princess.PrincessProver princessProver23 = new jayhorn.solver.princess.PrincessProver();
    princessProver23.setPartitionNumber((-1));
    princessProver23.reset();
    jayhorn.solver.princess.PrincessProver princessProver27 = new jayhorn.solver.princess.PrincessProver();
    princessProver27.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver30 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array31 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr32 = princessProver30.mkOr(proverExpr_array31);
    jayhorn.solver.ProverExpr proverExpr33 = princessProver27.mkOr(proverExpr_array31);
    jayhorn.solver.BoolType boolType35 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str36 = boolType35.toString();
    jayhorn.solver.ProverType[] proverType_array37 = new jayhorn.solver.ProverType[] { boolType35 };
    jayhorn.solver.princess.PrincessProver princessProver38 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array39 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr40 = princessProver38.mkOr(proverExpr_array39);
    jayhorn.solver.ProverFun proverFun41 = princessProver27.mkDefinedFunction("hi!", proverType_array37, proverExpr40);
    jayhorn.solver.ProverExpr proverExpr43 = princessProver27.mkLiteral((-1));
    jayhorn.solver.ProverExpr proverExpr44 = princessProver23.mkNeg(proverExpr43);
    jayhorn.solver.z3.Z3HornExpr z3HornExpr45 = new jayhorn.solver.z3.Z3HornExpr(proverExpr19, proverExpr_array21, proverExpr44);
    jayhorn.solver.ProverExpr proverExpr46 = z3HornExpr45.getHead();
    jayhorn.solver.ProverExpr proverExpr47 = z3HornExpr45.getHead();
    // The following exception was thrown during execution in test generation
    try {
      jayhorn.solver.ProverFun proverFun49 = z3HornExpr45.getBodyFun(10);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Bool"+ "'", str10.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Bool"+ "'", str36.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr47);

  }

  @Test
  public void test056() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test056"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver1 = new jayhorn.solver.princess.PrincessProver();
    princessProver1.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver4 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array5 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr6 = princessProver4.mkOr(proverExpr_array5);
    jayhorn.solver.ProverExpr proverExpr7 = princessProver1.mkOr(proverExpr_array5);
    jayhorn.solver.BoolType boolType9 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str10 = boolType9.toString();
    jayhorn.solver.ProverType[] proverType_array11 = new jayhorn.solver.ProverType[] { boolType9 };
    jayhorn.solver.princess.PrincessProver princessProver12 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array13 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr14 = princessProver12.mkOr(proverExpr_array13);
    jayhorn.solver.ProverFun proverFun15 = princessProver1.mkDefinedFunction("hi!", proverType_array11, proverExpr14);
    jayhorn.solver.ProverExpr proverExpr17 = princessProver1.mkLiteral((-1));
    jayhorn.solver.IntType intType18 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr19 = princessProver0.mkAll(proverExpr17, (jayhorn.solver.ProverType)intType18);
    jayhorn.solver.princess.PrincessProver princessProver20 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array21 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr22 = princessProver20.mkOr(proverExpr_array21);
    jayhorn.solver.princess.PrincessProver princessProver23 = new jayhorn.solver.princess.PrincessProver();
    princessProver23.setPartitionNumber((-1));
    princessProver23.reset();
    jayhorn.solver.princess.PrincessProver princessProver27 = new jayhorn.solver.princess.PrincessProver();
    princessProver27.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver30 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array31 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr32 = princessProver30.mkOr(proverExpr_array31);
    jayhorn.solver.ProverExpr proverExpr33 = princessProver27.mkOr(proverExpr_array31);
    jayhorn.solver.BoolType boolType35 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str36 = boolType35.toString();
    jayhorn.solver.ProverType[] proverType_array37 = new jayhorn.solver.ProverType[] { boolType35 };
    jayhorn.solver.princess.PrincessProver princessProver38 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array39 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr40 = princessProver38.mkOr(proverExpr_array39);
    jayhorn.solver.ProverFun proverFun41 = princessProver27.mkDefinedFunction("hi!", proverType_array37, proverExpr40);
    jayhorn.solver.ProverExpr proverExpr43 = princessProver27.mkLiteral((-1));
    jayhorn.solver.ProverExpr proverExpr44 = princessProver23.mkNeg(proverExpr43);
    jayhorn.solver.z3.Z3HornExpr z3HornExpr45 = new jayhorn.solver.z3.Z3HornExpr(proverExpr19, proverExpr_array21, proverExpr44);
    jayhorn.solver.ProverExpr proverExpr46 = z3HornExpr45.getHead();
    // The following exception was thrown during execution in test generation
    try {
      boolean b47 = z3HornExpr45.getBooleanLiteralValue();
      org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.RuntimeException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Bool"+ "'", str10.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Bool"+ "'", str36.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr46);

  }

  @Test
  public void test057() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test057"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver1 = new jayhorn.solver.princess.PrincessProver();
    princessProver1.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver4 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array5 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr6 = princessProver4.mkOr(proverExpr_array5);
    jayhorn.solver.ProverExpr proverExpr7 = princessProver1.mkOr(proverExpr_array5);
    jayhorn.solver.BoolType boolType9 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str10 = boolType9.toString();
    jayhorn.solver.ProverType[] proverType_array11 = new jayhorn.solver.ProverType[] { boolType9 };
    jayhorn.solver.princess.PrincessProver princessProver12 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array13 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr14 = princessProver12.mkOr(proverExpr_array13);
    jayhorn.solver.ProverFun proverFun15 = princessProver1.mkDefinedFunction("hi!", proverType_array11, proverExpr14);
    jayhorn.solver.ProverExpr proverExpr17 = princessProver1.mkLiteral((-1));
    jayhorn.solver.IntType intType18 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr19 = princessProver0.mkAll(proverExpr17, (jayhorn.solver.ProverType)intType18);
    jayhorn.solver.princess.PrincessProver princessProver20 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array21 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr22 = princessProver20.mkOr(proverExpr_array21);
    jayhorn.solver.princess.PrincessProver princessProver23 = new jayhorn.solver.princess.PrincessProver();
    princessProver23.setPartitionNumber((-1));
    princessProver23.reset();
    jayhorn.solver.princess.PrincessProver princessProver27 = new jayhorn.solver.princess.PrincessProver();
    princessProver27.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver30 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array31 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr32 = princessProver30.mkOr(proverExpr_array31);
    jayhorn.solver.ProverExpr proverExpr33 = princessProver27.mkOr(proverExpr_array31);
    jayhorn.solver.BoolType boolType35 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str36 = boolType35.toString();
    jayhorn.solver.ProverType[] proverType_array37 = new jayhorn.solver.ProverType[] { boolType35 };
    jayhorn.solver.princess.PrincessProver princessProver38 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array39 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr40 = princessProver38.mkOr(proverExpr_array39);
    jayhorn.solver.ProverFun proverFun41 = princessProver27.mkDefinedFunction("hi!", proverType_array37, proverExpr40);
    jayhorn.solver.ProverExpr proverExpr43 = princessProver27.mkLiteral((-1));
    jayhorn.solver.ProverExpr proverExpr44 = princessProver23.mkNeg(proverExpr43);
    jayhorn.solver.z3.Z3HornExpr z3HornExpr45 = new jayhorn.solver.z3.Z3HornExpr(proverExpr19, proverExpr_array21, proverExpr44);
    jayhorn.solver.ProverExpr proverExpr46 = z3HornExpr45.getHead();
    jayhorn.solver.ProverExpr proverExpr47 = z3HornExpr45.getHead();
    jayhorn.solver.ProverExpr[] proverExpr_array48 = z3HornExpr45.getBody();
    // The following exception was thrown during execution in test generation
    try {
      jayhorn.solver.ProverFun proverFun50 = z3HornExpr45.getBodyFun(0);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Bool"+ "'", str10.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Bool"+ "'", str36.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array48);

  }

  @Test
  public void test058() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test058"); }


    soottocfg.cfg.Program program0 = new soottocfg.cfg.Program();
    // The following exception was thrown during execution in test generation
    try {
      soottocfg.cfg.Variable variable1 = program0.getExceptionGlobal();
      org.junit.Assert.fail("Expected exception of type com.google.common.base.VerifyException");
    } catch (com.google.common.base.VerifyException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("com.google.common.base.VerifyException")) {
        org.junit.Assert.fail("Expected exception of type com.google.common.base.VerifyException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test059() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test059"); }


    soottocfg.cfg.Program program0 = new soottocfg.cfg.Program();
    java.util.Map map1 = program0.getModifiedGlobals();
    soottocfg.cfg.Variable[] variable_array2 = program0.getGlobalVariables();
    // The following exception was thrown during execution in test generation
    try {
      soottocfg.cfg.Variable variable3 = program0.getExceptionGlobal();
      org.junit.Assert.fail("Expected exception of type com.google.common.base.VerifyException");
    } catch (com.google.common.base.VerifyException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("com.google.common.base.VerifyException")) {
        org.junit.Assert.fail("Expected exception of type com.google.common.base.VerifyException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(variable_array2);

  }

  @Test
  public void test060() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test060"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    princessProver0.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver3 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array4 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr5 = princessProver3.mkOr(proverExpr_array4);
    jayhorn.solver.ProverExpr proverExpr6 = princessProver0.mkOr(proverExpr_array4);
    jayhorn.solver.BoolType boolType8 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str9 = boolType8.toString();
    jayhorn.solver.ProverType[] proverType_array10 = new jayhorn.solver.ProverType[] { boolType8 };
    jayhorn.solver.princess.PrincessProver princessProver11 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array12 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr13 = princessProver11.mkOr(proverExpr_array12);
    jayhorn.solver.ProverFun proverFun14 = princessProver0.mkDefinedFunction("hi!", proverType_array10, proverExpr13);
    princessProver0.setPartitionNumber(10);
    jayhorn.solver.ProverType proverType17 = princessProver0.getBooleanType();
    jayhorn.solver.princess.PrincessProver princessProver18 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver19 = new jayhorn.solver.princess.PrincessProver();
    princessProver19.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver22 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array23 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr24 = princessProver22.mkOr(proverExpr_array23);
    jayhorn.solver.ProverExpr proverExpr25 = princessProver19.mkOr(proverExpr_array23);
    jayhorn.solver.BoolType boolType27 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str28 = boolType27.toString();
    jayhorn.solver.ProverType[] proverType_array29 = new jayhorn.solver.ProverType[] { boolType27 };
    jayhorn.solver.princess.PrincessProver princessProver30 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array31 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr32 = princessProver30.mkOr(proverExpr_array31);
    jayhorn.solver.ProverFun proverFun33 = princessProver19.mkDefinedFunction("hi!", proverType_array29, proverExpr32);
    jayhorn.solver.ProverExpr proverExpr35 = princessProver19.mkLiteral((-1));
    jayhorn.solver.IntType intType36 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr37 = princessProver18.mkAll(proverExpr35, (jayhorn.solver.ProverType)intType36);
    jayhorn.solver.princess.PrincessProver princessProver38 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array39 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr40 = princessProver38.mkOr(proverExpr_array39);
    jayhorn.solver.princess.PrincessProver princessProver41 = new jayhorn.solver.princess.PrincessProver();
    princessProver41.setPartitionNumber((-1));
    princessProver41.reset();
    jayhorn.solver.princess.PrincessProver princessProver45 = new jayhorn.solver.princess.PrincessProver();
    princessProver45.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver48 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array49 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr50 = princessProver48.mkOr(proverExpr_array49);
    jayhorn.solver.ProverExpr proverExpr51 = princessProver45.mkOr(proverExpr_array49);
    jayhorn.solver.BoolType boolType53 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str54 = boolType53.toString();
    jayhorn.solver.ProverType[] proverType_array55 = new jayhorn.solver.ProverType[] { boolType53 };
    jayhorn.solver.princess.PrincessProver princessProver56 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array57 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr58 = princessProver56.mkOr(proverExpr_array57);
    jayhorn.solver.ProverFun proverFun59 = princessProver45.mkDefinedFunction("hi!", proverType_array55, proverExpr58);
    jayhorn.solver.ProverExpr proverExpr61 = princessProver45.mkLiteral((-1));
    jayhorn.solver.ProverExpr proverExpr62 = princessProver41.mkNeg(proverExpr61);
    jayhorn.solver.z3.Z3HornExpr z3HornExpr63 = new jayhorn.solver.z3.Z3HornExpr(proverExpr37, proverExpr_array39, proverExpr62);
    jayhorn.solver.ProverExpr proverExpr64 = z3HornExpr63.getHead();
    jayhorn.solver.ProverExpr proverExpr65 = z3HornExpr63.getHead();
    jayhorn.solver.IntType intType66 = jayhorn.solver.IntType.INSTANCE;
    // The following exception was thrown during execution in test generation
    try {
      jayhorn.solver.ProverExpr proverExpr67 = princessProver0.mkAll((jayhorn.solver.ProverExpr)z3HornExpr63, (jayhorn.solver.ProverType)intType66);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Bool"+ "'", str9.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Bool"+ "'", str28.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "Bool"+ "'", str54.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType66);

  }

  @Test
  public void test061() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test061"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver1 = new jayhorn.solver.princess.PrincessProver();
    princessProver1.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver4 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array5 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr6 = princessProver4.mkOr(proverExpr_array5);
    jayhorn.solver.ProverExpr proverExpr7 = princessProver1.mkOr(proverExpr_array5);
    jayhorn.solver.BoolType boolType9 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str10 = boolType9.toString();
    jayhorn.solver.ProverType[] proverType_array11 = new jayhorn.solver.ProverType[] { boolType9 };
    jayhorn.solver.princess.PrincessProver princessProver12 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array13 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr14 = princessProver12.mkOr(proverExpr_array13);
    jayhorn.solver.ProverFun proverFun15 = princessProver1.mkDefinedFunction("hi!", proverType_array11, proverExpr14);
    jayhorn.solver.ProverExpr proverExpr17 = princessProver1.mkLiteral((-1));
    jayhorn.solver.IntType intType18 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr19 = princessProver0.mkAll(proverExpr17, (jayhorn.solver.ProverType)intType18);
    jayhorn.solver.princess.PrincessProver princessProver20 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array21 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr22 = princessProver20.mkOr(proverExpr_array21);
    jayhorn.solver.princess.PrincessProver princessProver23 = new jayhorn.solver.princess.PrincessProver();
    princessProver23.setPartitionNumber((-1));
    princessProver23.reset();
    jayhorn.solver.princess.PrincessProver princessProver27 = new jayhorn.solver.princess.PrincessProver();
    princessProver27.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver30 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array31 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr32 = princessProver30.mkOr(proverExpr_array31);
    jayhorn.solver.ProverExpr proverExpr33 = princessProver27.mkOr(proverExpr_array31);
    jayhorn.solver.BoolType boolType35 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str36 = boolType35.toString();
    jayhorn.solver.ProverType[] proverType_array37 = new jayhorn.solver.ProverType[] { boolType35 };
    jayhorn.solver.princess.PrincessProver princessProver38 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array39 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr40 = princessProver38.mkOr(proverExpr_array39);
    jayhorn.solver.ProverFun proverFun41 = princessProver27.mkDefinedFunction("hi!", proverType_array37, proverExpr40);
    jayhorn.solver.ProverExpr proverExpr43 = princessProver27.mkLiteral((-1));
    jayhorn.solver.ProverExpr proverExpr44 = princessProver23.mkNeg(proverExpr43);
    jayhorn.solver.z3.Z3HornExpr z3HornExpr45 = new jayhorn.solver.z3.Z3HornExpr(proverExpr19, proverExpr_array21, proverExpr44);
    java.lang.String str46 = z3HornExpr45.toString();
    // The following exception was thrown during execution in test generation
    try {
      java.math.BigInteger bigInteger47 = z3HornExpr45.getIntLiteralValue();
      org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.RuntimeException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Bool"+ "'", str10.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Bool"+ "'", str36.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "\\forall int v0; -1 = 0 <- -1*-1"+ "'", str46.equals("\\forall int v0; -1 = 0 <- -1*-1"));

  }

  @Test
  public void test062() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test062"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver1 = new jayhorn.solver.princess.PrincessProver();
    princessProver1.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver4 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array5 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr6 = princessProver4.mkOr(proverExpr_array5);
    jayhorn.solver.ProverExpr proverExpr7 = princessProver1.mkOr(proverExpr_array5);
    jayhorn.solver.BoolType boolType9 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str10 = boolType9.toString();
    jayhorn.solver.ProverType[] proverType_array11 = new jayhorn.solver.ProverType[] { boolType9 };
    jayhorn.solver.princess.PrincessProver princessProver12 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array13 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr14 = princessProver12.mkOr(proverExpr_array13);
    jayhorn.solver.ProverFun proverFun15 = princessProver1.mkDefinedFunction("hi!", proverType_array11, proverExpr14);
    jayhorn.solver.ProverExpr proverExpr17 = princessProver1.mkLiteral((-1));
    jayhorn.solver.IntType intType18 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr19 = princessProver0.mkAll(proverExpr17, (jayhorn.solver.ProverType)intType18);
    jayhorn.solver.princess.PrincessProver princessProver20 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array21 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr22 = princessProver20.mkOr(proverExpr_array21);
    jayhorn.solver.princess.PrincessProver princessProver23 = new jayhorn.solver.princess.PrincessProver();
    princessProver23.setPartitionNumber((-1));
    princessProver23.reset();
    jayhorn.solver.princess.PrincessProver princessProver27 = new jayhorn.solver.princess.PrincessProver();
    princessProver27.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver30 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array31 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr32 = princessProver30.mkOr(proverExpr_array31);
    jayhorn.solver.ProverExpr proverExpr33 = princessProver27.mkOr(proverExpr_array31);
    jayhorn.solver.BoolType boolType35 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str36 = boolType35.toString();
    jayhorn.solver.ProverType[] proverType_array37 = new jayhorn.solver.ProverType[] { boolType35 };
    jayhorn.solver.princess.PrincessProver princessProver38 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array39 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr40 = princessProver38.mkOr(proverExpr_array39);
    jayhorn.solver.ProverFun proverFun41 = princessProver27.mkDefinedFunction("hi!", proverType_array37, proverExpr40);
    jayhorn.solver.ProverExpr proverExpr43 = princessProver27.mkLiteral((-1));
    jayhorn.solver.ProverExpr proverExpr44 = princessProver23.mkNeg(proverExpr43);
    jayhorn.solver.z3.Z3HornExpr z3HornExpr45 = new jayhorn.solver.z3.Z3HornExpr(proverExpr19, proverExpr_array21, proverExpr44);
    java.lang.String str46 = z3HornExpr45.toString();
    // The following exception was thrown during execution in test generation
    try {
      jayhorn.solver.ProverFun proverFun48 = z3HornExpr45.getBodyFun(0);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Bool"+ "'", str10.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Bool"+ "'", str36.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "\\forall int v0; -1 = 0 <- -1*-1"+ "'", str46.equals("\\forall int v0; -1 = 0 <- -1*-1"));

  }

  @Test
  public void test063() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test063"); }


    soottocfg.cfg.util.Tree tree0 = new soottocfg.cfg.util.Tree();
    jayhorn.solver.Main main1 = new jayhorn.solver.Main();
    jayhorn.solver.princess.PrincessProver princessProver2 = new jayhorn.solver.princess.PrincessProver();
    princessProver2.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver5 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array6 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr7 = princessProver5.mkOr(proverExpr_array6);
    jayhorn.solver.ProverExpr proverExpr8 = princessProver2.mkOr(proverExpr_array6);
    jayhorn.solver.BoolType boolType10 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str11 = boolType10.toString();
    jayhorn.solver.ProverType[] proverType_array12 = new jayhorn.solver.ProverType[] { boolType10 };
    jayhorn.solver.princess.PrincessProver princessProver13 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array14 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr15 = princessProver13.mkOr(proverExpr_array14);
    jayhorn.solver.ProverFun proverFun16 = princessProver2.mkDefinedFunction("hi!", proverType_array12, proverExpr15);
    jayhorn.solver.ProverExpr proverExpr18 = princessProver2.mkLiteral((-1));
    jayhorn.solver.princess.PrincessProver princessProver19 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array20 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr21 = princessProver19.mkOr(proverExpr_array20);
    jayhorn.solver.ProverExpr proverExpr22 = princessProver2.mkAnd(proverExpr_array20);
    jayhorn.solver.ProverType proverType23 = princessProver2.getIntType();
    main1.test02((jayhorn.solver.Prover)princessProver2);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj25 = tree0.getParentOf((java.lang.Object)main1);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Bool"+ "'", str11.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType23);

  }

  @Test
  public void test064() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test064"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    princessProver0.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver3 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array4 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr5 = princessProver3.mkOr(proverExpr_array4);
    jayhorn.solver.ProverExpr proverExpr6 = princessProver0.mkOr(proverExpr_array4);
    jayhorn.solver.BoolType boolType8 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str9 = boolType8.toString();
    jayhorn.solver.ProverType[] proverType_array10 = new jayhorn.solver.ProverType[] { boolType8 };
    jayhorn.solver.princess.PrincessProver princessProver11 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array12 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr13 = princessProver11.mkOr(proverExpr_array12);
    jayhorn.solver.ProverFun proverFun14 = princessProver0.mkDefinedFunction("hi!", proverType_array10, proverExpr13);
    princessProver0.shutdown();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Bool"+ "'", str9.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun14);

  }

  @Test
  public void test065() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test065"); }


    soottocfg.cfg.Program program0 = new soottocfg.cfg.Program();
    org.jgrapht.DirectedGraph directedGraph1 = program0.getCallGraph();
    // The following exception was thrown during execution in test generation
    try {
      java.util.Set set3 = soottocfg.cfg.util.GraphUtil.getBackwardReachableVertices(directedGraph1, (java.lang.Object)"");
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(directedGraph1);

  }

  @Test
  public void test066() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test066"); }


    jayhorn.solver.ArrayType arrayType1 = new jayhorn.solver.ArrayType(10);
    soottocfg.randoop.Javac javac2 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac3 = javac2.debug();
    soottocfg.cfg.util.Tree tree4 = new soottocfg.cfg.util.Tree();
    java.util.Set set5 = tree4.getLeaves();
    soottocfg.randoop.Javac javac6 = javac3.sourcepath((java.util.Collection)set5);
    soottocfg.randoop.Javac javac7 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac8 = javac7.debug();
    soottocfg.cfg.util.Tree tree9 = new soottocfg.cfg.util.Tree();
    java.util.Set set10 = tree9.getLeaves();
    soottocfg.randoop.Javac javac11 = javac8.sourcepath((java.util.Collection)set10);
    soottocfg.randoop.Javac javac12 = javac3.sourcepath((java.util.Collection)set10);
    soottocfg.randoop.Javac javac13 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac14 = javac13.debug();
    soottocfg.cfg.util.Tree tree15 = new soottocfg.cfg.util.Tree();
    java.util.Set set16 = tree15.getLeaves();
    soottocfg.randoop.Javac javac17 = javac14.sourcepath((java.util.Collection)set16);
    boolean b18 = javac14.inDebugMode();
    boolean b19 = javac14.inDebugMode();
    soottocfg.randoop.Classpath classpath20 = new soottocfg.randoop.Classpath();
    soottocfg.randoop.Javac javac21 = javac14.classpath(classpath20);
    soottocfg.randoop.Javac javac22 = javac3.bootClasspath(classpath20);
    java.util.List list23 = javac22.version();
    boolean b24 = arrayType1.equals((java.lang.Object)javac22);
    java.lang.String str25 = arrayType1.toString();
    java.lang.String str26 = arrayType1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Array(10)"+ "'", str25.equals("Array(10)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "Array(10)"+ "'", str26.equals("Array(10)"));

  }

  @Test
  public void test067() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test067"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver1 = new jayhorn.solver.princess.PrincessProver();
    princessProver1.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver4 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array5 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr6 = princessProver4.mkOr(proverExpr_array5);
    jayhorn.solver.ProverExpr proverExpr7 = princessProver1.mkOr(proverExpr_array5);
    jayhorn.solver.BoolType boolType9 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str10 = boolType9.toString();
    jayhorn.solver.ProverType[] proverType_array11 = new jayhorn.solver.ProverType[] { boolType9 };
    jayhorn.solver.princess.PrincessProver princessProver12 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array13 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr14 = princessProver12.mkOr(proverExpr_array13);
    jayhorn.solver.ProverFun proverFun15 = princessProver1.mkDefinedFunction("hi!", proverType_array11, proverExpr14);
    jayhorn.solver.ProverExpr proverExpr17 = princessProver1.mkLiteral((-1));
    jayhorn.solver.IntType intType18 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr19 = princessProver0.mkAll(proverExpr17, (jayhorn.solver.ProverType)intType18);
    jayhorn.solver.princess.PrincessProver princessProver20 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array21 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr22 = princessProver20.mkOr(proverExpr_array21);
    jayhorn.solver.princess.PrincessProver princessProver23 = new jayhorn.solver.princess.PrincessProver();
    princessProver23.setPartitionNumber((-1));
    princessProver23.reset();
    jayhorn.solver.princess.PrincessProver princessProver27 = new jayhorn.solver.princess.PrincessProver();
    princessProver27.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver30 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array31 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr32 = princessProver30.mkOr(proverExpr_array31);
    jayhorn.solver.ProverExpr proverExpr33 = princessProver27.mkOr(proverExpr_array31);
    jayhorn.solver.BoolType boolType35 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str36 = boolType35.toString();
    jayhorn.solver.ProverType[] proverType_array37 = new jayhorn.solver.ProverType[] { boolType35 };
    jayhorn.solver.princess.PrincessProver princessProver38 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array39 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr40 = princessProver38.mkOr(proverExpr_array39);
    jayhorn.solver.ProverFun proverFun41 = princessProver27.mkDefinedFunction("hi!", proverType_array37, proverExpr40);
    jayhorn.solver.ProverExpr proverExpr43 = princessProver27.mkLiteral((-1));
    jayhorn.solver.ProverExpr proverExpr44 = princessProver23.mkNeg(proverExpr43);
    jayhorn.solver.z3.Z3HornExpr z3HornExpr45 = new jayhorn.solver.z3.Z3HornExpr(proverExpr19, proverExpr_array21, proverExpr44);
    java.lang.String str46 = z3HornExpr45.toString();
    // The following exception was thrown during execution in test generation
    try {
      jayhorn.solver.ProverExpr[] proverExpr_array47 = z3HornExpr45.getHeadArgs();
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Bool"+ "'", str10.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Bool"+ "'", str36.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "\\forall int v0; -1 = 0 <- -1*-1"+ "'", str46.equals("\\forall int v0; -1 = 0 <- -1*-1"));

  }

  @Test
  public void test068() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test068"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver1 = new jayhorn.solver.princess.PrincessProver();
    princessProver1.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver4 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array5 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr6 = princessProver4.mkOr(proverExpr_array5);
    jayhorn.solver.ProverExpr proverExpr7 = princessProver1.mkOr(proverExpr_array5);
    jayhorn.solver.BoolType boolType9 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str10 = boolType9.toString();
    jayhorn.solver.ProverType[] proverType_array11 = new jayhorn.solver.ProverType[] { boolType9 };
    jayhorn.solver.princess.PrincessProver princessProver12 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array13 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr14 = princessProver12.mkOr(proverExpr_array13);
    jayhorn.solver.ProverFun proverFun15 = princessProver1.mkDefinedFunction("hi!", proverType_array11, proverExpr14);
    jayhorn.solver.ProverExpr proverExpr17 = princessProver1.mkLiteral((-1));
    jayhorn.solver.IntType intType18 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr19 = princessProver0.mkAll(proverExpr17, (jayhorn.solver.ProverType)intType18);
    jayhorn.solver.princess.PrincessProver princessProver20 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array21 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr22 = princessProver20.mkOr(proverExpr_array21);
    jayhorn.solver.princess.PrincessProver princessProver23 = new jayhorn.solver.princess.PrincessProver();
    princessProver23.setPartitionNumber((-1));
    princessProver23.reset();
    jayhorn.solver.princess.PrincessProver princessProver27 = new jayhorn.solver.princess.PrincessProver();
    princessProver27.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver30 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array31 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr32 = princessProver30.mkOr(proverExpr_array31);
    jayhorn.solver.ProverExpr proverExpr33 = princessProver27.mkOr(proverExpr_array31);
    jayhorn.solver.BoolType boolType35 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str36 = boolType35.toString();
    jayhorn.solver.ProverType[] proverType_array37 = new jayhorn.solver.ProverType[] { boolType35 };
    jayhorn.solver.princess.PrincessProver princessProver38 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array39 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr40 = princessProver38.mkOr(proverExpr_array39);
    jayhorn.solver.ProverFun proverFun41 = princessProver27.mkDefinedFunction("hi!", proverType_array37, proverExpr40);
    jayhorn.solver.ProverExpr proverExpr43 = princessProver27.mkLiteral((-1));
    jayhorn.solver.ProverExpr proverExpr44 = princessProver23.mkNeg(proverExpr43);
    jayhorn.solver.z3.Z3HornExpr z3HornExpr45 = new jayhorn.solver.z3.Z3HornExpr(proverExpr19, proverExpr_array21, proverExpr44);
    // The following exception was thrown during execution in test generation
    try {
      int i46 = z3HornExpr45.getArity();
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Bool"+ "'", str10.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Bool"+ "'", str36.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr44);

  }

  @Test
  public void test069() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test069"); }


    jayhorn.solver.Main main0 = new jayhorn.solver.Main();
    jayhorn.solver.princess.PrincessProverFactory princessProverFactory1 = new jayhorn.solver.princess.PrincessProverFactory();
    jayhorn.solver.Prover prover3 = princessProverFactory1.spawnWithLog("hi!");
    jayhorn.solver.Prover prover5 = princessProverFactory1.spawnWithLog("Bool");
    main0.test02(prover5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(prover3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(prover5);

  }

  @Test
  public void test070() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test070"); }


    soottocfg.cfg.util.Tree tree0 = new soottocfg.cfg.util.Tree();
    java.util.Set set1 = tree0.getLeaves();
    jayhorn.solver.Main main3 = new jayhorn.solver.Main();
    jayhorn.solver.princess.PrincessProver princessProver4 = new jayhorn.solver.princess.PrincessProver();
    princessProver4.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver7 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array8 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr9 = princessProver7.mkOr(proverExpr_array8);
    jayhorn.solver.ProverExpr proverExpr10 = princessProver4.mkOr(proverExpr_array8);
    jayhorn.solver.BoolType boolType12 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str13 = boolType12.toString();
    jayhorn.solver.ProverType[] proverType_array14 = new jayhorn.solver.ProverType[] { boolType12 };
    jayhorn.solver.princess.PrincessProver princessProver15 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array16 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr17 = princessProver15.mkOr(proverExpr_array16);
    jayhorn.solver.ProverFun proverFun18 = princessProver4.mkDefinedFunction("hi!", proverType_array14, proverExpr17);
    jayhorn.solver.ProverExpr proverExpr20 = princessProver4.mkLiteral((-1));
    jayhorn.solver.princess.PrincessProver princessProver21 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array22 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr23 = princessProver21.mkOr(proverExpr_array22);
    jayhorn.solver.ProverExpr proverExpr24 = princessProver4.mkAnd(proverExpr_array22);
    jayhorn.solver.ProverType proverType25 = princessProver4.getIntType();
    main3.test02((jayhorn.solver.Prover)princessProver4);
    // The following exception was thrown during execution in test generation
    try {
      boolean b27 = tree0.isDescendant((java.lang.Object)10L, (java.lang.Object)princessProver4);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Bool"+ "'", str13.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType25);

  }

  @Test
  public void test071() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test071"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    princessProver0.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver3 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array4 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr5 = princessProver3.mkOr(proverExpr_array4);
    jayhorn.solver.ProverExpr proverExpr6 = princessProver0.mkOr(proverExpr_array4);
    jayhorn.solver.BoolType boolType8 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str9 = boolType8.toString();
    jayhorn.solver.ProverType[] proverType_array10 = new jayhorn.solver.ProverType[] { boolType8 };
    jayhorn.solver.princess.PrincessProver princessProver11 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array12 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr13 = princessProver11.mkOr(proverExpr_array12);
    jayhorn.solver.ProverFun proverFun14 = princessProver0.mkDefinedFunction("hi!", proverType_array10, proverExpr13);
    jayhorn.Log.debug((java.lang.Object)proverType_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Bool"+ "'", str9.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun14);

  }

  @Test
  public void test072() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test072"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    princessProver0.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver3 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array4 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr5 = princessProver3.mkOr(proverExpr_array4);
    jayhorn.solver.ProverExpr proverExpr6 = princessProver0.mkOr(proverExpr_array4);
    jayhorn.solver.BoolType boolType8 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str9 = boolType8.toString();
    jayhorn.solver.ProverType[] proverType_array10 = new jayhorn.solver.ProverType[] { boolType8 };
    jayhorn.solver.princess.PrincessProver princessProver11 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array12 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr13 = princessProver11.mkOr(proverExpr_array12);
    jayhorn.solver.ProverFun proverFun14 = princessProver0.mkDefinedFunction("hi!", proverType_array10, proverExpr13);
    jayhorn.solver.princess.PrincessProver princessProver16 = new jayhorn.solver.princess.PrincessProver();
    princessProver16.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver19 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array20 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr21 = princessProver19.mkOr(proverExpr_array20);
    jayhorn.solver.ProverExpr proverExpr22 = princessProver16.mkOr(proverExpr_array20);
    jayhorn.solver.BoolType boolType24 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str25 = boolType24.toString();
    jayhorn.solver.ProverType[] proverType_array26 = new jayhorn.solver.ProverType[] { boolType24 };
    jayhorn.solver.princess.PrincessProver princessProver27 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array28 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr29 = princessProver27.mkOr(proverExpr_array28);
    jayhorn.solver.ProverFun proverFun30 = princessProver16.mkDefinedFunction("hi!", proverType_array26, proverExpr29);
    jayhorn.solver.BoolType boolType31 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str32 = boolType31.toString();
    jayhorn.solver.ProverFun proverFun33 = princessProver0.mkUnintFunction("", proverType_array26, (jayhorn.solver.ProverType)boolType31);
    jayhorn.solver.princess.PrincessProver princessProver34 = new jayhorn.solver.princess.PrincessProver();
    princessProver34.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver37 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array38 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr39 = princessProver37.mkOr(proverExpr_array38);
    jayhorn.solver.ProverExpr proverExpr40 = princessProver34.mkOr(proverExpr_array38);
    jayhorn.solver.BoolType boolType42 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str43 = boolType42.toString();
    jayhorn.solver.ProverType[] proverType_array44 = new jayhorn.solver.ProverType[] { boolType42 };
    jayhorn.solver.princess.PrincessProver princessProver45 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array46 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr47 = princessProver45.mkOr(proverExpr_array46);
    jayhorn.solver.ProverFun proverFun48 = princessProver34.mkDefinedFunction("hi!", proverType_array44, proverExpr47);
    jayhorn.solver.ProverExpr proverExpr49 = princessProver0.mkNot(proverExpr47);
    jayhorn.solver.princess.PrincessProver princessProver50 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver51 = new jayhorn.solver.princess.PrincessProver();
    princessProver51.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver54 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array55 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr56 = princessProver54.mkOr(proverExpr_array55);
    jayhorn.solver.ProverExpr proverExpr57 = princessProver51.mkOr(proverExpr_array55);
    jayhorn.solver.BoolType boolType59 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str60 = boolType59.toString();
    jayhorn.solver.ProverType[] proverType_array61 = new jayhorn.solver.ProverType[] { boolType59 };
    jayhorn.solver.princess.PrincessProver princessProver62 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array63 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr64 = princessProver62.mkOr(proverExpr_array63);
    jayhorn.solver.ProverFun proverFun65 = princessProver51.mkDefinedFunction("hi!", proverType_array61, proverExpr64);
    jayhorn.solver.ProverExpr proverExpr67 = princessProver51.mkLiteral((-1));
    jayhorn.solver.IntType intType68 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr69 = princessProver50.mkAll(proverExpr67, (jayhorn.solver.ProverType)intType68);
    jayhorn.solver.princess.PrincessProver princessProver70 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array71 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr72 = princessProver70.mkOr(proverExpr_array71);
    jayhorn.solver.princess.PrincessProver princessProver73 = new jayhorn.solver.princess.PrincessProver();
    princessProver73.setPartitionNumber((-1));
    princessProver73.reset();
    jayhorn.solver.princess.PrincessProver princessProver77 = new jayhorn.solver.princess.PrincessProver();
    princessProver77.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver80 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array81 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr82 = princessProver80.mkOr(proverExpr_array81);
    jayhorn.solver.ProverExpr proverExpr83 = princessProver77.mkOr(proverExpr_array81);
    jayhorn.solver.BoolType boolType85 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str86 = boolType85.toString();
    jayhorn.solver.ProverType[] proverType_array87 = new jayhorn.solver.ProverType[] { boolType85 };
    jayhorn.solver.princess.PrincessProver princessProver88 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array89 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr90 = princessProver88.mkOr(proverExpr_array89);
    jayhorn.solver.ProverFun proverFun91 = princessProver77.mkDefinedFunction("hi!", proverType_array87, proverExpr90);
    jayhorn.solver.ProverExpr proverExpr93 = princessProver77.mkLiteral((-1));
    jayhorn.solver.ProverExpr proverExpr94 = princessProver73.mkNeg(proverExpr93);
    jayhorn.solver.z3.Z3HornExpr z3HornExpr95 = new jayhorn.solver.z3.Z3HornExpr(proverExpr69, proverExpr_array71, proverExpr94);
    jayhorn.solver.ProverExpr proverExpr96 = z3HornExpr95.getHead();
    // The following exception was thrown during execution in test generation
    try {
      jayhorn.solver.ProverExpr proverExpr97 = princessProver0.mkNeg((jayhorn.solver.ProverExpr)z3HornExpr95);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Bool"+ "'", str9.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Bool"+ "'", str25.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Bool"+ "'", str32.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "Bool"+ "'", str43.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "Bool"+ "'", str60.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str86 + "' != '" + "Bool"+ "'", str86.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr96);

  }

  @Test
  public void test073() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test073"); }


    soottocfg.cfg.Program program0 = new soottocfg.cfg.Program();
    org.jgrapht.DirectedGraph directedGraph1 = program0.getCallGraph();
    jayhorn.Options options2 = jayhorn.Options.v();
    // The following exception was thrown during execution in test generation
    try {
      boolean b3 = soottocfg.cfg.util.GraphUtil.isIrreducibleGraphAndHasLoops(directedGraph1, (java.lang.Object)options2);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(directedGraph1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(options2);

  }

  @Test
  public void test074() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test074"); }


    soottocfg.cfg.Program program0 = new soottocfg.cfg.Program();
    org.jgrapht.DirectedGraph directedGraph1 = program0.getCallGraph();
    // The following exception was thrown during execution in test generation
    try {
      soottocfg.cfg.util.CategorizeEdges categorizeEdges3 = new soottocfg.cfg.util.CategorizeEdges(directedGraph1, (java.lang.Object)0);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(directedGraph1);

  }

  @Test
  public void test075() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test075"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    princessProver0.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver3 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array4 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr5 = princessProver3.mkOr(proverExpr_array4);
    jayhorn.solver.ProverExpr proverExpr6 = princessProver0.mkOr(proverExpr_array4);
    jayhorn.solver.BoolType boolType8 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str9 = boolType8.toString();
    jayhorn.solver.ProverType[] proverType_array10 = new jayhorn.solver.ProverType[] { boolType8 };
    jayhorn.solver.princess.PrincessProver princessProver11 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array12 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr13 = princessProver11.mkOr(proverExpr_array12);
    jayhorn.solver.ProverFun proverFun14 = princessProver0.mkDefinedFunction("hi!", proverType_array10, proverExpr13);
    princessProver0.setPartitionNumber(10);
    jayhorn.solver.ProverExpr proverExpr18 = princessProver0.mkLiteral(100);
    jayhorn.solver.ProverType proverType19 = princessProver0.getIntType();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Bool"+ "'", str9.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType19);

  }

  @Test
  public void test076() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test076"); }


    soottocfg.cfg.Program program0 = new soottocfg.cfg.Program();
    org.jgrapht.DirectedGraph directedGraph1 = program0.getCallGraph();
    soottocfg.randoop.Javac javac2 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac3 = javac2.debug();
    soottocfg.cfg.util.Tree tree4 = new soottocfg.cfg.util.Tree();
    java.util.Set set5 = tree4.getLeaves();
    soottocfg.randoop.Javac javac6 = javac3.sourcepath((java.util.Collection)set5);
    java.io.File[] file_array7 = new java.io.File[] {  };
    soottocfg.randoop.Classpath classpath8 = soottocfg.randoop.Classpath.of(file_array7);
    soottocfg.randoop.Javac javac9 = javac6.bootClasspath(classpath8);
    jayhorn.solver.princess.PrincessProver princessProver10 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver11 = new jayhorn.solver.princess.PrincessProver();
    princessProver11.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver14 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array15 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr16 = princessProver14.mkOr(proverExpr_array15);
    jayhorn.solver.ProverExpr proverExpr17 = princessProver11.mkOr(proverExpr_array15);
    jayhorn.solver.BoolType boolType19 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str20 = boolType19.toString();
    jayhorn.solver.ProverType[] proverType_array21 = new jayhorn.solver.ProverType[] { boolType19 };
    jayhorn.solver.princess.PrincessProver princessProver22 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array23 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr24 = princessProver22.mkOr(proverExpr_array23);
    jayhorn.solver.ProverFun proverFun25 = princessProver11.mkDefinedFunction("hi!", proverType_array21, proverExpr24);
    jayhorn.solver.ProverExpr proverExpr27 = princessProver11.mkLiteral((-1));
    jayhorn.solver.IntType intType28 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr29 = princessProver10.mkAll(proverExpr27, (jayhorn.solver.ProverType)intType28);
    jayhorn.solver.ProverResult proverResult31 = princessProver10.getResult(10L);
    // The following exception was thrown during execution in test generation
    try {
      java.util.Set set32 = soottocfg.cfg.util.GraphUtil.getVerticesBetween(directedGraph1, (java.lang.Object)javac6, (java.lang.Object)proverResult31);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(directedGraph1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(file_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(classpath8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Bool"+ "'", str20.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverResult31);

  }

  @Test
  public void test077() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test077"); }


    soottocfg.randoop.Javac javac0 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac1 = javac0.debug();
    soottocfg.cfg.util.Tree tree2 = new soottocfg.cfg.util.Tree();
    java.util.Set set3 = tree2.getLeaves();
    soottocfg.randoop.Javac javac4 = javac1.sourcepath((java.util.Collection)set3);
    boolean b5 = javac1.inDebugMode();
    soottocfg.randoop.Javac javac6 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac7 = javac6.debug();
    soottocfg.cfg.util.Tree tree8 = new soottocfg.cfg.util.Tree();
    java.util.Set set9 = tree8.getLeaves();
    soottocfg.randoop.Javac javac10 = javac7.sourcepath((java.util.Collection)set9);
    soottocfg.randoop.Javac javac11 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac12 = javac11.debug();
    soottocfg.cfg.util.Tree tree13 = new soottocfg.cfg.util.Tree();
    java.util.Set set14 = tree13.getLeaves();
    soottocfg.randoop.Javac javac15 = javac12.sourcepath((java.util.Collection)set14);
    soottocfg.randoop.Javac javac16 = javac7.sourcepath((java.util.Collection)set14);
    soottocfg.randoop.Javac javac17 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac18 = javac17.debug();
    soottocfg.cfg.util.Tree tree19 = new soottocfg.cfg.util.Tree();
    java.util.Set set20 = tree19.getLeaves();
    soottocfg.randoop.Javac javac21 = javac18.sourcepath((java.util.Collection)set20);
    boolean b22 = javac18.inDebugMode();
    boolean b23 = javac18.inDebugMode();
    soottocfg.randoop.Classpath classpath24 = new soottocfg.randoop.Classpath();
    soottocfg.randoop.Javac javac25 = javac18.classpath(classpath24);
    soottocfg.randoop.Javac javac26 = javac7.bootClasspath(classpath24);
    soottocfg.randoop.Javac javac27 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac28 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac29 = javac28.debug();
    soottocfg.cfg.util.Tree tree30 = new soottocfg.cfg.util.Tree();
    java.util.Set set31 = tree30.getLeaves();
    soottocfg.randoop.Javac javac32 = javac29.sourcepath((java.util.Collection)set31);
    soottocfg.randoop.Javac javac33 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac34 = javac33.debug();
    soottocfg.cfg.util.Tree tree35 = new soottocfg.cfg.util.Tree();
    java.util.Set set36 = tree35.getLeaves();
    soottocfg.randoop.Javac javac37 = javac34.sourcepath((java.util.Collection)set36);
    soottocfg.randoop.Javac javac38 = javac29.sourcepath((java.util.Collection)set36);
    soottocfg.randoop.Javac javac39 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac40 = javac39.debug();
    soottocfg.cfg.util.Tree tree41 = new soottocfg.cfg.util.Tree();
    java.util.Set set42 = tree41.getLeaves();
    soottocfg.randoop.Javac javac43 = javac40.sourcepath((java.util.Collection)set42);
    boolean b44 = javac40.inDebugMode();
    boolean b45 = javac40.inDebugMode();
    soottocfg.randoop.Classpath classpath46 = new soottocfg.randoop.Classpath();
    soottocfg.randoop.Javac javac47 = javac40.classpath(classpath46);
    soottocfg.randoop.Javac javac48 = javac29.bootClasspath(classpath46);
    java.util.List list49 = javac48.version();
    javac27.log(list49);
    soottocfg.randoop.Javac javac51 = javac26.extraArgs(list49);
    javac1.log(list49);
    soottocfg.randoop.Command command53 = new soottocfg.randoop.Command(list49);
    // The following exception was thrown during execution in test generation
    try {
      java.io.InputStream inputStream54 = command53.getInputStream();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac51);

  }

  @Test
  public void test078() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test078"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    princessProver0.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver3 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array4 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr5 = princessProver3.mkOr(proverExpr_array4);
    jayhorn.solver.ProverExpr proverExpr6 = princessProver0.mkOr(proverExpr_array4);
    jayhorn.solver.BoolType boolType8 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str9 = boolType8.toString();
    jayhorn.solver.ProverType[] proverType_array10 = new jayhorn.solver.ProverType[] { boolType8 };
    jayhorn.solver.princess.PrincessProver princessProver11 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array12 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr13 = princessProver11.mkOr(proverExpr_array12);
    jayhorn.solver.ProverFun proverFun14 = princessProver0.mkDefinedFunction("hi!", proverType_array10, proverExpr13);
    jayhorn.solver.ProverExpr proverExpr16 = princessProver0.mkLiteral((-1));
    jayhorn.solver.princess.PrincessProver princessProver17 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array18 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr19 = princessProver17.mkOr(proverExpr_array18);
    jayhorn.solver.ProverExpr proverExpr20 = princessProver0.mkAnd(proverExpr_array18);
    java.lang.String[] str_array21 = soottocfg.randoop.Strings.generateArrayOfStrings((java.lang.Object[])proverExpr_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Bool"+ "'", str9.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);

  }

  @Test
  public void test079() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test079"); }


    soottocfg.cfg.Program program0 = new soottocfg.cfg.Program();
    org.jgrapht.DirectedGraph directedGraph1 = program0.getCallGraph();
    jayhorn.solver.princess.PrincessProver princessProver2 = new jayhorn.solver.princess.PrincessProver();
    princessProver2.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver5 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array6 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr7 = princessProver5.mkOr(proverExpr_array6);
    jayhorn.solver.ProverExpr proverExpr8 = princessProver2.mkOr(proverExpr_array6);
    jayhorn.solver.princess.PrincessProver princessProver9 = new jayhorn.solver.princess.PrincessProver();
    princessProver9.setPartitionNumber((-1));
    princessProver9.reset();
    jayhorn.solver.princess.PrincessProver princessProver13 = new jayhorn.solver.princess.PrincessProver();
    princessProver13.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver16 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array17 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr18 = princessProver16.mkOr(proverExpr_array17);
    jayhorn.solver.ProverExpr proverExpr19 = princessProver13.mkOr(proverExpr_array17);
    jayhorn.solver.princess.PrincessProver princessProver20 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver21 = new jayhorn.solver.princess.PrincessProver();
    princessProver21.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver24 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array25 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr26 = princessProver24.mkOr(proverExpr_array25);
    jayhorn.solver.ProverExpr proverExpr27 = princessProver21.mkOr(proverExpr_array25);
    jayhorn.solver.BoolType boolType29 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str30 = boolType29.toString();
    jayhorn.solver.ProverType[] proverType_array31 = new jayhorn.solver.ProverType[] { boolType29 };
    jayhorn.solver.princess.PrincessProver princessProver32 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array33 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr34 = princessProver32.mkOr(proverExpr_array33);
    jayhorn.solver.ProverFun proverFun35 = princessProver21.mkDefinedFunction("hi!", proverType_array31, proverExpr34);
    jayhorn.solver.ProverExpr proverExpr37 = princessProver21.mkLiteral((-1));
    jayhorn.solver.IntType intType38 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr39 = princessProver20.mkAll(proverExpr37, (jayhorn.solver.ProverType)intType38);
    jayhorn.solver.ProverExpr proverExpr40 = princessProver9.mkAnd(proverExpr19, proverExpr39);
    jayhorn.solver.princess.PrincessProver princessProver41 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array42 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr43 = princessProver41.mkOr(proverExpr_array42);
    jayhorn.solver.princess.PrincessProver princessProver44 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array45 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr46 = princessProver44.mkOr(proverExpr_array45);
    jayhorn.solver.BoolType boolType48 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str49 = boolType48.toString();
    jayhorn.solver.ProverExpr proverExpr50 = princessProver44.mkHornVariable("hi!", (jayhorn.solver.ProverType)boolType48);
    jayhorn.solver.princess.PrincessProver princessProver51 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver52 = new jayhorn.solver.princess.PrincessProver();
    princessProver52.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver55 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array56 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr57 = princessProver55.mkOr(proverExpr_array56);
    jayhorn.solver.ProverExpr proverExpr58 = princessProver52.mkOr(proverExpr_array56);
    jayhorn.solver.BoolType boolType60 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str61 = boolType60.toString();
    jayhorn.solver.ProverType[] proverType_array62 = new jayhorn.solver.ProverType[] { boolType60 };
    jayhorn.solver.princess.PrincessProver princessProver63 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array64 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr65 = princessProver63.mkOr(proverExpr_array64);
    jayhorn.solver.ProverFun proverFun66 = princessProver52.mkDefinedFunction("hi!", proverType_array62, proverExpr65);
    jayhorn.solver.ProverExpr proverExpr68 = princessProver52.mkLiteral((-1));
    jayhorn.solver.IntType intType69 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr70 = princessProver51.mkAll(proverExpr68, (jayhorn.solver.ProverType)intType69);
    jayhorn.solver.princess.PrincessProver princessProver72 = new jayhorn.solver.princess.PrincessProver();
    princessProver72.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver75 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array76 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr77 = princessProver75.mkOr(proverExpr_array76);
    jayhorn.solver.ProverExpr proverExpr78 = princessProver72.mkOr(proverExpr_array76);
    jayhorn.solver.BoolType boolType80 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str81 = boolType80.toString();
    jayhorn.solver.ProverType[] proverType_array82 = new jayhorn.solver.ProverType[] { boolType80 };
    jayhorn.solver.princess.PrincessProver princessProver83 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array84 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr85 = princessProver83.mkOr(proverExpr_array84);
    jayhorn.solver.ProverFun proverFun86 = princessProver72.mkDefinedFunction("hi!", proverType_array82, proverExpr85);
    jayhorn.solver.princess.PrincessProver princessProver87 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array88 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr89 = princessProver87.mkOr(proverExpr_array88);
    jayhorn.solver.ProverFun proverFun90 = princessProver51.mkDefinedFunction("hi!", proverType_array82, proverExpr89);
    jayhorn.solver.ProverExpr proverExpr91 = princessProver41.mkAnd(proverExpr50, proverExpr89);
    jayhorn.solver.ProverExpr proverExpr92 = princessProver2.mkAnd(proverExpr19, proverExpr50);
    // The following exception was thrown during execution in test generation
    try {
      soottocfg.cfg.util.Dominators dominators93 = new soottocfg.cfg.util.Dominators(directedGraph1, (java.lang.Object)proverExpr19);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(directedGraph1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "Bool"+ "'", str30.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "Bool"+ "'", str49.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "Bool"+ "'", str61.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str81 + "' != '" + "Bool"+ "'", str81.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr92);

  }

  @Test
  public void test080() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test080"); }


    soottocfg.randoop.Javac javac0 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac1 = javac0.debug();
    soottocfg.cfg.util.Tree tree2 = new soottocfg.cfg.util.Tree();
    java.util.Set set3 = tree2.getLeaves();
    soottocfg.randoop.Javac javac4 = javac1.sourcepath((java.util.Collection)set3);
    soottocfg.randoop.Javac javac5 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac6 = javac5.debug();
    soottocfg.cfg.util.Tree tree7 = new soottocfg.cfg.util.Tree();
    java.util.Set set8 = tree7.getLeaves();
    soottocfg.randoop.Javac javac9 = javac6.sourcepath((java.util.Collection)set8);
    soottocfg.randoop.Javac javac10 = javac1.sourcepath((java.util.Collection)set8);
    soottocfg.randoop.Javac javac11 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac12 = javac11.debug();
    soottocfg.cfg.util.Tree tree13 = new soottocfg.cfg.util.Tree();
    java.util.Set set14 = tree13.getLeaves();
    soottocfg.randoop.Javac javac15 = javac12.sourcepath((java.util.Collection)set14);
    boolean b16 = javac12.inDebugMode();
    boolean b17 = javac12.inDebugMode();
    soottocfg.randoop.Classpath classpath18 = new soottocfg.randoop.Classpath();
    soottocfg.randoop.Javac javac19 = javac12.classpath(classpath18);
    soottocfg.randoop.Javac javac20 = javac1.bootClasspath(classpath18);
    java.util.List list21 = javac20.version();
    boolean b22 = javac20.inDebugMode();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);

  }

  @Test
  public void test081() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test081"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver1 = new jayhorn.solver.princess.PrincessProver();
    princessProver1.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver4 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array5 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr6 = princessProver4.mkOr(proverExpr_array5);
    jayhorn.solver.ProverExpr proverExpr7 = princessProver1.mkOr(proverExpr_array5);
    jayhorn.solver.BoolType boolType9 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str10 = boolType9.toString();
    jayhorn.solver.ProverType[] proverType_array11 = new jayhorn.solver.ProverType[] { boolType9 };
    jayhorn.solver.princess.PrincessProver princessProver12 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array13 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr14 = princessProver12.mkOr(proverExpr_array13);
    jayhorn.solver.ProverFun proverFun15 = princessProver1.mkDefinedFunction("hi!", proverType_array11, proverExpr14);
    jayhorn.solver.ProverExpr proverExpr17 = princessProver1.mkLiteral((-1));
    jayhorn.solver.IntType intType18 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr19 = princessProver0.mkAll(proverExpr17, (jayhorn.solver.ProverType)intType18);
    jayhorn.solver.princess.PrincessProver princessProver20 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array21 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr22 = princessProver20.mkOr(proverExpr_array21);
    jayhorn.solver.princess.PrincessProver princessProver23 = new jayhorn.solver.princess.PrincessProver();
    princessProver23.setPartitionNumber((-1));
    princessProver23.reset();
    jayhorn.solver.princess.PrincessProver princessProver27 = new jayhorn.solver.princess.PrincessProver();
    princessProver27.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver30 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array31 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr32 = princessProver30.mkOr(proverExpr_array31);
    jayhorn.solver.ProverExpr proverExpr33 = princessProver27.mkOr(proverExpr_array31);
    jayhorn.solver.BoolType boolType35 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str36 = boolType35.toString();
    jayhorn.solver.ProverType[] proverType_array37 = new jayhorn.solver.ProverType[] { boolType35 };
    jayhorn.solver.princess.PrincessProver princessProver38 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array39 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr40 = princessProver38.mkOr(proverExpr_array39);
    jayhorn.solver.ProverFun proverFun41 = princessProver27.mkDefinedFunction("hi!", proverType_array37, proverExpr40);
    jayhorn.solver.ProverExpr proverExpr43 = princessProver27.mkLiteral((-1));
    jayhorn.solver.ProverExpr proverExpr44 = princessProver23.mkNeg(proverExpr43);
    jayhorn.solver.z3.Z3HornExpr z3HornExpr45 = new jayhorn.solver.z3.Z3HornExpr(proverExpr19, proverExpr_array21, proverExpr44);
    // The following exception was thrown during execution in test generation
    try {
      jayhorn.solver.ProverExpr[] proverExpr_array46 = z3HornExpr45.getHeadArgs();
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Bool"+ "'", str10.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Bool"+ "'", str36.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr44);

  }

  @Test
  public void test082() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test082"); }


    soottocfg.randoop.Javac javac0 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac1 = javac0.debug();
    soottocfg.cfg.util.Tree tree2 = new soottocfg.cfg.util.Tree();
    java.util.Set set3 = tree2.getLeaves();
    soottocfg.randoop.Javac javac4 = javac1.sourcepath((java.util.Collection)set3);
    boolean b5 = javac1.inDebugMode();
    boolean b6 = javac1.inDebugMode();
    soottocfg.randoop.Javac javac7 = javac1.debug();
    soottocfg.randoop.Javac javac8 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac9 = javac8.debug();
    soottocfg.cfg.util.Tree tree10 = new soottocfg.cfg.util.Tree();
    java.util.Set set11 = tree10.getLeaves();
    soottocfg.randoop.Javac javac12 = javac9.sourcepath((java.util.Collection)set11);
    boolean b13 = javac9.inDebugMode();
    boolean b14 = javac9.inDebugMode();
    soottocfg.randoop.Classpath classpath15 = new soottocfg.randoop.Classpath();
    soottocfg.randoop.Javac javac16 = javac9.classpath(classpath15);
    java.io.File[] file_array17 = new java.io.File[] {  };
    soottocfg.randoop.Classpath classpath18 = soottocfg.randoop.Classpath.of(file_array17);
    classpath15.addAll(file_array17);
    soottocfg.randoop.Javac javac20 = javac7.sourcepath(file_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(file_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(classpath18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac20);

  }

  @Test
  public void test083() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test083"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    princessProver0.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver3 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array4 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr5 = princessProver3.mkOr(proverExpr_array4);
    jayhorn.solver.ProverExpr proverExpr6 = princessProver0.mkOr(proverExpr_array4);
    jayhorn.solver.BoolType boolType8 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str9 = boolType8.toString();
    jayhorn.solver.ProverType[] proverType_array10 = new jayhorn.solver.ProverType[] { boolType8 };
    jayhorn.solver.princess.PrincessProver princessProver11 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array12 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr13 = princessProver11.mkOr(proverExpr_array12);
    jayhorn.solver.ProverFun proverFun14 = princessProver0.mkDefinedFunction("hi!", proverType_array10, proverExpr13);
    princessProver0.setPartitionNumber(10);
    jayhorn.solver.ProverResult proverResult18 = princessProver0.checkSat(false);
    jayhorn.solver.princess.PrincessProver princessProver20 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array21 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr22 = princessProver20.mkOr(proverExpr_array21);
    jayhorn.solver.BoolType boolType24 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str25 = boolType24.toString();
    jayhorn.solver.ProverExpr proverExpr26 = princessProver20.mkHornVariable("hi!", (jayhorn.solver.ProverType)boolType24);
    jayhorn.util.SimplCfgToProver simplCfgToProver27 = new jayhorn.util.SimplCfgToProver((jayhorn.solver.Prover)princessProver20);
    jayhorn.solver.princess.PrincessProver princessProver29 = new jayhorn.solver.princess.PrincessProver();
    princessProver29.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver32 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array33 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr34 = princessProver32.mkOr(proverExpr_array33);
    jayhorn.solver.ProverExpr proverExpr35 = princessProver29.mkOr(proverExpr_array33);
    jayhorn.solver.BoolType boolType37 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str38 = boolType37.toString();
    jayhorn.solver.ProverType[] proverType_array39 = new jayhorn.solver.ProverType[] { boolType37 };
    jayhorn.solver.princess.PrincessProver princessProver40 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array41 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr42 = princessProver40.mkOr(proverExpr_array41);
    jayhorn.solver.ProverFun proverFun43 = princessProver29.mkDefinedFunction("hi!", proverType_array39, proverExpr42);
    jayhorn.solver.ProverExpr proverExpr45 = princessProver29.mkLiteral((-1));
    jayhorn.solver.princess.PrincessProver princessProver46 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array47 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr48 = princessProver46.mkOr(proverExpr_array47);
    jayhorn.solver.ProverExpr proverExpr49 = princessProver29.mkAnd(proverExpr_array47);
    jayhorn.solver.ProverType proverType50 = princessProver29.getIntType();
    jayhorn.solver.princess.PrincessProver princessProver52 = new jayhorn.solver.princess.PrincessProver();
    princessProver52.setPartitionNumber((-1));
    princessProver52.reset();
    jayhorn.solver.princess.PrincessProver princessProver57 = new jayhorn.solver.princess.PrincessProver();
    princessProver57.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver60 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array61 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr62 = princessProver60.mkOr(proverExpr_array61);
    jayhorn.solver.ProverExpr proverExpr63 = princessProver57.mkOr(proverExpr_array61);
    jayhorn.solver.BoolType boolType65 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str66 = boolType65.toString();
    jayhorn.solver.ProverType[] proverType_array67 = new jayhorn.solver.ProverType[] { boolType65 };
    jayhorn.solver.princess.PrincessProver princessProver68 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array69 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr70 = princessProver68.mkOr(proverExpr_array69);
    jayhorn.solver.ProverFun proverFun71 = princessProver57.mkDefinedFunction("hi!", proverType_array67, proverExpr70);
    jayhorn.solver.princess.PrincessProver princessProver72 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverType proverType73 = princessProver72.getBooleanType();
    jayhorn.solver.ProverFun proverFun74 = princessProver52.mkUnintFunction("Bool", proverType_array67, proverType73);
    jayhorn.solver.ProverType[] proverType_array75 = new jayhorn.solver.ProverType[] { proverType73 };
    jayhorn.solver.ProverFun proverFun76 = princessProver29.mkHornPredicate("Int", proverType_array75);
    jayhorn.solver.ProverFun proverFun77 = princessProver20.mkHornPredicate("\\forall int v0; -1 = 0 <- -1*-1", proverType_array75);
    jayhorn.solver.ArrayType arrayType79 = new jayhorn.solver.ArrayType(10);
    int i80 = arrayType79.arity;
    jayhorn.solver.ProverFun proverFun81 = princessProver0.mkUnintFunction("hi!", proverType_array75, (jayhorn.solver.ProverType)arrayType79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Bool"+ "'", str9.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverResult18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Bool"+ "'", str25.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "Bool"+ "'", str38.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "Bool"+ "'", str66.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i80 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun81);

  }

  @Test
  public void test084() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test084"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    princessProver0.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver3 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array4 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr5 = princessProver3.mkOr(proverExpr_array4);
    jayhorn.solver.ProverExpr proverExpr6 = princessProver0.mkOr(proverExpr_array4);
    jayhorn.solver.princess.PrincessProver princessProver7 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array8 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr9 = princessProver7.mkOr(proverExpr_array8);
    jayhorn.solver.BoolType boolType11 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str12 = boolType11.toString();
    jayhorn.solver.ProverExpr proverExpr13 = princessProver7.mkHornVariable("hi!", (jayhorn.solver.ProverType)boolType11);
    jayhorn.solver.ProverExpr proverExpr14 = princessProver0.mkNeg(proverExpr13);
    jayhorn.solver.ProverExpr proverExpr16 = princessProver0.mkLiteral(100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Bool"+ "'", str12.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr16);

  }

  @Test
  public void test085() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test085"); }


    soottocfg.cfg.util.Tree tree0 = new soottocfg.cfg.util.Tree();
    tree0.addEdge((java.lang.Object)(short)10, (java.lang.Object)10);
    jayhorn.solver.princess.PrincessProverFactory princessProverFactory4 = new jayhorn.solver.princess.PrincessProverFactory();
    jayhorn.solver.Prover prover6 = princessProverFactory4.spawnWithLog("hi!");
    soottocfg.randoop.Javac javac7 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac8 = javac7.debug();
    soottocfg.cfg.util.Tree tree9 = new soottocfg.cfg.util.Tree();
    java.util.Set set10 = tree9.getLeaves();
    soottocfg.randoop.Javac javac11 = javac8.sourcepath((java.util.Collection)set10);
    boolean b12 = javac8.inDebugMode();
    boolean b13 = javac8.inDebugMode();
    // The following exception was thrown during execution in test generation
    try {
      boolean b14 = tree0.isAncestor((java.lang.Object)prover6, (java.lang.Object)b13);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(prover6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);

  }

  @Test
  public void test086() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test086"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver1 = new jayhorn.solver.princess.PrincessProver();
    princessProver1.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver4 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array5 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr6 = princessProver4.mkOr(proverExpr_array5);
    jayhorn.solver.ProverExpr proverExpr7 = princessProver1.mkOr(proverExpr_array5);
    jayhorn.solver.BoolType boolType9 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str10 = boolType9.toString();
    jayhorn.solver.ProverType[] proverType_array11 = new jayhorn.solver.ProverType[] { boolType9 };
    jayhorn.solver.princess.PrincessProver princessProver12 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array13 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr14 = princessProver12.mkOr(proverExpr_array13);
    jayhorn.solver.ProverFun proverFun15 = princessProver1.mkDefinedFunction("hi!", proverType_array11, proverExpr14);
    jayhorn.solver.ProverExpr proverExpr17 = princessProver1.mkLiteral((-1));
    jayhorn.solver.IntType intType18 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr19 = princessProver0.mkAll(proverExpr17, (jayhorn.solver.ProverType)intType18);
    jayhorn.solver.princess.PrincessProver princessProver20 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array21 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr22 = princessProver20.mkOr(proverExpr_array21);
    jayhorn.solver.princess.PrincessProver princessProver23 = new jayhorn.solver.princess.PrincessProver();
    princessProver23.setPartitionNumber((-1));
    princessProver23.reset();
    jayhorn.solver.princess.PrincessProver princessProver27 = new jayhorn.solver.princess.PrincessProver();
    princessProver27.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver30 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array31 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr32 = princessProver30.mkOr(proverExpr_array31);
    jayhorn.solver.ProverExpr proverExpr33 = princessProver27.mkOr(proverExpr_array31);
    jayhorn.solver.BoolType boolType35 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str36 = boolType35.toString();
    jayhorn.solver.ProverType[] proverType_array37 = new jayhorn.solver.ProverType[] { boolType35 };
    jayhorn.solver.princess.PrincessProver princessProver38 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array39 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr40 = princessProver38.mkOr(proverExpr_array39);
    jayhorn.solver.ProverFun proverFun41 = princessProver27.mkDefinedFunction("hi!", proverType_array37, proverExpr40);
    jayhorn.solver.ProverExpr proverExpr43 = princessProver27.mkLiteral((-1));
    jayhorn.solver.ProverExpr proverExpr44 = princessProver23.mkNeg(proverExpr43);
    jayhorn.solver.z3.Z3HornExpr z3HornExpr45 = new jayhorn.solver.z3.Z3HornExpr(proverExpr19, proverExpr_array21, proverExpr44);
    jayhorn.solver.ProverExpr proverExpr46 = z3HornExpr45.getHead();
    jayhorn.solver.ProverExpr proverExpr47 = z3HornExpr45.getHead();
    jayhorn.solver.ProverExpr[] proverExpr_array48 = z3HornExpr45.getBody();
    jayhorn.solver.ProverExpr[] proverExpr_array49 = z3HornExpr45.getBody();
    // The following exception was thrown during execution in test generation
    try {
      jayhorn.solver.ProverFun proverFun51 = z3HornExpr45.getBodyFun(10);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Bool"+ "'", str10.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Bool"+ "'", str36.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array49);

  }

  @Test
  public void test087() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test087"); }


    jayhorn.Options options0 = jayhorn.Options.v();
    boolean b1 = options0.hasScope();
    java.lang.String str2 = options0.getScope();
    jayhorn.Log.error((java.lang.Object)options0);
    boolean b4 = options0.hasScope();
    boolean b5 = options0.hasScope();
    options0.setClasspath("");
    java.lang.String str8 = options0.getAndroidStubPath();
    java.lang.String str9 = options0.getClasspath();
    options0.setClasspath("Int");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(options0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + ""+ "'", str8.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));

  }

  @Test
  public void test088() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test088"); }


    soottocfg.cfg.Program program0 = new soottocfg.cfg.Program();
    org.jgrapht.DirectedGraph directedGraph1 = program0.getCallGraph();
    java.util.Set set2 = soottocfg.cfg.util.GraphUtil.getSinks(directedGraph1);
    soottocfg.randoop.Javac javac3 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac4 = javac3.debug();
    soottocfg.cfg.util.Tree tree5 = new soottocfg.cfg.util.Tree();
    java.util.Set set6 = tree5.getLeaves();
    soottocfg.randoop.Javac javac7 = javac4.sourcepath((java.util.Collection)set6);
    boolean b8 = javac4.inDebugMode();
    boolean b9 = javac4.inDebugMode();
    soottocfg.randoop.Classpath classpath10 = new soottocfg.randoop.Classpath();
    soottocfg.randoop.Javac javac11 = javac4.classpath(classpath10);
    // The following exception was thrown during execution in test generation
    try {
      soottocfg.cfg.util.Dominators dominators12 = new soottocfg.cfg.util.Dominators(directedGraph1, (java.lang.Object)javac4);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(directedGraph1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac11);

  }

  @Test
  public void test089() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test089"); }


    jayhorn.solver.princess.PrincessProverFactory princessProverFactory0 = new jayhorn.solver.princess.PrincessProverFactory();
    jayhorn.solver.Prover prover2 = princessProverFactory0.spawnWithLog("hi!");
    jayhorn.solver.Prover prover4 = princessProverFactory0.spawnWithLog("Bool");
    jayhorn.solver.Prover prover6 = princessProverFactory0.spawnWithLog("Int");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(prover2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(prover4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(prover6);

  }

  @Test
  public void test090() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test090"); }


    soottocfg.cfg.Program program0 = new soottocfg.cfg.Program();
    org.jgrapht.DirectedGraph directedGraph1 = program0.getCallGraph();
    java.util.Set set2 = soottocfg.cfg.util.GraphUtil.getSinks(directedGraph1);
    soottocfg.randoop.Javac javac3 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac4 = javac3.debug();
    soottocfg.cfg.util.Tree tree5 = new soottocfg.cfg.util.Tree();
    java.util.Set set6 = tree5.getLeaves();
    soottocfg.randoop.Javac javac7 = javac4.sourcepath((java.util.Collection)set6);
    soottocfg.randoop.Javac javac8 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac9 = javac8.debug();
    soottocfg.cfg.util.Tree tree10 = new soottocfg.cfg.util.Tree();
    java.util.Set set11 = tree10.getLeaves();
    soottocfg.randoop.Javac javac12 = javac9.sourcepath((java.util.Collection)set11);
    soottocfg.randoop.Javac javac13 = javac4.sourcepath((java.util.Collection)set11);
    java.util.List list14 = javac13.version();
    // The following exception was thrown during execution in test generation
    try {
      soottocfg.cfg.util.BfsIterator bfsIterator15 = new soottocfg.cfg.util.BfsIterator(directedGraph1, (java.lang.Object)javac13);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(directedGraph1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);

  }

  @Test
  public void test091() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test091"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    princessProver0.setConstructProofs(true);
    jayhorn.solver.ProverResult proverResult4 = princessProver0.getResult(true);
    jayhorn.util.SimplCfgToProver simplCfgToProver5 = new jayhorn.util.SimplCfgToProver((jayhorn.solver.Prover)princessProver0);
    jayhorn.solver.princess.PrincessProver princessProver6 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array7 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr8 = princessProver6.mkOr(proverExpr_array7);
    jayhorn.solver.princess.PrincessProver princessProver9 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array10 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr11 = princessProver9.mkOr(proverExpr_array10);
    jayhorn.solver.BoolType boolType13 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str14 = boolType13.toString();
    jayhorn.solver.ProverExpr proverExpr15 = princessProver9.mkHornVariable("hi!", (jayhorn.solver.ProverType)boolType13);
    jayhorn.solver.princess.PrincessProver princessProver16 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver17 = new jayhorn.solver.princess.PrincessProver();
    princessProver17.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver20 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array21 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr22 = princessProver20.mkOr(proverExpr_array21);
    jayhorn.solver.ProverExpr proverExpr23 = princessProver17.mkOr(proverExpr_array21);
    jayhorn.solver.BoolType boolType25 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str26 = boolType25.toString();
    jayhorn.solver.ProverType[] proverType_array27 = new jayhorn.solver.ProverType[] { boolType25 };
    jayhorn.solver.princess.PrincessProver princessProver28 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array29 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr30 = princessProver28.mkOr(proverExpr_array29);
    jayhorn.solver.ProverFun proverFun31 = princessProver17.mkDefinedFunction("hi!", proverType_array27, proverExpr30);
    jayhorn.solver.ProverExpr proverExpr33 = princessProver17.mkLiteral((-1));
    jayhorn.solver.IntType intType34 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr35 = princessProver16.mkAll(proverExpr33, (jayhorn.solver.ProverType)intType34);
    jayhorn.solver.princess.PrincessProver princessProver37 = new jayhorn.solver.princess.PrincessProver();
    princessProver37.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver40 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array41 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr42 = princessProver40.mkOr(proverExpr_array41);
    jayhorn.solver.ProverExpr proverExpr43 = princessProver37.mkOr(proverExpr_array41);
    jayhorn.solver.BoolType boolType45 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str46 = boolType45.toString();
    jayhorn.solver.ProverType[] proverType_array47 = new jayhorn.solver.ProverType[] { boolType45 };
    jayhorn.solver.princess.PrincessProver princessProver48 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array49 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr50 = princessProver48.mkOr(proverExpr_array49);
    jayhorn.solver.ProverFun proverFun51 = princessProver37.mkDefinedFunction("hi!", proverType_array47, proverExpr50);
    jayhorn.solver.princess.PrincessProver princessProver52 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array53 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr54 = princessProver52.mkOr(proverExpr_array53);
    jayhorn.solver.ProverFun proverFun55 = princessProver16.mkDefinedFunction("hi!", proverType_array47, proverExpr54);
    jayhorn.solver.ProverExpr proverExpr56 = princessProver6.mkAnd(proverExpr15, proverExpr54);
    princessProver6.reset();
    jayhorn.solver.princess.PrincessProver princessProver58 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array59 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr60 = princessProver58.mkOr(proverExpr_array59);
    jayhorn.solver.ProverExpr proverExpr61 = princessProver6.mkAnd(proverExpr_array59);
    jayhorn.solver.ProverExpr proverExpr62 = princessProver0.mkAnd(proverExpr_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverResult4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Bool"+ "'", str14.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "Bool"+ "'", str26.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "Bool"+ "'", str46.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr62);

  }

  @Test
  public void test092() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test092"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver1 = new jayhorn.solver.princess.PrincessProver();
    princessProver1.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver4 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array5 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr6 = princessProver4.mkOr(proverExpr_array5);
    jayhorn.solver.ProverExpr proverExpr7 = princessProver1.mkOr(proverExpr_array5);
    jayhorn.solver.BoolType boolType9 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str10 = boolType9.toString();
    jayhorn.solver.ProverType[] proverType_array11 = new jayhorn.solver.ProverType[] { boolType9 };
    jayhorn.solver.princess.PrincessProver princessProver12 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array13 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr14 = princessProver12.mkOr(proverExpr_array13);
    jayhorn.solver.ProverFun proverFun15 = princessProver1.mkDefinedFunction("hi!", proverType_array11, proverExpr14);
    jayhorn.solver.ProverExpr proverExpr17 = princessProver1.mkLiteral((-1));
    jayhorn.solver.IntType intType18 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr19 = princessProver0.mkAll(proverExpr17, (jayhorn.solver.ProverType)intType18);
    java.lang.String str20 = intType18.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Bool"+ "'", str10.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Int"+ "'", str20.equals("Int"));

  }

  @Test
  public void test093() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test093"); }


    soottocfg.randoop.Javac javac1 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac2 = javac1.debug();
    soottocfg.cfg.util.Tree tree3 = new soottocfg.cfg.util.Tree();
    java.util.Set set4 = tree3.getLeaves();
    soottocfg.randoop.Javac javac5 = javac2.sourcepath((java.util.Collection)set4);
    soottocfg.randoop.Javac javac6 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac7 = javac6.debug();
    soottocfg.cfg.util.Tree tree8 = new soottocfg.cfg.util.Tree();
    java.util.Set set9 = tree8.getLeaves();
    soottocfg.randoop.Javac javac10 = javac7.sourcepath((java.util.Collection)set9);
    soottocfg.randoop.Javac javac11 = javac2.sourcepath((java.util.Collection)set9);
    soottocfg.cfg.ClassVariable classVariable12 = new soottocfg.cfg.ClassVariable("\\forall int v0; -1 = 0 <- -1*-1", (java.util.Collection)set9);
    boolean b13 = classVariable12.isConstant();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);

  }

  @Test
  public void test094() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test094"); }


    soottocfg.randoop.Javac javac0 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac1 = javac0.debug();
    soottocfg.cfg.util.Tree tree2 = new soottocfg.cfg.util.Tree();
    java.util.Set set3 = tree2.getLeaves();
    soottocfg.randoop.Javac javac4 = javac1.sourcepath((java.util.Collection)set3);
    boolean b5 = javac4.inDebugMode();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);

  }

  @Test
  public void test095() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test095"); }


    soottocfg.randoop.Javac javac0 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac1 = javac0.debug();
    soottocfg.cfg.util.Tree tree2 = new soottocfg.cfg.util.Tree();
    java.util.Set set3 = tree2.getLeaves();
    soottocfg.randoop.Javac javac4 = javac1.sourcepath((java.util.Collection)set3);
    boolean b5 = javac1.inDebugMode();
    soottocfg.randoop.Javac javac6 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac7 = javac6.debug();
    soottocfg.cfg.util.Tree tree8 = new soottocfg.cfg.util.Tree();
    java.util.Set set9 = tree8.getLeaves();
    soottocfg.randoop.Javac javac10 = javac7.sourcepath((java.util.Collection)set9);
    soottocfg.randoop.Javac javac11 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac12 = javac11.debug();
    soottocfg.cfg.util.Tree tree13 = new soottocfg.cfg.util.Tree();
    java.util.Set set14 = tree13.getLeaves();
    soottocfg.randoop.Javac javac15 = javac12.sourcepath((java.util.Collection)set14);
    soottocfg.randoop.Javac javac16 = javac7.sourcepath((java.util.Collection)set14);
    soottocfg.randoop.Javac javac17 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac18 = javac17.debug();
    soottocfg.cfg.util.Tree tree19 = new soottocfg.cfg.util.Tree();
    java.util.Set set20 = tree19.getLeaves();
    soottocfg.randoop.Javac javac21 = javac18.sourcepath((java.util.Collection)set20);
    boolean b22 = javac18.inDebugMode();
    boolean b23 = javac18.inDebugMode();
    soottocfg.randoop.Classpath classpath24 = new soottocfg.randoop.Classpath();
    soottocfg.randoop.Javac javac25 = javac18.classpath(classpath24);
    soottocfg.randoop.Javac javac26 = javac7.bootClasspath(classpath24);
    soottocfg.randoop.Javac javac27 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac28 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac29 = javac28.debug();
    soottocfg.cfg.util.Tree tree30 = new soottocfg.cfg.util.Tree();
    java.util.Set set31 = tree30.getLeaves();
    soottocfg.randoop.Javac javac32 = javac29.sourcepath((java.util.Collection)set31);
    soottocfg.randoop.Javac javac33 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac34 = javac33.debug();
    soottocfg.cfg.util.Tree tree35 = new soottocfg.cfg.util.Tree();
    java.util.Set set36 = tree35.getLeaves();
    soottocfg.randoop.Javac javac37 = javac34.sourcepath((java.util.Collection)set36);
    soottocfg.randoop.Javac javac38 = javac29.sourcepath((java.util.Collection)set36);
    soottocfg.randoop.Javac javac39 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac40 = javac39.debug();
    soottocfg.cfg.util.Tree tree41 = new soottocfg.cfg.util.Tree();
    java.util.Set set42 = tree41.getLeaves();
    soottocfg.randoop.Javac javac43 = javac40.sourcepath((java.util.Collection)set42);
    boolean b44 = javac40.inDebugMode();
    boolean b45 = javac40.inDebugMode();
    soottocfg.randoop.Classpath classpath46 = new soottocfg.randoop.Classpath();
    soottocfg.randoop.Javac javac47 = javac40.classpath(classpath46);
    soottocfg.randoop.Javac javac48 = javac29.bootClasspath(classpath46);
    java.util.List list49 = javac48.version();
    javac27.log(list49);
    soottocfg.randoop.Javac javac51 = javac26.extraArgs(list49);
    javac1.log(list49);
    soottocfg.randoop.Command command53 = new soottocfg.randoop.Command(list49);
    java.lang.String str54 = command53.toString();
    // The following exception was thrown during execution in test generation
    try {
      java.io.InputStream inputStream55 = command53.getInputStream();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "javac 1.8.0_72"+ "'", str54.equals("javac 1.8.0_72"));

  }

  @Test
  public void test096() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test096"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    princessProver0.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver3 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array4 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr5 = princessProver3.mkOr(proverExpr_array4);
    jayhorn.solver.ProverExpr proverExpr6 = princessProver0.mkOr(proverExpr_array4);
    jayhorn.solver.princess.PrincessProver princessProver7 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array8 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr9 = princessProver7.mkOr(proverExpr_array8);
    jayhorn.solver.BoolType boolType11 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str12 = boolType11.toString();
    jayhorn.solver.ProverExpr proverExpr13 = princessProver7.mkHornVariable("hi!", (jayhorn.solver.ProverType)boolType11);
    jayhorn.solver.ProverExpr proverExpr14 = princessProver0.mkNeg(proverExpr13);
    jayhorn.solver.ArrayType arrayType17 = new jayhorn.solver.ArrayType(10);
    int i18 = arrayType17.arity;
    jayhorn.solver.princess.PrincessProver princessProver19 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array20 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr21 = princessProver19.mkOr(proverExpr_array20);
    jayhorn.solver.princess.PrincessProver princessProver22 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array23 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr24 = princessProver22.mkOr(proverExpr_array23);
    jayhorn.solver.BoolType boolType26 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str27 = boolType26.toString();
    jayhorn.solver.ProverExpr proverExpr28 = princessProver22.mkHornVariable("hi!", (jayhorn.solver.ProverType)boolType26);
    jayhorn.solver.princess.PrincessProver princessProver29 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver30 = new jayhorn.solver.princess.PrincessProver();
    princessProver30.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver33 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array34 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr35 = princessProver33.mkOr(proverExpr_array34);
    jayhorn.solver.ProverExpr proverExpr36 = princessProver30.mkOr(proverExpr_array34);
    jayhorn.solver.BoolType boolType38 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str39 = boolType38.toString();
    jayhorn.solver.ProverType[] proverType_array40 = new jayhorn.solver.ProverType[] { boolType38 };
    jayhorn.solver.princess.PrincessProver princessProver41 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array42 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr43 = princessProver41.mkOr(proverExpr_array42);
    jayhorn.solver.ProverFun proverFun44 = princessProver30.mkDefinedFunction("hi!", proverType_array40, proverExpr43);
    jayhorn.solver.ProverExpr proverExpr46 = princessProver30.mkLiteral((-1));
    jayhorn.solver.IntType intType47 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr48 = princessProver29.mkAll(proverExpr46, (jayhorn.solver.ProverType)intType47);
    jayhorn.solver.princess.PrincessProver princessProver50 = new jayhorn.solver.princess.PrincessProver();
    princessProver50.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver53 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array54 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr55 = princessProver53.mkOr(proverExpr_array54);
    jayhorn.solver.ProverExpr proverExpr56 = princessProver50.mkOr(proverExpr_array54);
    jayhorn.solver.BoolType boolType58 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str59 = boolType58.toString();
    jayhorn.solver.ProverType[] proverType_array60 = new jayhorn.solver.ProverType[] { boolType58 };
    jayhorn.solver.princess.PrincessProver princessProver61 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array62 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr63 = princessProver61.mkOr(proverExpr_array62);
    jayhorn.solver.ProverFun proverFun64 = princessProver50.mkDefinedFunction("hi!", proverType_array60, proverExpr63);
    jayhorn.solver.princess.PrincessProver princessProver65 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array66 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr67 = princessProver65.mkOr(proverExpr_array66);
    jayhorn.solver.ProverFun proverFun68 = princessProver29.mkDefinedFunction("hi!", proverType_array60, proverExpr67);
    jayhorn.solver.ProverExpr proverExpr69 = princessProver19.mkAnd(proverExpr28, proverExpr67);
    princessProver19.reset();
    jayhorn.solver.IntType intType72 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr73 = princessProver19.mkVariable("hi!", (jayhorn.solver.ProverType)intType72);
    boolean b74 = arrayType17.equals((java.lang.Object)proverExpr73);
    jayhorn.solver.ProverType[] proverType_array75 = new jayhorn.solver.ProverType[] { arrayType17 };
    jayhorn.solver.ProverFun proverFun76 = princessProver0.mkHornPredicate("", proverType_array75);
    jayhorn.solver.ProverExpr proverExpr78 = princessProver0.mkLiteral(true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Bool"+ "'", str12.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "Bool"+ "'", str27.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "Bool"+ "'", str39.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "Bool"+ "'", str59.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr78);

  }

  @Test
  public void test097() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test097"); }


    soottocfg.cfg.Program program0 = new soottocfg.cfg.Program();
    org.jgrapht.DirectedGraph directedGraph1 = program0.getCallGraph();
    java.util.Set set2 = soottocfg.cfg.util.GraphUtil.getSinks(directedGraph1);
    jayhorn.Options options3 = jayhorn.Options.v();
    boolean b4 = options3.hasScope();
    java.lang.String str5 = options3.getScope();
    jayhorn.Log.error((java.lang.Object)options3);
    java.lang.String str7 = options3.getJavaInput();
    java.lang.String str8 = options3.getClasspath();
    // The following exception was thrown during execution in test generation
    try {
      org.jgrapht.DirectedGraph directedGraph9 = soottocfg.cfg.util.GraphUtil.computeSubgraphThroughVertex(directedGraph1, (java.lang.Object)str8);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(directedGraph1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(options3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Int"+ "'", str8.equals("Int"));

  }

  @Test
  public void test098() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test098"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    princessProver0.setPartitionNumber((-1));
    princessProver0.reset();
    princessProver0.push();
    jayhorn.solver.ProverType proverType5 = princessProver0.getBooleanType();
    jayhorn.solver.princess.PrincessProver princessProver6 = new jayhorn.solver.princess.PrincessProver();
    princessProver6.setPartitionNumber((-1));
    princessProver6.reset();
    jayhorn.solver.princess.PrincessProver princessProver10 = new jayhorn.solver.princess.PrincessProver();
    princessProver10.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver13 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array14 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr15 = princessProver13.mkOr(proverExpr_array14);
    jayhorn.solver.ProverExpr proverExpr16 = princessProver10.mkOr(proverExpr_array14);
    jayhorn.solver.princess.PrincessProver princessProver17 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver18 = new jayhorn.solver.princess.PrincessProver();
    princessProver18.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver21 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array22 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr23 = princessProver21.mkOr(proverExpr_array22);
    jayhorn.solver.ProverExpr proverExpr24 = princessProver18.mkOr(proverExpr_array22);
    jayhorn.solver.BoolType boolType26 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str27 = boolType26.toString();
    jayhorn.solver.ProverType[] proverType_array28 = new jayhorn.solver.ProverType[] { boolType26 };
    jayhorn.solver.princess.PrincessProver princessProver29 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array30 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr31 = princessProver29.mkOr(proverExpr_array30);
    jayhorn.solver.ProverFun proverFun32 = princessProver18.mkDefinedFunction("hi!", proverType_array28, proverExpr31);
    jayhorn.solver.ProverExpr proverExpr34 = princessProver18.mkLiteral((-1));
    jayhorn.solver.IntType intType35 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr36 = princessProver17.mkAll(proverExpr34, (jayhorn.solver.ProverType)intType35);
    jayhorn.solver.ProverExpr proverExpr37 = princessProver6.mkAnd(proverExpr16, proverExpr36);
    jayhorn.solver.princess.PrincessProver princessProver38 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver39 = new jayhorn.solver.princess.PrincessProver();
    princessProver39.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver42 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array43 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr44 = princessProver42.mkOr(proverExpr_array43);
    jayhorn.solver.ProverExpr proverExpr45 = princessProver39.mkOr(proverExpr_array43);
    jayhorn.solver.BoolType boolType47 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str48 = boolType47.toString();
    jayhorn.solver.ProverType[] proverType_array49 = new jayhorn.solver.ProverType[] { boolType47 };
    jayhorn.solver.princess.PrincessProver princessProver50 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array51 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr52 = princessProver50.mkOr(proverExpr_array51);
    jayhorn.solver.ProverFun proverFun53 = princessProver39.mkDefinedFunction("hi!", proverType_array49, proverExpr52);
    jayhorn.solver.ProverExpr proverExpr55 = princessProver39.mkLiteral((-1));
    jayhorn.solver.IntType intType56 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr57 = princessProver38.mkAll(proverExpr55, (jayhorn.solver.ProverType)intType56);
    jayhorn.solver.princess.PrincessProver princessProver58 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array59 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr60 = princessProver58.mkOr(proverExpr_array59);
    jayhorn.solver.princess.PrincessProver princessProver61 = new jayhorn.solver.princess.PrincessProver();
    princessProver61.setPartitionNumber((-1));
    princessProver61.reset();
    jayhorn.solver.princess.PrincessProver princessProver65 = new jayhorn.solver.princess.PrincessProver();
    princessProver65.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver68 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array69 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr70 = princessProver68.mkOr(proverExpr_array69);
    jayhorn.solver.ProverExpr proverExpr71 = princessProver65.mkOr(proverExpr_array69);
    jayhorn.solver.BoolType boolType73 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str74 = boolType73.toString();
    jayhorn.solver.ProverType[] proverType_array75 = new jayhorn.solver.ProverType[] { boolType73 };
    jayhorn.solver.princess.PrincessProver princessProver76 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array77 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr78 = princessProver76.mkOr(proverExpr_array77);
    jayhorn.solver.ProverFun proverFun79 = princessProver65.mkDefinedFunction("hi!", proverType_array75, proverExpr78);
    jayhorn.solver.ProverExpr proverExpr81 = princessProver65.mkLiteral((-1));
    jayhorn.solver.ProverExpr proverExpr82 = princessProver61.mkNeg(proverExpr81);
    jayhorn.solver.z3.Z3HornExpr z3HornExpr83 = new jayhorn.solver.z3.Z3HornExpr(proverExpr57, proverExpr_array59, proverExpr82);
    // The following exception was thrown during execution in test generation
    try {
      jayhorn.solver.ProverExpr proverExpr84 = princessProver0.mkMinus(proverExpr36, proverExpr82);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "Bool"+ "'", str27.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "Bool"+ "'", str48.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "Bool"+ "'", str74.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr82);

  }

  @Test
  public void test099() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test099"); }


    soottocfg.randoop.Javac javac0 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac1 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac2 = javac1.debug();
    soottocfg.cfg.util.Tree tree3 = new soottocfg.cfg.util.Tree();
    java.util.Set set4 = tree3.getLeaves();
    soottocfg.randoop.Javac javac5 = javac2.sourcepath((java.util.Collection)set4);
    soottocfg.randoop.Javac javac6 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac7 = javac6.debug();
    soottocfg.cfg.util.Tree tree8 = new soottocfg.cfg.util.Tree();
    java.util.Set set9 = tree8.getLeaves();
    soottocfg.randoop.Javac javac10 = javac7.sourcepath((java.util.Collection)set9);
    soottocfg.randoop.Javac javac11 = javac2.sourcepath((java.util.Collection)set9);
    soottocfg.randoop.Javac javac12 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac13 = javac12.debug();
    soottocfg.cfg.util.Tree tree14 = new soottocfg.cfg.util.Tree();
    java.util.Set set15 = tree14.getLeaves();
    soottocfg.randoop.Javac javac16 = javac13.sourcepath((java.util.Collection)set15);
    boolean b17 = javac13.inDebugMode();
    boolean b18 = javac13.inDebugMode();
    soottocfg.randoop.Classpath classpath19 = new soottocfg.randoop.Classpath();
    soottocfg.randoop.Javac javac20 = javac13.classpath(classpath19);
    soottocfg.randoop.Javac javac21 = javac2.bootClasspath(classpath19);
    java.util.List list22 = javac21.version();
    javac0.log(list22);
    soottocfg.randoop.Javac javac24 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac25 = javac24.debug();
    soottocfg.cfg.util.Tree tree26 = new soottocfg.cfg.util.Tree();
    java.util.Set set27 = tree26.getLeaves();
    soottocfg.randoop.Javac javac28 = javac25.sourcepath((java.util.Collection)set27);
    boolean b29 = javac25.inDebugMode();
    boolean b30 = javac25.inDebugMode();
    soottocfg.randoop.Classpath classpath31 = new soottocfg.randoop.Classpath();
    soottocfg.randoop.Javac javac32 = javac25.classpath(classpath31);
    java.io.File[] file_array33 = new java.io.File[] {  };
    soottocfg.randoop.Classpath classpath34 = soottocfg.randoop.Classpath.of(file_array33);
    classpath31.addAll(file_array33);
    // The following exception was thrown during execution in test generation
    try {
      java.util.List list36 = javac0.compile(file_array33);
      org.junit.Assert.fail("Expected exception of type soottocfg.randoop.Command.CommandFailedException");
    } catch (soottocfg.randoop.Command.CommandFailedException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("soottocfg.randoop.Command.CommandFailedException")) {
        org.junit.Assert.fail("Expected exception of type soottocfg.randoop.Command.CommandFailedException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(file_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(classpath34);

  }

  @Test
  public void test100() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test100"); }


    soottocfg.randoop.Javac javac0 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac1 = javac0.debug();
    soottocfg.cfg.util.Tree tree2 = new soottocfg.cfg.util.Tree();
    java.util.Set set3 = tree2.getLeaves();
    soottocfg.randoop.Javac javac4 = javac1.sourcepath((java.util.Collection)set3);
    boolean b5 = javac1.inDebugMode();
    soottocfg.randoop.Javac javac6 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac7 = javac6.debug();
    soottocfg.cfg.util.Tree tree8 = new soottocfg.cfg.util.Tree();
    java.util.Set set9 = tree8.getLeaves();
    soottocfg.randoop.Javac javac10 = javac7.sourcepath((java.util.Collection)set9);
    soottocfg.randoop.Javac javac11 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac12 = javac11.debug();
    soottocfg.cfg.util.Tree tree13 = new soottocfg.cfg.util.Tree();
    java.util.Set set14 = tree13.getLeaves();
    soottocfg.randoop.Javac javac15 = javac12.sourcepath((java.util.Collection)set14);
    soottocfg.randoop.Javac javac16 = javac7.sourcepath((java.util.Collection)set14);
    soottocfg.randoop.Javac javac17 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac18 = javac17.debug();
    soottocfg.cfg.util.Tree tree19 = new soottocfg.cfg.util.Tree();
    java.util.Set set20 = tree19.getLeaves();
    soottocfg.randoop.Javac javac21 = javac18.sourcepath((java.util.Collection)set20);
    boolean b22 = javac18.inDebugMode();
    boolean b23 = javac18.inDebugMode();
    soottocfg.randoop.Classpath classpath24 = new soottocfg.randoop.Classpath();
    soottocfg.randoop.Javac javac25 = javac18.classpath(classpath24);
    soottocfg.randoop.Javac javac26 = javac7.bootClasspath(classpath24);
    soottocfg.randoop.Javac javac27 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac28 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac29 = javac28.debug();
    soottocfg.cfg.util.Tree tree30 = new soottocfg.cfg.util.Tree();
    java.util.Set set31 = tree30.getLeaves();
    soottocfg.randoop.Javac javac32 = javac29.sourcepath((java.util.Collection)set31);
    soottocfg.randoop.Javac javac33 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac34 = javac33.debug();
    soottocfg.cfg.util.Tree tree35 = new soottocfg.cfg.util.Tree();
    java.util.Set set36 = tree35.getLeaves();
    soottocfg.randoop.Javac javac37 = javac34.sourcepath((java.util.Collection)set36);
    soottocfg.randoop.Javac javac38 = javac29.sourcepath((java.util.Collection)set36);
    soottocfg.randoop.Javac javac39 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac40 = javac39.debug();
    soottocfg.cfg.util.Tree tree41 = new soottocfg.cfg.util.Tree();
    java.util.Set set42 = tree41.getLeaves();
    soottocfg.randoop.Javac javac43 = javac40.sourcepath((java.util.Collection)set42);
    boolean b44 = javac40.inDebugMode();
    boolean b45 = javac40.inDebugMode();
    soottocfg.randoop.Classpath classpath46 = new soottocfg.randoop.Classpath();
    soottocfg.randoop.Javac javac47 = javac40.classpath(classpath46);
    soottocfg.randoop.Javac javac48 = javac29.bootClasspath(classpath46);
    java.util.List list49 = javac48.version();
    javac27.log(list49);
    soottocfg.randoop.Javac javac51 = javac26.extraArgs(list49);
    javac1.log(list49);
    soottocfg.randoop.Command command53 = new soottocfg.randoop.Command(list49);
    // The following exception was thrown during execution in test generation
    try {
      java.util.List list54 = command53.execute();
      org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.RuntimeException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac51);

  }

  @Test
  public void test101() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test101"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    princessProver0.setPartitionNumber((-1));
    princessProver0.reset();
    princessProver0.push();
    jayhorn.solver.princess.PrincessProver princessProver5 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array6 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr7 = princessProver5.mkOr(proverExpr_array6);
    jayhorn.solver.princess.PrincessProver princessProver8 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array9 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr10 = princessProver8.mkOr(proverExpr_array9);
    jayhorn.solver.BoolType boolType12 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str13 = boolType12.toString();
    jayhorn.solver.ProverExpr proverExpr14 = princessProver8.mkHornVariable("hi!", (jayhorn.solver.ProverType)boolType12);
    jayhorn.solver.princess.PrincessProver princessProver15 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver16 = new jayhorn.solver.princess.PrincessProver();
    princessProver16.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver19 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array20 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr21 = princessProver19.mkOr(proverExpr_array20);
    jayhorn.solver.ProverExpr proverExpr22 = princessProver16.mkOr(proverExpr_array20);
    jayhorn.solver.BoolType boolType24 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str25 = boolType24.toString();
    jayhorn.solver.ProverType[] proverType_array26 = new jayhorn.solver.ProverType[] { boolType24 };
    jayhorn.solver.princess.PrincessProver princessProver27 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array28 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr29 = princessProver27.mkOr(proverExpr_array28);
    jayhorn.solver.ProverFun proverFun30 = princessProver16.mkDefinedFunction("hi!", proverType_array26, proverExpr29);
    jayhorn.solver.ProverExpr proverExpr32 = princessProver16.mkLiteral((-1));
    jayhorn.solver.IntType intType33 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr34 = princessProver15.mkAll(proverExpr32, (jayhorn.solver.ProverType)intType33);
    jayhorn.solver.princess.PrincessProver princessProver36 = new jayhorn.solver.princess.PrincessProver();
    princessProver36.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver39 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array40 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr41 = princessProver39.mkOr(proverExpr_array40);
    jayhorn.solver.ProverExpr proverExpr42 = princessProver36.mkOr(proverExpr_array40);
    jayhorn.solver.BoolType boolType44 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str45 = boolType44.toString();
    jayhorn.solver.ProverType[] proverType_array46 = new jayhorn.solver.ProverType[] { boolType44 };
    jayhorn.solver.princess.PrincessProver princessProver47 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array48 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr49 = princessProver47.mkOr(proverExpr_array48);
    jayhorn.solver.ProverFun proverFun50 = princessProver36.mkDefinedFunction("hi!", proverType_array46, proverExpr49);
    jayhorn.solver.princess.PrincessProver princessProver51 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array52 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr53 = princessProver51.mkOr(proverExpr_array52);
    jayhorn.solver.ProverFun proverFun54 = princessProver15.mkDefinedFunction("hi!", proverType_array46, proverExpr53);
    jayhorn.solver.ProverExpr proverExpr55 = princessProver5.mkAnd(proverExpr14, proverExpr53);
    jayhorn.solver.princess.PrincessProver princessProver56 = new jayhorn.solver.princess.PrincessProver();
    princessProver56.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver59 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array60 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr61 = princessProver59.mkOr(proverExpr_array60);
    jayhorn.solver.ProverExpr proverExpr62 = princessProver56.mkOr(proverExpr_array60);
    jayhorn.solver.BoolType boolType64 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str65 = boolType64.toString();
    jayhorn.solver.ProverType[] proverType_array66 = new jayhorn.solver.ProverType[] { boolType64 };
    jayhorn.solver.princess.PrincessProver princessProver67 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array68 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr69 = princessProver67.mkOr(proverExpr_array68);
    jayhorn.solver.ProverFun proverFun70 = princessProver56.mkDefinedFunction("hi!", proverType_array66, proverExpr69);
    jayhorn.solver.ProverExpr proverExpr72 = princessProver56.mkLiteral((-1));
    jayhorn.solver.princess.PrincessProver princessProver73 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array74 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr75 = princessProver73.mkOr(proverExpr_array74);
    jayhorn.solver.ProverExpr proverExpr76 = princessProver56.mkAnd(proverExpr_array74);
    // The following exception was thrown during execution in test generation
    try {
      jayhorn.solver.ProverExpr proverExpr77 = princessProver0.mkSelect(proverExpr55, proverExpr_array74);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Bool"+ "'", str13.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Bool"+ "'", str25.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "Bool"+ "'", str45.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "Bool"+ "'", str65.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr76);

  }

  @Test
  public void test102() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test102"); }


    soottocfg.cfg.SourceLocation sourceLocation2 = new soottocfg.cfg.SourceLocation("Bool", 10);

  }

  @Test
  public void test103() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test103"); }


    soottocfg.randoop.Javac javac0 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac1 = javac0.debug();
    soottocfg.cfg.util.Tree tree2 = new soottocfg.cfg.util.Tree();
    java.util.Set set3 = tree2.getLeaves();
    soottocfg.randoop.Javac javac4 = javac1.sourcepath((java.util.Collection)set3);
    java.io.File[] file_array5 = new java.io.File[] {  };
    soottocfg.randoop.Javac javac6 = javac4.sourcepath(file_array5);
    soottocfg.randoop.Javac javac7 = javac4.debug();
    boolean b8 = javac7.inDebugMode();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(file_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);

  }

  @Test
  public void test104() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test104"); }


    soottocfg.cfg.Program program0 = new soottocfg.cfg.Program();
    org.jgrapht.DirectedGraph directedGraph1 = program0.getCallGraph();
    jayhorn.solver.princess.PrincessProver princessProver2 = new jayhorn.solver.princess.PrincessProver();
    princessProver2.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver5 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array6 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr7 = princessProver5.mkOr(proverExpr_array6);
    jayhorn.solver.ProverExpr proverExpr8 = princessProver2.mkOr(proverExpr_array6);
    jayhorn.solver.BoolType boolType10 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str11 = boolType10.toString();
    jayhorn.solver.ProverType[] proverType_array12 = new jayhorn.solver.ProverType[] { boolType10 };
    jayhorn.solver.princess.PrincessProver princessProver13 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array14 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr15 = princessProver13.mkOr(proverExpr_array14);
    jayhorn.solver.ProverFun proverFun16 = princessProver2.mkDefinedFunction("hi!", proverType_array12, proverExpr15);
    jayhorn.solver.ProverExpr proverExpr18 = princessProver2.mkLiteral((-1));
    jayhorn.solver.princess.PrincessProver princessProver19 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array20 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr21 = princessProver19.mkOr(proverExpr_array20);
    jayhorn.solver.ProverExpr proverExpr22 = princessProver2.mkAnd(proverExpr_array20);
    // The following exception was thrown during execution in test generation
    try {
      java.util.Set set23 = soottocfg.cfg.util.GraphUtil.getBackwardReachableVertices(directedGraph1, (java.lang.Object)proverExpr22);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(directedGraph1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Bool"+ "'", str11.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr22);

  }

  @Test
  public void test105() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test105"); }


    soottocfg.cfg.Program program0 = new soottocfg.cfg.Program();
    org.jgrapht.DirectedGraph directedGraph1 = program0.getCallGraph();
    soottocfg.randoop.Javac javac2 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac3 = javac2.debug();
    soottocfg.cfg.util.Tree tree4 = new soottocfg.cfg.util.Tree();
    java.util.Set set5 = tree4.getLeaves();
    soottocfg.randoop.Javac javac6 = javac3.sourcepath((java.util.Collection)set5);
    boolean b7 = javac3.inDebugMode();
    boolean b8 = javac3.inDebugMode();
    soottocfg.randoop.Javac javac9 = javac3.debug();
    soottocfg.randoop.Javac javac10 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac11 = javac10.debug();
    soottocfg.cfg.util.Tree tree12 = new soottocfg.cfg.util.Tree();
    java.util.Set set13 = tree12.getLeaves();
    soottocfg.randoop.Javac javac14 = javac11.sourcepath((java.util.Collection)set13);
    soottocfg.randoop.Javac javac15 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac16 = javac15.debug();
    soottocfg.cfg.util.Tree tree17 = new soottocfg.cfg.util.Tree();
    java.util.Set set18 = tree17.getLeaves();
    soottocfg.randoop.Javac javac19 = javac16.sourcepath((java.util.Collection)set18);
    soottocfg.randoop.Javac javac20 = javac11.sourcepath((java.util.Collection)set18);
    java.lang.String[] str_array21 = soottocfg.randoop.Strings.generateArrayOfStrings((java.util.Collection)set18);
    soottocfg.randoop.Javac javac22 = javac3.sourcepath((java.util.Collection)set18);
    // The following exception was thrown during execution in test generation
    try {
      java.util.Set set23 = soottocfg.cfg.util.GraphUtil.getBackwardReachableVertices(directedGraph1, (java.lang.Object)javac3);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(directedGraph1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac22);

  }

  @Test
  public void test106() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test106"); }


    soottocfg.randoop.Javac javac1 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac2 = javac1.debug();
    soottocfg.cfg.util.Tree tree3 = new soottocfg.cfg.util.Tree();
    java.util.Set set4 = tree3.getLeaves();
    soottocfg.randoop.Javac javac5 = javac2.sourcepath((java.util.Collection)set4);
    soottocfg.randoop.Javac javac6 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac7 = javac6.debug();
    soottocfg.cfg.util.Tree tree8 = new soottocfg.cfg.util.Tree();
    java.util.Set set9 = tree8.getLeaves();
    soottocfg.randoop.Javac javac10 = javac7.sourcepath((java.util.Collection)set9);
    soottocfg.randoop.Javac javac11 = javac2.sourcepath((java.util.Collection)set9);
    java.lang.String[] str_array12 = soottocfg.randoop.Strings.generateArrayOfStrings((java.util.Collection)set9);
    soottocfg.cfg.ClassVariable classVariable13 = new soottocfg.cfg.ClassVariable("\\forall int v0; -1 = 0 <- -1*-1", (java.util.Collection)set9);
    boolean b14 = classVariable13.isConstant();
    boolean b15 = classVariable13.isConstant();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);

  }

  @Test
  public void test107() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test107"); }


    soottocfg.randoop.Javac javac1 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac2 = javac1.debug();
    soottocfg.cfg.util.Tree tree3 = new soottocfg.cfg.util.Tree();
    java.util.Set set4 = tree3.getLeaves();
    soottocfg.randoop.Javac javac5 = javac2.sourcepath((java.util.Collection)set4);
    soottocfg.randoop.Javac javac6 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac7 = javac6.debug();
    soottocfg.cfg.util.Tree tree8 = new soottocfg.cfg.util.Tree();
    java.util.Set set9 = tree8.getLeaves();
    soottocfg.randoop.Javac javac10 = javac7.sourcepath((java.util.Collection)set9);
    soottocfg.randoop.Javac javac11 = javac2.sourcepath((java.util.Collection)set9);
    java.lang.String[] str_array12 = soottocfg.randoop.Strings.generateArrayOfStrings((java.util.Collection)set9);
    soottocfg.cfg.ClassVariable classVariable13 = new soottocfg.cfg.ClassVariable("\\forall int v0; -1 = 0 <- -1*-1", (java.util.Collection)set9);
    java.lang.String str14 = classVariable13.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\\forall int v0; -1 = 0 <- -1*-1"+ "'", str14.equals("\\forall int v0; -1 = 0 <- -1*-1"));

  }

  @Test
  public void test108() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test108"); }


    soottocfg.randoop.Javac javac0 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac1 = javac0.debug();
    soottocfg.cfg.util.Tree tree2 = new soottocfg.cfg.util.Tree();
    java.util.Set set3 = tree2.getLeaves();
    soottocfg.randoop.Javac javac4 = javac1.sourcepath((java.util.Collection)set3);
    java.io.File[] file_array5 = new java.io.File[] {  };
    soottocfg.randoop.Javac javac6 = javac4.sourcepath(file_array5);
    soottocfg.randoop.Classpath classpath7 = soottocfg.randoop.Classpath.of(file_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(file_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(classpath7);

  }

  @Test
  public void test109() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test109"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver1 = new jayhorn.solver.princess.PrincessProver();
    princessProver1.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver4 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array5 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr6 = princessProver4.mkOr(proverExpr_array5);
    jayhorn.solver.ProverExpr proverExpr7 = princessProver1.mkOr(proverExpr_array5);
    jayhorn.solver.BoolType boolType9 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str10 = boolType9.toString();
    jayhorn.solver.ProverType[] proverType_array11 = new jayhorn.solver.ProverType[] { boolType9 };
    jayhorn.solver.princess.PrincessProver princessProver12 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array13 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr14 = princessProver12.mkOr(proverExpr_array13);
    jayhorn.solver.ProverFun proverFun15 = princessProver1.mkDefinedFunction("hi!", proverType_array11, proverExpr14);
    jayhorn.solver.ProverExpr proverExpr17 = princessProver1.mkLiteral((-1));
    jayhorn.solver.IntType intType18 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr19 = princessProver0.mkAll(proverExpr17, (jayhorn.solver.ProverType)intType18);
    jayhorn.solver.princess.PrincessProver princessProver20 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array21 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr22 = princessProver20.mkOr(proverExpr_array21);
    jayhorn.solver.princess.PrincessProver princessProver23 = new jayhorn.solver.princess.PrincessProver();
    princessProver23.setPartitionNumber((-1));
    princessProver23.reset();
    jayhorn.solver.princess.PrincessProver princessProver27 = new jayhorn.solver.princess.PrincessProver();
    princessProver27.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver30 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array31 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr32 = princessProver30.mkOr(proverExpr_array31);
    jayhorn.solver.ProverExpr proverExpr33 = princessProver27.mkOr(proverExpr_array31);
    jayhorn.solver.BoolType boolType35 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str36 = boolType35.toString();
    jayhorn.solver.ProverType[] proverType_array37 = new jayhorn.solver.ProverType[] { boolType35 };
    jayhorn.solver.princess.PrincessProver princessProver38 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array39 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr40 = princessProver38.mkOr(proverExpr_array39);
    jayhorn.solver.ProverFun proverFun41 = princessProver27.mkDefinedFunction("hi!", proverType_array37, proverExpr40);
    jayhorn.solver.ProverExpr proverExpr43 = princessProver27.mkLiteral((-1));
    jayhorn.solver.ProverExpr proverExpr44 = princessProver23.mkNeg(proverExpr43);
    jayhorn.solver.z3.Z3HornExpr z3HornExpr45 = new jayhorn.solver.z3.Z3HornExpr(proverExpr19, proverExpr_array21, proverExpr44);
    jayhorn.solver.ProverExpr proverExpr46 = z3HornExpr45.getHead();
    jayhorn.solver.ProverExpr proverExpr47 = z3HornExpr45.getHead();
    // The following exception was thrown during execution in test generation
    try {
      jayhorn.solver.ProverExpr[] proverExpr_array49 = z3HornExpr45.getBodyArgs((-1));
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Bool"+ "'", str10.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Bool"+ "'", str36.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr47);

  }

  @Test
  public void test110() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test110"); }


    soottocfg.cfg.Program program0 = new soottocfg.cfg.Program();
    org.jgrapht.DirectedGraph directedGraph1 = program0.getCallGraph();
    java.util.Set set2 = soottocfg.cfg.util.GraphUtil.getSinks(directedGraph1);
    jayhorn.Options options3 = jayhorn.Options.v();
    boolean b4 = options3.hasScope();
    java.lang.String str5 = options3.getScope();
    jayhorn.Log.error((java.lang.Object)options3);
    options3.setAndroidStubPath("");
    options3.setClasspath("Int");
    options3.setClasspath("Int");
    // The following exception was thrown during execution in test generation
    try {
      soottocfg.cfg.util.CategorizeEdges categorizeEdges13 = new soottocfg.cfg.util.CategorizeEdges(directedGraph1, (java.lang.Object)"Int");
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(directedGraph1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(options3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);

  }

  @Test
  public void test111() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test111"); }


    soottocfg.randoop.Javac javac1 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac2 = javac1.debug();
    soottocfg.cfg.util.Tree tree3 = new soottocfg.cfg.util.Tree();
    java.util.Set set4 = tree3.getLeaves();
    soottocfg.randoop.Javac javac5 = javac2.sourcepath((java.util.Collection)set4);
    soottocfg.randoop.Javac javac6 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac7 = javac6.debug();
    soottocfg.cfg.util.Tree tree8 = new soottocfg.cfg.util.Tree();
    java.util.Set set9 = tree8.getLeaves();
    soottocfg.randoop.Javac javac10 = javac7.sourcepath((java.util.Collection)set9);
    soottocfg.randoop.Javac javac11 = javac2.sourcepath((java.util.Collection)set9);
    soottocfg.cfg.ClassVariable classVariable12 = new soottocfg.cfg.ClassVariable("\\forall int v0; -1 = 0 <- -1*-1", (java.util.Collection)set9);
    java.lang.String str13 = classVariable12.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\\forall int v0; -1 = 0 <- -1*-1"+ "'", str13.equals("\\forall int v0; -1 = 0 <- -1*-1"));

  }

  @Test
  public void test112() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test112"); }


    jayhorn.Options options0 = jayhorn.Options.v();
    boolean b1 = options0.hasScope();
    java.lang.String str2 = options0.getScope();
    jayhorn.Log.error((java.lang.Object)options0);
    boolean b4 = options0.hasScope();
    boolean b5 = options0.hasScope();
    options0.setClasspath("");
    java.lang.String str8 = options0.getAndroidStubPath();
    java.lang.String str9 = options0.getClasspath();
    jayhorn.Log.error((java.lang.Object)str9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(options0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + ""+ "'", str8.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));

  }

  @Test
  public void test113() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test113"); }


    soottocfg.randoop.Javac javac0 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac1 = javac0.debug();
    soottocfg.cfg.util.Tree tree2 = new soottocfg.cfg.util.Tree();
    java.util.Set set3 = tree2.getLeaves();
    soottocfg.randoop.Javac javac4 = javac1.sourcepath((java.util.Collection)set3);
    soottocfg.randoop.Javac javac5 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac6 = javac5.debug();
    soottocfg.cfg.util.Tree tree7 = new soottocfg.cfg.util.Tree();
    java.util.Set set8 = tree7.getLeaves();
    soottocfg.randoop.Javac javac9 = javac6.sourcepath((java.util.Collection)set8);
    soottocfg.randoop.Javac javac10 = javac1.sourcepath((java.util.Collection)set8);
    soottocfg.randoop.Javac javac11 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac12 = javac11.debug();
    soottocfg.cfg.util.Tree tree13 = new soottocfg.cfg.util.Tree();
    java.util.Set set14 = tree13.getLeaves();
    soottocfg.randoop.Javac javac15 = javac12.sourcepath((java.util.Collection)set14);
    boolean b16 = javac12.inDebugMode();
    boolean b17 = javac12.inDebugMode();
    soottocfg.randoop.Classpath classpath18 = new soottocfg.randoop.Classpath();
    soottocfg.randoop.Javac javac19 = javac12.classpath(classpath18);
    soottocfg.randoop.Javac javac20 = javac1.bootClasspath(classpath18);
    java.lang.String str21 = classpath18.toString();
    soottocfg.randoop.Javac javac22 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac23 = javac22.debug();
    soottocfg.cfg.util.Tree tree24 = new soottocfg.cfg.util.Tree();
    java.util.Set set25 = tree24.getLeaves();
    soottocfg.randoop.Javac javac26 = javac23.sourcepath((java.util.Collection)set25);
    boolean b27 = javac23.inDebugMode();
    soottocfg.randoop.Javac javac28 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac29 = javac28.debug();
    soottocfg.cfg.util.Tree tree30 = new soottocfg.cfg.util.Tree();
    java.util.Set set31 = tree30.getLeaves();
    soottocfg.randoop.Javac javac32 = javac29.sourcepath((java.util.Collection)set31);
    soottocfg.randoop.Javac javac33 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac34 = javac33.debug();
    soottocfg.cfg.util.Tree tree35 = new soottocfg.cfg.util.Tree();
    java.util.Set set36 = tree35.getLeaves();
    soottocfg.randoop.Javac javac37 = javac34.sourcepath((java.util.Collection)set36);
    soottocfg.randoop.Javac javac38 = javac29.sourcepath((java.util.Collection)set36);
    soottocfg.randoop.Javac javac39 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac40 = javac39.debug();
    soottocfg.cfg.util.Tree tree41 = new soottocfg.cfg.util.Tree();
    java.util.Set set42 = tree41.getLeaves();
    soottocfg.randoop.Javac javac43 = javac40.sourcepath((java.util.Collection)set42);
    boolean b44 = javac40.inDebugMode();
    boolean b45 = javac40.inDebugMode();
    soottocfg.randoop.Classpath classpath46 = new soottocfg.randoop.Classpath();
    soottocfg.randoop.Javac javac47 = javac40.classpath(classpath46);
    soottocfg.randoop.Javac javac48 = javac29.bootClasspath(classpath46);
    soottocfg.randoop.Javac javac49 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac50 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac51 = javac50.debug();
    soottocfg.cfg.util.Tree tree52 = new soottocfg.cfg.util.Tree();
    java.util.Set set53 = tree52.getLeaves();
    soottocfg.randoop.Javac javac54 = javac51.sourcepath((java.util.Collection)set53);
    soottocfg.randoop.Javac javac55 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac56 = javac55.debug();
    soottocfg.cfg.util.Tree tree57 = new soottocfg.cfg.util.Tree();
    java.util.Set set58 = tree57.getLeaves();
    soottocfg.randoop.Javac javac59 = javac56.sourcepath((java.util.Collection)set58);
    soottocfg.randoop.Javac javac60 = javac51.sourcepath((java.util.Collection)set58);
    soottocfg.randoop.Javac javac61 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac62 = javac61.debug();
    soottocfg.cfg.util.Tree tree63 = new soottocfg.cfg.util.Tree();
    java.util.Set set64 = tree63.getLeaves();
    soottocfg.randoop.Javac javac65 = javac62.sourcepath((java.util.Collection)set64);
    boolean b66 = javac62.inDebugMode();
    boolean b67 = javac62.inDebugMode();
    soottocfg.randoop.Classpath classpath68 = new soottocfg.randoop.Classpath();
    soottocfg.randoop.Javac javac69 = javac62.classpath(classpath68);
    soottocfg.randoop.Javac javac70 = javac51.bootClasspath(classpath68);
    java.util.List list71 = javac70.version();
    javac49.log(list71);
    soottocfg.randoop.Javac javac73 = javac48.extraArgs(list71);
    javac23.log(list71);
    soottocfg.randoop.Javac javac75 = javac23.debug();
    soottocfg.randoop.Javac javac76 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac77 = javac76.debug();
    soottocfg.cfg.util.Tree tree78 = new soottocfg.cfg.util.Tree();
    java.util.Set set79 = tree78.getLeaves();
    soottocfg.randoop.Javac javac80 = javac77.sourcepath((java.util.Collection)set79);
    java.lang.String[] str_array81 = soottocfg.randoop.Strings.generateArrayOfStrings((java.util.Collection)set79);
    soottocfg.randoop.Classpath classpath82 = soottocfg.randoop.Classpath.of((java.util.Collection)set79);
    soottocfg.randoop.Javac javac83 = javac23.bootClasspath(classpath82);
    classpath18.addAll(classpath82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + ""+ "'", str21.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(classpath82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac83);

  }

  @Test
  public void test114() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test114"); }


    soottocfg.cfg.Program program0 = new soottocfg.cfg.Program();
    org.jgrapht.DirectedGraph directedGraph1 = program0.getCallGraph();
    java.util.Set set2 = soottocfg.cfg.util.GraphUtil.getSinks(directedGraph1);
    soottocfg.cfg.Program program3 = new soottocfg.cfg.Program();
    java.util.Map map4 = program3.getModifiedGlobals();
    soottocfg.cfg.Variable[] variable_array5 = program3.getGlobalVariables();
    java.lang.String[] str_array6 = soottocfg.randoop.Strings.generateArrayOfStrings((java.lang.Object[])variable_array5);
    // The following exception was thrown during execution in test generation
    try {
      soottocfg.cfg.util.PostDominators postDominators7 = new soottocfg.cfg.util.PostDominators(directedGraph1, (java.lang.Object)str_array6);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(directedGraph1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(variable_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);

  }

  @Test
  public void test115() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test115"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array1 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr2 = princessProver0.mkOr(proverExpr_array1);
    jayhorn.solver.princess.PrincessProver princessProver3 = new jayhorn.solver.princess.PrincessProver();
    princessProver3.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver6 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array7 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr8 = princessProver6.mkOr(proverExpr_array7);
    jayhorn.solver.ProverExpr proverExpr9 = princessProver3.mkOr(proverExpr_array7);
    jayhorn.solver.princess.PrincessProver princessProver10 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver11 = new jayhorn.solver.princess.PrincessProver();
    princessProver11.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver14 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array15 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr16 = princessProver14.mkOr(proverExpr_array15);
    jayhorn.solver.ProverExpr proverExpr17 = princessProver11.mkOr(proverExpr_array15);
    jayhorn.solver.BoolType boolType19 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str20 = boolType19.toString();
    jayhorn.solver.ProverType[] proverType_array21 = new jayhorn.solver.ProverType[] { boolType19 };
    jayhorn.solver.princess.PrincessProver princessProver22 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array23 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr24 = princessProver22.mkOr(proverExpr_array23);
    jayhorn.solver.ProverFun proverFun25 = princessProver11.mkDefinedFunction("hi!", proverType_array21, proverExpr24);
    jayhorn.solver.ProverExpr proverExpr27 = princessProver11.mkLiteral((-1));
    jayhorn.solver.IntType intType28 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr29 = princessProver10.mkAll(proverExpr27, (jayhorn.solver.ProverType)intType28);
    jayhorn.solver.ProverExpr proverExpr30 = princessProver0.mkImplies(proverExpr9, proverExpr29);
    jayhorn.solver.princess.PrincessProver princessProver31 = new jayhorn.solver.princess.PrincessProver();
    princessProver31.setPartitionNumber((-1));
    princessProver31.reset();
    jayhorn.solver.ProverExpr proverExpr36 = princessProver31.mkLiteral(true);
    jayhorn.solver.princess.PrincessProver princessProver37 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver38 = new jayhorn.solver.princess.PrincessProver();
    princessProver38.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver41 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array42 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr43 = princessProver41.mkOr(proverExpr_array42);
    jayhorn.solver.ProverExpr proverExpr44 = princessProver38.mkOr(proverExpr_array42);
    jayhorn.solver.BoolType boolType46 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str47 = boolType46.toString();
    jayhorn.solver.ProverType[] proverType_array48 = new jayhorn.solver.ProverType[] { boolType46 };
    jayhorn.solver.princess.PrincessProver princessProver49 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array50 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr51 = princessProver49.mkOr(proverExpr_array50);
    jayhorn.solver.ProverFun proverFun52 = princessProver38.mkDefinedFunction("hi!", proverType_array48, proverExpr51);
    jayhorn.solver.ProverExpr proverExpr54 = princessProver38.mkLiteral((-1));
    jayhorn.solver.IntType intType55 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr56 = princessProver37.mkAll(proverExpr54, (jayhorn.solver.ProverType)intType55);
    jayhorn.solver.princess.PrincessProver princessProver57 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array58 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr59 = princessProver57.mkOr(proverExpr_array58);
    jayhorn.solver.princess.PrincessProver princessProver60 = new jayhorn.solver.princess.PrincessProver();
    princessProver60.setPartitionNumber((-1));
    princessProver60.reset();
    jayhorn.solver.princess.PrincessProver princessProver64 = new jayhorn.solver.princess.PrincessProver();
    princessProver64.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver67 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array68 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr69 = princessProver67.mkOr(proverExpr_array68);
    jayhorn.solver.ProverExpr proverExpr70 = princessProver64.mkOr(proverExpr_array68);
    jayhorn.solver.BoolType boolType72 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str73 = boolType72.toString();
    jayhorn.solver.ProverType[] proverType_array74 = new jayhorn.solver.ProverType[] { boolType72 };
    jayhorn.solver.princess.PrincessProver princessProver75 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array76 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr77 = princessProver75.mkOr(proverExpr_array76);
    jayhorn.solver.ProverFun proverFun78 = princessProver64.mkDefinedFunction("hi!", proverType_array74, proverExpr77);
    jayhorn.solver.ProverExpr proverExpr80 = princessProver64.mkLiteral((-1));
    jayhorn.solver.ProverExpr proverExpr81 = princessProver60.mkNeg(proverExpr80);
    jayhorn.solver.z3.Z3HornExpr z3HornExpr82 = new jayhorn.solver.z3.Z3HornExpr(proverExpr56, proverExpr_array58, proverExpr81);
    jayhorn.solver.ProverExpr proverExpr83 = z3HornExpr82.getHead();
    jayhorn.solver.ProverExpr proverExpr84 = z3HornExpr82.getHead();
    jayhorn.solver.ProverExpr[] proverExpr_array85 = z3HornExpr82.getBody();
    jayhorn.solver.ProverExpr proverExpr86 = princessProver31.mkAnd(proverExpr_array85);
    jayhorn.solver.princess.PrincessProver princessProver87 = new jayhorn.solver.princess.PrincessProver();
    princessProver87.setPartitionNumber((-1));
    princessProver87.reset();
    jayhorn.solver.ProverExpr proverExpr92 = princessProver87.mkLiteral(true);
    jayhorn.solver.z3.Z3HornExpr z3HornExpr93 = new jayhorn.solver.z3.Z3HornExpr(proverExpr29, proverExpr_array85, proverExpr92);
    // The following exception was thrown during execution in test generation
    try {
      int i94 = z3HornExpr93.getArity();
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Bool"+ "'", str20.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "Bool"+ "'", str47.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + "Bool"+ "'", str73.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr92);

  }

  @Test
  public void test116() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test116"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver1 = new jayhorn.solver.princess.PrincessProver();
    princessProver1.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver4 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array5 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr6 = princessProver4.mkOr(proverExpr_array5);
    jayhorn.solver.ProverExpr proverExpr7 = princessProver1.mkOr(proverExpr_array5);
    jayhorn.solver.BoolType boolType9 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str10 = boolType9.toString();
    jayhorn.solver.ProverType[] proverType_array11 = new jayhorn.solver.ProverType[] { boolType9 };
    jayhorn.solver.princess.PrincessProver princessProver12 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array13 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr14 = princessProver12.mkOr(proverExpr_array13);
    jayhorn.solver.ProverFun proverFun15 = princessProver1.mkDefinedFunction("hi!", proverType_array11, proverExpr14);
    jayhorn.solver.ProverExpr proverExpr17 = princessProver1.mkLiteral((-1));
    jayhorn.solver.IntType intType18 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr19 = princessProver0.mkAll(proverExpr17, (jayhorn.solver.ProverType)intType18);
    jayhorn.solver.princess.PrincessProver princessProver20 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array21 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr22 = princessProver20.mkOr(proverExpr_array21);
    jayhorn.solver.princess.PrincessProver princessProver23 = new jayhorn.solver.princess.PrincessProver();
    princessProver23.setPartitionNumber((-1));
    princessProver23.reset();
    jayhorn.solver.princess.PrincessProver princessProver27 = new jayhorn.solver.princess.PrincessProver();
    princessProver27.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver30 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array31 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr32 = princessProver30.mkOr(proverExpr_array31);
    jayhorn.solver.ProverExpr proverExpr33 = princessProver27.mkOr(proverExpr_array31);
    jayhorn.solver.BoolType boolType35 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str36 = boolType35.toString();
    jayhorn.solver.ProverType[] proverType_array37 = new jayhorn.solver.ProverType[] { boolType35 };
    jayhorn.solver.princess.PrincessProver princessProver38 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array39 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr40 = princessProver38.mkOr(proverExpr_array39);
    jayhorn.solver.ProverFun proverFun41 = princessProver27.mkDefinedFunction("hi!", proverType_array37, proverExpr40);
    jayhorn.solver.ProverExpr proverExpr43 = princessProver27.mkLiteral((-1));
    jayhorn.solver.ProverExpr proverExpr44 = princessProver23.mkNeg(proverExpr43);
    jayhorn.solver.z3.Z3HornExpr z3HornExpr45 = new jayhorn.solver.z3.Z3HornExpr(proverExpr19, proverExpr_array21, proverExpr44);
    jayhorn.solver.ProverExpr proverExpr46 = z3HornExpr45.getHead();
    jayhorn.solver.ProverType proverType47 = z3HornExpr45.getType();
    // The following exception was thrown during execution in test generation
    try {
      boolean b48 = z3HornExpr45.getBooleanLiteralValue();
      org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.RuntimeException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Bool"+ "'", str10.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Bool"+ "'", str36.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType47);

  }

  @Test
  public void test117() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test117"); }


    jayhorn.Options options0 = jayhorn.Options.v();
    boolean b1 = options0.hasScope();
    java.lang.String str2 = options0.getScope();
    jayhorn.Log.error((java.lang.Object)options0);
    boolean b4 = options0.hasScope();
    boolean b5 = options0.hasScope();
    options0.setClasspath("javac 1.8.0_72");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(options0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);

  }

  @Test
  public void test118() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test118"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    princessProver0.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver3 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array4 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr5 = princessProver3.mkOr(proverExpr_array4);
    jayhorn.solver.ProverExpr proverExpr6 = princessProver0.mkOr(proverExpr_array4);
    jayhorn.solver.ProverResult proverResult8 = princessProver0.getResult(false);
    jayhorn.solver.IntType intType10 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr11 = princessProver0.mkHornVariable("Int", (jayhorn.solver.ProverType)intType10);
    jayhorn.solver.princess.PrincessProver princessProver12 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array13 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr14 = princessProver12.mkOr(proverExpr_array13);
    jayhorn.solver.princess.PrincessProver princessProver15 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver16 = new jayhorn.solver.princess.PrincessProver();
    princessProver16.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver19 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array20 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr21 = princessProver19.mkOr(proverExpr_array20);
    jayhorn.solver.ProverExpr proverExpr22 = princessProver16.mkOr(proverExpr_array20);
    jayhorn.solver.BoolType boolType24 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str25 = boolType24.toString();
    jayhorn.solver.ProverType[] proverType_array26 = new jayhorn.solver.ProverType[] { boolType24 };
    jayhorn.solver.princess.PrincessProver princessProver27 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array28 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr29 = princessProver27.mkOr(proverExpr_array28);
    jayhorn.solver.ProverFun proverFun30 = princessProver16.mkDefinedFunction("hi!", proverType_array26, proverExpr29);
    jayhorn.solver.ProverExpr proverExpr32 = princessProver16.mkLiteral((-1));
    jayhorn.solver.IntType intType33 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr34 = princessProver15.mkAll(proverExpr32, (jayhorn.solver.ProverType)intType33);
    jayhorn.solver.princess.PrincessProver princessProver35 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array36 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr37 = princessProver35.mkOr(proverExpr_array36);
    jayhorn.solver.princess.PrincessProver princessProver38 = new jayhorn.solver.princess.PrincessProver();
    princessProver38.setPartitionNumber((-1));
    princessProver38.reset();
    jayhorn.solver.princess.PrincessProver princessProver42 = new jayhorn.solver.princess.PrincessProver();
    princessProver42.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver45 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array46 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr47 = princessProver45.mkOr(proverExpr_array46);
    jayhorn.solver.ProverExpr proverExpr48 = princessProver42.mkOr(proverExpr_array46);
    jayhorn.solver.BoolType boolType50 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str51 = boolType50.toString();
    jayhorn.solver.ProverType[] proverType_array52 = new jayhorn.solver.ProverType[] { boolType50 };
    jayhorn.solver.princess.PrincessProver princessProver53 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array54 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr55 = princessProver53.mkOr(proverExpr_array54);
    jayhorn.solver.ProverFun proverFun56 = princessProver42.mkDefinedFunction("hi!", proverType_array52, proverExpr55);
    jayhorn.solver.ProverExpr proverExpr58 = princessProver42.mkLiteral((-1));
    jayhorn.solver.ProverExpr proverExpr59 = princessProver38.mkNeg(proverExpr58);
    jayhorn.solver.z3.Z3HornExpr z3HornExpr60 = new jayhorn.solver.z3.Z3HornExpr(proverExpr34, proverExpr_array36, proverExpr59);
    jayhorn.solver.ProverExpr proverExpr61 = z3HornExpr60.getHead();
    jayhorn.solver.ProverExpr proverExpr62 = z3HornExpr60.getHead();
    jayhorn.solver.ProverExpr proverExpr63 = z3HornExpr60.getConstraint();
    // The following exception was thrown during execution in test generation
    try {
      jayhorn.solver.ProverExpr proverExpr64 = princessProver0.mkMult(proverExpr14, (jayhorn.solver.ProverExpr)z3HornExpr60);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverResult8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Bool"+ "'", str25.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "Bool"+ "'", str51.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr63);

  }

  @Test
  public void test119() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test119"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    princessProver0.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver4 = new jayhorn.solver.princess.PrincessProver();
    princessProver4.setPartitionNumber((-1));
    princessProver4.reset();
    jayhorn.solver.ProverType proverType8 = princessProver4.getIntType();
    jayhorn.solver.ProverExpr proverExpr9 = princessProver0.mkVariable("Array(10)", proverType8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr9);

  }

  @Test
  public void test120() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test120"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    princessProver0.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver3 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array4 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr5 = princessProver3.mkOr(proverExpr_array4);
    jayhorn.solver.ProverExpr proverExpr6 = princessProver0.mkOr(proverExpr_array4);
    jayhorn.solver.BoolType boolType8 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str9 = boolType8.toString();
    jayhorn.solver.ProverType[] proverType_array10 = new jayhorn.solver.ProverType[] { boolType8 };
    jayhorn.solver.princess.PrincessProver princessProver11 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array12 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr13 = princessProver11.mkOr(proverExpr_array12);
    jayhorn.solver.ProverFun proverFun14 = princessProver0.mkDefinedFunction("hi!", proverType_array10, proverExpr13);
    jayhorn.solver.princess.PrincessProver princessProver16 = new jayhorn.solver.princess.PrincessProver();
    princessProver16.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver19 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array20 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr21 = princessProver19.mkOr(proverExpr_array20);
    jayhorn.solver.ProverExpr proverExpr22 = princessProver16.mkOr(proverExpr_array20);
    jayhorn.solver.BoolType boolType24 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str25 = boolType24.toString();
    jayhorn.solver.ProverType[] proverType_array26 = new jayhorn.solver.ProverType[] { boolType24 };
    jayhorn.solver.princess.PrincessProver princessProver27 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array28 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr29 = princessProver27.mkOr(proverExpr_array28);
    jayhorn.solver.ProverFun proverFun30 = princessProver16.mkDefinedFunction("hi!", proverType_array26, proverExpr29);
    jayhorn.solver.BoolType boolType31 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str32 = boolType31.toString();
    jayhorn.solver.ProverFun proverFun33 = princessProver0.mkUnintFunction("", proverType_array26, (jayhorn.solver.ProverType)boolType31);
    jayhorn.solver.ProverType proverType34 = princessProver0.getIntType();
    jayhorn.solver.princess.PrincessProver princessProver35 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array36 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr37 = princessProver35.mkOr(proverExpr_array36);
    java.lang.String str38 = princessProver0.proverExprToSMT(proverExpr37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Bool"+ "'", str9.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Bool"+ "'", str25.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Bool"+ "'", str32.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "false"+ "'", str38.equals("false"));

  }

  @Test
  public void test121() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test121"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    princessProver0.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver3 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array4 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr5 = princessProver3.mkOr(proverExpr_array4);
    jayhorn.solver.ProverExpr proverExpr6 = princessProver0.mkOr(proverExpr_array4);
    jayhorn.solver.ProverResult proverResult8 = princessProver0.getResult(false);
    princessProver0.push();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverResult8);

  }

  @Test
  public void test122() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test122"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array1 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr2 = princessProver0.mkOr(proverExpr_array1);
    jayhorn.solver.princess.PrincessProver princessProver3 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array4 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr5 = princessProver3.mkOr(proverExpr_array4);
    jayhorn.solver.BoolType boolType7 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str8 = boolType7.toString();
    jayhorn.solver.ProverExpr proverExpr9 = princessProver3.mkHornVariable("hi!", (jayhorn.solver.ProverType)boolType7);
    jayhorn.solver.princess.PrincessProver princessProver10 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver11 = new jayhorn.solver.princess.PrincessProver();
    princessProver11.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver14 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array15 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr16 = princessProver14.mkOr(proverExpr_array15);
    jayhorn.solver.ProverExpr proverExpr17 = princessProver11.mkOr(proverExpr_array15);
    jayhorn.solver.BoolType boolType19 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str20 = boolType19.toString();
    jayhorn.solver.ProverType[] proverType_array21 = new jayhorn.solver.ProverType[] { boolType19 };
    jayhorn.solver.princess.PrincessProver princessProver22 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array23 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr24 = princessProver22.mkOr(proverExpr_array23);
    jayhorn.solver.ProverFun proverFun25 = princessProver11.mkDefinedFunction("hi!", proverType_array21, proverExpr24);
    jayhorn.solver.ProverExpr proverExpr27 = princessProver11.mkLiteral((-1));
    jayhorn.solver.IntType intType28 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr29 = princessProver10.mkAll(proverExpr27, (jayhorn.solver.ProverType)intType28);
    jayhorn.solver.princess.PrincessProver princessProver31 = new jayhorn.solver.princess.PrincessProver();
    princessProver31.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver34 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array35 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr36 = princessProver34.mkOr(proverExpr_array35);
    jayhorn.solver.ProverExpr proverExpr37 = princessProver31.mkOr(proverExpr_array35);
    jayhorn.solver.BoolType boolType39 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str40 = boolType39.toString();
    jayhorn.solver.ProverType[] proverType_array41 = new jayhorn.solver.ProverType[] { boolType39 };
    jayhorn.solver.princess.PrincessProver princessProver42 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array43 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr44 = princessProver42.mkOr(proverExpr_array43);
    jayhorn.solver.ProverFun proverFun45 = princessProver31.mkDefinedFunction("hi!", proverType_array41, proverExpr44);
    jayhorn.solver.princess.PrincessProver princessProver46 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array47 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr48 = princessProver46.mkOr(proverExpr_array47);
    jayhorn.solver.ProverFun proverFun49 = princessProver10.mkDefinedFunction("hi!", proverType_array41, proverExpr48);
    jayhorn.solver.ProverExpr proverExpr50 = princessProver0.mkAnd(proverExpr9, proverExpr48);
    princessProver0.reset();
    jayhorn.solver.princess.PrincessProver princessProver52 = new jayhorn.solver.princess.PrincessProver();
    princessProver52.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver55 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array56 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr57 = princessProver55.mkOr(proverExpr_array56);
    jayhorn.solver.ProverExpr proverExpr58 = princessProver52.mkOr(proverExpr_array56);
    jayhorn.solver.BoolType boolType60 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str61 = boolType60.toString();
    jayhorn.solver.ProverType[] proverType_array62 = new jayhorn.solver.ProverType[] { boolType60 };
    jayhorn.solver.princess.PrincessProver princessProver63 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array64 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr65 = princessProver63.mkOr(proverExpr_array64);
    jayhorn.solver.ProverFun proverFun66 = princessProver52.mkDefinedFunction("hi!", proverType_array62, proverExpr65);
    jayhorn.solver.princess.PrincessProver princessProver68 = new jayhorn.solver.princess.PrincessProver();
    princessProver68.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver71 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array72 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr73 = princessProver71.mkOr(proverExpr_array72);
    jayhorn.solver.ProverExpr proverExpr74 = princessProver68.mkOr(proverExpr_array72);
    jayhorn.solver.BoolType boolType76 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str77 = boolType76.toString();
    jayhorn.solver.ProverType[] proverType_array78 = new jayhorn.solver.ProverType[] { boolType76 };
    jayhorn.solver.princess.PrincessProver princessProver79 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array80 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr81 = princessProver79.mkOr(proverExpr_array80);
    jayhorn.solver.ProverFun proverFun82 = princessProver68.mkDefinedFunction("hi!", proverType_array78, proverExpr81);
    jayhorn.solver.BoolType boolType83 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str84 = boolType83.toString();
    jayhorn.solver.ProverFun proverFun85 = princessProver52.mkUnintFunction("", proverType_array78, (jayhorn.solver.ProverType)boolType83);
    jayhorn.solver.ArrayType arrayType87 = new jayhorn.solver.ArrayType(10);
    jayhorn.solver.ProverType proverType88 = princessProver0.getArrayType(proverType_array78, (jayhorn.solver.ProverType)arrayType87);
    princessProver0.shutdown();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Bool"+ "'", str8.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Bool"+ "'", str20.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "Bool"+ "'", str40.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "Bool"+ "'", str61.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "Bool"+ "'", str77.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str84 + "' != '" + "Bool"+ "'", str84.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType88);

  }

  @Test
  public void test123() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test123"); }


    soottocfg.randoop.Javac javac0 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac1 = javac0.debug();
    soottocfg.cfg.util.Tree tree2 = new soottocfg.cfg.util.Tree();
    java.util.Set set3 = tree2.getLeaves();
    soottocfg.randoop.Javac javac4 = javac1.sourcepath((java.util.Collection)set3);
    soottocfg.randoop.Javac javac5 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac6 = javac5.debug();
    soottocfg.cfg.util.Tree tree7 = new soottocfg.cfg.util.Tree();
    java.util.Set set8 = tree7.getLeaves();
    soottocfg.randoop.Javac javac9 = javac6.sourcepath((java.util.Collection)set8);
    soottocfg.randoop.Javac javac10 = javac1.sourcepath((java.util.Collection)set8);
    soottocfg.randoop.Javac javac11 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac12 = javac11.debug();
    soottocfg.cfg.util.Tree tree13 = new soottocfg.cfg.util.Tree();
    java.util.Set set14 = tree13.getLeaves();
    soottocfg.randoop.Javac javac15 = javac12.sourcepath((java.util.Collection)set14);
    boolean b16 = javac12.inDebugMode();
    boolean b17 = javac12.inDebugMode();
    soottocfg.randoop.Classpath classpath18 = new soottocfg.randoop.Classpath();
    soottocfg.randoop.Javac javac19 = javac12.classpath(classpath18);
    soottocfg.randoop.Javac javac20 = javac1.bootClasspath(classpath18);
    java.util.List list21 = javac20.version();
    soottocfg.randoop.Javac javac22 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac23 = javac22.debug();
    soottocfg.cfg.util.Tree tree24 = new soottocfg.cfg.util.Tree();
    java.util.Set set25 = tree24.getLeaves();
    soottocfg.randoop.Javac javac26 = javac23.sourcepath((java.util.Collection)set25);
    boolean b27 = javac23.inDebugMode();
    soottocfg.randoop.Javac javac28 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac29 = javac28.debug();
    soottocfg.cfg.util.Tree tree30 = new soottocfg.cfg.util.Tree();
    java.util.Set set31 = tree30.getLeaves();
    soottocfg.randoop.Javac javac32 = javac29.sourcepath((java.util.Collection)set31);
    soottocfg.randoop.Javac javac33 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac34 = javac33.debug();
    soottocfg.cfg.util.Tree tree35 = new soottocfg.cfg.util.Tree();
    java.util.Set set36 = tree35.getLeaves();
    soottocfg.randoop.Javac javac37 = javac34.sourcepath((java.util.Collection)set36);
    soottocfg.randoop.Javac javac38 = javac29.sourcepath((java.util.Collection)set36);
    soottocfg.randoop.Javac javac39 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac40 = javac39.debug();
    soottocfg.cfg.util.Tree tree41 = new soottocfg.cfg.util.Tree();
    java.util.Set set42 = tree41.getLeaves();
    soottocfg.randoop.Javac javac43 = javac40.sourcepath((java.util.Collection)set42);
    boolean b44 = javac40.inDebugMode();
    boolean b45 = javac40.inDebugMode();
    soottocfg.randoop.Classpath classpath46 = new soottocfg.randoop.Classpath();
    soottocfg.randoop.Javac javac47 = javac40.classpath(classpath46);
    soottocfg.randoop.Javac javac48 = javac29.bootClasspath(classpath46);
    soottocfg.randoop.Javac javac49 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac50 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac51 = javac50.debug();
    soottocfg.cfg.util.Tree tree52 = new soottocfg.cfg.util.Tree();
    java.util.Set set53 = tree52.getLeaves();
    soottocfg.randoop.Javac javac54 = javac51.sourcepath((java.util.Collection)set53);
    soottocfg.randoop.Javac javac55 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac56 = javac55.debug();
    soottocfg.cfg.util.Tree tree57 = new soottocfg.cfg.util.Tree();
    java.util.Set set58 = tree57.getLeaves();
    soottocfg.randoop.Javac javac59 = javac56.sourcepath((java.util.Collection)set58);
    soottocfg.randoop.Javac javac60 = javac51.sourcepath((java.util.Collection)set58);
    soottocfg.randoop.Javac javac61 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac62 = javac61.debug();
    soottocfg.cfg.util.Tree tree63 = new soottocfg.cfg.util.Tree();
    java.util.Set set64 = tree63.getLeaves();
    soottocfg.randoop.Javac javac65 = javac62.sourcepath((java.util.Collection)set64);
    boolean b66 = javac62.inDebugMode();
    boolean b67 = javac62.inDebugMode();
    soottocfg.randoop.Classpath classpath68 = new soottocfg.randoop.Classpath();
    soottocfg.randoop.Javac javac69 = javac62.classpath(classpath68);
    soottocfg.randoop.Javac javac70 = javac51.bootClasspath(classpath68);
    java.util.List list71 = javac70.version();
    javac49.log(list71);
    soottocfg.randoop.Javac javac73 = javac48.extraArgs(list71);
    javac23.log(list71);
    soottocfg.randoop.Javac javac75 = javac20.sourcepath((java.util.Collection)list71);
    java.lang.String[] str_array76 = soottocfg.randoop.Strings.generateArrayOfStrings((java.util.Collection)list71);
    java.lang.String[] str_array77 = soottocfg.randoop.Strings.generateArrayOfStrings((java.util.Collection)list71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array77);

  }

  @Test
  public void test124() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test124"); }


    soottocfg.randoop.Javac javac0 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac1 = javac0.debug();
    soottocfg.cfg.util.Tree tree2 = new soottocfg.cfg.util.Tree();
    java.util.Set set3 = tree2.getLeaves();
    soottocfg.randoop.Javac javac4 = javac1.sourcepath((java.util.Collection)set3);
    boolean b5 = javac1.inDebugMode();
    boolean b6 = javac1.inDebugMode();
    soottocfg.randoop.Classpath classpath7 = new soottocfg.randoop.Classpath();
    soottocfg.randoop.Javac javac8 = javac1.classpath(classpath7);
    java.util.List list9 = javac8.version();
    soottocfg.randoop.Javac javac10 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac11 = javac10.debug();
    soottocfg.cfg.util.Tree tree12 = new soottocfg.cfg.util.Tree();
    java.util.Set set13 = tree12.getLeaves();
    soottocfg.randoop.Javac javac14 = javac11.sourcepath((java.util.Collection)set13);
    boolean b15 = javac11.inDebugMode();
    boolean b16 = javac11.inDebugMode();
    soottocfg.randoop.Classpath classpath17 = new soottocfg.randoop.Classpath();
    soottocfg.randoop.Javac javac18 = javac11.classpath(classpath17);
    java.io.File[] file_array19 = new java.io.File[] {  };
    soottocfg.randoop.Classpath classpath20 = soottocfg.randoop.Classpath.of(file_array19);
    classpath17.addAll(file_array19);
    soottocfg.randoop.Javac javac22 = javac8.bootClasspath(classpath17);
    java.io.File[] file_array23 = new java.io.File[] {  };
    soottocfg.randoop.Javac javac24 = javac22.sourcepath(file_array23);
    soottocfg.randoop.Classpath classpath25 = soottocfg.randoop.Classpath.of(file_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(file_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(classpath20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(file_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(classpath25);

  }

  @Test
  public void test125() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test125"); }


    soottocfg.cfg.util.Tree tree0 = new soottocfg.cfg.util.Tree();
    soottocfg.randoop.Javac javac1 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac2 = javac1.debug();
    soottocfg.cfg.util.Tree tree3 = new soottocfg.cfg.util.Tree();
    java.util.Set set4 = tree3.getLeaves();
    soottocfg.randoop.Javac javac5 = javac2.sourcepath((java.util.Collection)set4);
    boolean b6 = javac2.inDebugMode();
    boolean b7 = javac2.inDebugMode();
    soottocfg.randoop.Classpath classpath8 = new soottocfg.randoop.Classpath();
    soottocfg.randoop.Javac javac9 = javac2.classpath(classpath8);
    java.util.List list10 = javac9.version();
    soottocfg.randoop.Javac javac11 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac12 = javac11.debug();
    soottocfg.cfg.util.Tree tree13 = new soottocfg.cfg.util.Tree();
    java.util.Set set14 = tree13.getLeaves();
    soottocfg.randoop.Javac javac15 = javac12.sourcepath((java.util.Collection)set14);
    boolean b16 = javac12.inDebugMode();
    boolean b17 = javac12.inDebugMode();
    soottocfg.randoop.Classpath classpath18 = new soottocfg.randoop.Classpath();
    soottocfg.randoop.Javac javac19 = javac12.classpath(classpath18);
    java.io.File[] file_array20 = new java.io.File[] {  };
    soottocfg.randoop.Classpath classpath21 = soottocfg.randoop.Classpath.of(file_array20);
    classpath18.addAll(file_array20);
    soottocfg.randoop.Javac javac23 = javac9.bootClasspath(classpath18);
    jayhorn.solver.princess.PrincessProver princessProver24 = new jayhorn.solver.princess.PrincessProver();
    princessProver24.setPartitionNumber((-1));
    princessProver24.reset();
    jayhorn.solver.princess.PrincessProver princessProver28 = new jayhorn.solver.princess.PrincessProver();
    princessProver28.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver31 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array32 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr33 = princessProver31.mkOr(proverExpr_array32);
    jayhorn.solver.ProverExpr proverExpr34 = princessProver28.mkOr(proverExpr_array32);
    jayhorn.solver.princess.PrincessProver princessProver35 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver36 = new jayhorn.solver.princess.PrincessProver();
    princessProver36.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver39 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array40 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr41 = princessProver39.mkOr(proverExpr_array40);
    jayhorn.solver.ProverExpr proverExpr42 = princessProver36.mkOr(proverExpr_array40);
    jayhorn.solver.BoolType boolType44 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str45 = boolType44.toString();
    jayhorn.solver.ProverType[] proverType_array46 = new jayhorn.solver.ProverType[] { boolType44 };
    jayhorn.solver.princess.PrincessProver princessProver47 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array48 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr49 = princessProver47.mkOr(proverExpr_array48);
    jayhorn.solver.ProverFun proverFun50 = princessProver36.mkDefinedFunction("hi!", proverType_array46, proverExpr49);
    jayhorn.solver.ProverExpr proverExpr52 = princessProver36.mkLiteral((-1));
    jayhorn.solver.IntType intType53 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr54 = princessProver35.mkAll(proverExpr52, (jayhorn.solver.ProverType)intType53);
    jayhorn.solver.ProverExpr proverExpr55 = princessProver24.mkAnd(proverExpr34, proverExpr54);
    jayhorn.solver.princess.PrincessProver princessProver56 = new jayhorn.solver.princess.PrincessProver();
    princessProver56.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver59 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array60 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr61 = princessProver59.mkOr(proverExpr_array60);
    jayhorn.solver.ProverExpr proverExpr62 = princessProver56.mkOr(proverExpr_array60);
    java.lang.String[] str_array63 = soottocfg.randoop.Strings.generateArrayOfStrings((java.lang.Object[])proverExpr_array60);
    jayhorn.solver.princess.PrincessProver princessProver64 = new jayhorn.solver.princess.PrincessProver();
    princessProver64.setPartitionNumber((-1));
    princessProver64.reset();
    jayhorn.solver.princess.PrincessProver princessProver68 = new jayhorn.solver.princess.PrincessProver();
    princessProver68.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver71 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array72 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr73 = princessProver71.mkOr(proverExpr_array72);
    jayhorn.solver.ProverExpr proverExpr74 = princessProver68.mkOr(proverExpr_array72);
    jayhorn.solver.princess.PrincessProver princessProver75 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver76 = new jayhorn.solver.princess.PrincessProver();
    princessProver76.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver79 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array80 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr81 = princessProver79.mkOr(proverExpr_array80);
    jayhorn.solver.ProverExpr proverExpr82 = princessProver76.mkOr(proverExpr_array80);
    jayhorn.solver.BoolType boolType84 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str85 = boolType84.toString();
    jayhorn.solver.ProverType[] proverType_array86 = new jayhorn.solver.ProverType[] { boolType84 };
    jayhorn.solver.princess.PrincessProver princessProver87 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array88 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr89 = princessProver87.mkOr(proverExpr_array88);
    jayhorn.solver.ProverFun proverFun90 = princessProver76.mkDefinedFunction("hi!", proverType_array86, proverExpr89);
    jayhorn.solver.ProverExpr proverExpr92 = princessProver76.mkLiteral((-1));
    jayhorn.solver.IntType intType93 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr94 = princessProver75.mkAll(proverExpr92, (jayhorn.solver.ProverType)intType93);
    jayhorn.solver.ProverExpr proverExpr95 = princessProver64.mkAnd(proverExpr74, proverExpr94);
    jayhorn.solver.z3.Z3HornExpr z3HornExpr96 = new jayhorn.solver.z3.Z3HornExpr(proverExpr55, proverExpr_array60, proverExpr74);
    tree0.addEdge((java.lang.Object)javac23, (java.lang.Object)proverExpr74);
    java.lang.Object obj98 = tree0.getRoot();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(file_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(classpath21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "Bool"+ "'", str45.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str85 + "' != '" + "Bool"+ "'", str85.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj98);

  }

  @Test
  public void test126() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test126"); }


    jayhorn.Options options0 = jayhorn.Options.v();
    java.lang.String str1 = options0.getAndroidStubPath();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(options0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "safety"+ "'", str1.equals("safety"));

  }

  @Test
  public void test127() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test127"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver1 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver2 = new jayhorn.solver.princess.PrincessProver();
    princessProver2.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver5 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array6 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr7 = princessProver5.mkOr(proverExpr_array6);
    jayhorn.solver.ProverExpr proverExpr8 = princessProver2.mkOr(proverExpr_array6);
    jayhorn.solver.BoolType boolType10 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str11 = boolType10.toString();
    jayhorn.solver.ProverType[] proverType_array12 = new jayhorn.solver.ProverType[] { boolType10 };
    jayhorn.solver.princess.PrincessProver princessProver13 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array14 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr15 = princessProver13.mkOr(proverExpr_array14);
    jayhorn.solver.ProverFun proverFun16 = princessProver2.mkDefinedFunction("hi!", proverType_array12, proverExpr15);
    jayhorn.solver.ProverExpr proverExpr18 = princessProver2.mkLiteral((-1));
    jayhorn.solver.IntType intType19 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr20 = princessProver1.mkAll(proverExpr18, (jayhorn.solver.ProverType)intType19);
    jayhorn.solver.princess.PrincessProver princessProver21 = new jayhorn.solver.princess.PrincessProver();
    princessProver21.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver24 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array25 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr26 = princessProver24.mkOr(proverExpr_array25);
    jayhorn.solver.ProverExpr proverExpr27 = princessProver21.mkOr(proverExpr_array25);
    jayhorn.solver.BoolType boolType29 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str30 = boolType29.toString();
    jayhorn.solver.ProverType[] proverType_array31 = new jayhorn.solver.ProverType[] { boolType29 };
    jayhorn.solver.princess.PrincessProver princessProver32 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array33 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr34 = princessProver32.mkOr(proverExpr_array33);
    jayhorn.solver.ProverFun proverFun35 = princessProver21.mkDefinedFunction("hi!", proverType_array31, proverExpr34);
    // The following exception was thrown during execution in test generation
    try {
      jayhorn.solver.ProverExpr proverExpr36 = princessProver0.mkMult(proverExpr18, proverExpr34);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Bool"+ "'", str11.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "Bool"+ "'", str30.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun35);

  }

  @Test
  public void test128() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test128"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    princessProver0.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver3 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array4 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr5 = princessProver3.mkOr(proverExpr_array4);
    jayhorn.solver.ProverExpr proverExpr6 = princessProver0.mkOr(proverExpr_array4);
    jayhorn.solver.ProverResult proverResult8 = princessProver0.getResult(false);
    jayhorn.solver.IntType intType10 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr11 = princessProver0.mkHornVariable("Int", (jayhorn.solver.ProverType)intType10);
    // The following exception was thrown during execution in test generation
    try {
      princessProver0.pop();
      org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.RuntimeException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverResult8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr11);

  }

  @Test
  public void test129() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test129"); }


    jayhorn.solver.princess.PrincessProverFactory princessProverFactory0 = new jayhorn.solver.princess.PrincessProverFactory();
    jayhorn.solver.Prover prover1 = princessProverFactory0.spawn();
    jayhorn.Log.debug((java.lang.Object)princessProverFactory0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(prover1);

  }

  @Test
  public void test130() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test130"); }


    soottocfg.randoop.Javac javac1 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac2 = javac1.debug();
    soottocfg.cfg.util.Tree tree3 = new soottocfg.cfg.util.Tree();
    java.util.Set set4 = tree3.getLeaves();
    soottocfg.randoop.Javac javac5 = javac2.sourcepath((java.util.Collection)set4);
    soottocfg.randoop.Javac javac6 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac7 = javac6.debug();
    soottocfg.cfg.util.Tree tree8 = new soottocfg.cfg.util.Tree();
    java.util.Set set9 = tree8.getLeaves();
    soottocfg.randoop.Javac javac10 = javac7.sourcepath((java.util.Collection)set9);
    soottocfg.randoop.Javac javac11 = javac2.sourcepath((java.util.Collection)set9);
    soottocfg.cfg.ClassVariable classVariable12 = new soottocfg.cfg.ClassVariable("\\forall int v0; -1 = 0 <- -1*-1", (java.util.Collection)set9);
    java.lang.String str13 = classVariable12.toString();
    boolean b14 = classVariable12.isUnique();
    soottocfg.cfg.Variable[] variable_array15 = classVariable12.getAssociatedFields();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\\forall int v0; -1 = 0 <- -1*-1"+ "'", str13.equals("\\forall int v0; -1 = 0 <- -1*-1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(variable_array15);

  }

  @Test
  public void test131() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test131"); }


    jayhorn.solver.ArrayType arrayType1 = new jayhorn.solver.ArrayType(10);
    soottocfg.randoop.Javac javac2 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac3 = javac2.debug();
    soottocfg.cfg.util.Tree tree4 = new soottocfg.cfg.util.Tree();
    java.util.Set set5 = tree4.getLeaves();
    soottocfg.randoop.Javac javac6 = javac3.sourcepath((java.util.Collection)set5);
    soottocfg.randoop.Javac javac7 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac8 = javac7.debug();
    soottocfg.cfg.util.Tree tree9 = new soottocfg.cfg.util.Tree();
    java.util.Set set10 = tree9.getLeaves();
    soottocfg.randoop.Javac javac11 = javac8.sourcepath((java.util.Collection)set10);
    soottocfg.randoop.Javac javac12 = javac3.sourcepath((java.util.Collection)set10);
    soottocfg.randoop.Javac javac13 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac14 = javac13.debug();
    soottocfg.cfg.util.Tree tree15 = new soottocfg.cfg.util.Tree();
    java.util.Set set16 = tree15.getLeaves();
    soottocfg.randoop.Javac javac17 = javac14.sourcepath((java.util.Collection)set16);
    boolean b18 = javac14.inDebugMode();
    boolean b19 = javac14.inDebugMode();
    soottocfg.randoop.Classpath classpath20 = new soottocfg.randoop.Classpath();
    soottocfg.randoop.Javac javac21 = javac14.classpath(classpath20);
    soottocfg.randoop.Javac javac22 = javac3.bootClasspath(classpath20);
    java.util.List list23 = javac22.version();
    boolean b24 = arrayType1.equals((java.lang.Object)javac22);
    java.io.File[] file_array25 = new java.io.File[] {  };
    soottocfg.randoop.Classpath classpath26 = soottocfg.randoop.Classpath.of(file_array25);
    java.util.List list27 = javac22.compile(file_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(file_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(classpath26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);

  }

  @Test
  public void test132() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test132"); }


    soottocfg.cfg.util.Tree tree0 = new soottocfg.cfg.util.Tree();
    java.util.Set set1 = tree0.getLeaves();
    soottocfg.randoop.Javac javac3 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac4 = javac3.debug();
    soottocfg.cfg.util.Tree tree5 = new soottocfg.cfg.util.Tree();
    java.util.Set set6 = tree5.getLeaves();
    soottocfg.randoop.Javac javac7 = javac4.sourcepath((java.util.Collection)set6);
    soottocfg.randoop.Javac javac8 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac9 = javac8.debug();
    soottocfg.cfg.util.Tree tree10 = new soottocfg.cfg.util.Tree();
    java.util.Set set11 = tree10.getLeaves();
    soottocfg.randoop.Javac javac12 = javac9.sourcepath((java.util.Collection)set11);
    soottocfg.randoop.Javac javac13 = javac4.sourcepath((java.util.Collection)set11);
    soottocfg.cfg.ClassVariable classVariable14 = new soottocfg.cfg.ClassVariable("\\forall int v0; -1 = 0 <- -1*-1", (java.util.Collection)set11);
    java.lang.String str15 = classVariable14.toString();
    boolean b16 = classVariable14.isUnique();
    soottocfg.randoop.Javac javac17 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac18 = javac17.debug();
    soottocfg.cfg.util.Tree tree19 = new soottocfg.cfg.util.Tree();
    java.util.Set set20 = tree19.getLeaves();
    soottocfg.randoop.Javac javac21 = javac18.sourcepath((java.util.Collection)set20);
    boolean b22 = javac18.inDebugMode();
    boolean b23 = javac18.inDebugMode();
    soottocfg.randoop.Javac javac24 = javac18.debug();
    soottocfg.randoop.Javac javac25 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac26 = javac25.debug();
    soottocfg.cfg.util.Tree tree27 = new soottocfg.cfg.util.Tree();
    java.util.Set set28 = tree27.getLeaves();
    soottocfg.randoop.Javac javac29 = javac26.sourcepath((java.util.Collection)set28);
    soottocfg.randoop.Javac javac30 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac31 = javac30.debug();
    soottocfg.cfg.util.Tree tree32 = new soottocfg.cfg.util.Tree();
    java.util.Set set33 = tree32.getLeaves();
    soottocfg.randoop.Javac javac34 = javac31.sourcepath((java.util.Collection)set33);
    soottocfg.randoop.Javac javac35 = javac26.sourcepath((java.util.Collection)set33);
    java.lang.String[] str_array36 = soottocfg.randoop.Strings.generateArrayOfStrings((java.util.Collection)set33);
    soottocfg.randoop.Javac javac37 = javac18.sourcepath((java.util.Collection)set33);
    // The following exception was thrown during execution in test generation
    try {
      boolean b38 = tree0.isDescendant((java.lang.Object)classVariable14, (java.lang.Object)javac37);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "\\forall int v0; -1 = 0 <- -1*-1"+ "'", str15.equals("\\forall int v0; -1 = 0 <- -1*-1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac37);

  }

  @Test
  public void test133() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test133"); }


    jayhorn.solver.BoolType boolType0 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str1 = boolType0.toString();
    java.lang.String str2 = boolType0.toString();
    java.lang.String str3 = boolType0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Bool"+ "'", str1.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "Bool"+ "'", str2.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Bool"+ "'", str3.equals("Bool"));

  }

  @Test
  public void test134() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test134"); }


    soottocfg.randoop.Javac javac1 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac2 = javac1.debug();
    soottocfg.cfg.util.Tree tree3 = new soottocfg.cfg.util.Tree();
    java.util.Set set4 = tree3.getLeaves();
    soottocfg.randoop.Javac javac5 = javac2.sourcepath((java.util.Collection)set4);
    soottocfg.randoop.Javac javac6 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac7 = javac6.debug();
    soottocfg.cfg.util.Tree tree8 = new soottocfg.cfg.util.Tree();
    java.util.Set set9 = tree8.getLeaves();
    soottocfg.randoop.Javac javac10 = javac7.sourcepath((java.util.Collection)set9);
    soottocfg.randoop.Javac javac11 = javac2.sourcepath((java.util.Collection)set9);
    soottocfg.cfg.ClassVariable classVariable12 = new soottocfg.cfg.ClassVariable("\\forall int v0; -1 = 0 <- -1*-1", (java.util.Collection)set9);
    soottocfg.cfg.Variable[] variable_array13 = classVariable12.getAssociatedFields();
    java.lang.String str14 = classVariable12.toString();
    boolean b15 = classVariable12.isConstant();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(variable_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\\forall int v0; -1 = 0 <- -1*-1"+ "'", str14.equals("\\forall int v0; -1 = 0 <- -1*-1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);

  }

  @Test
  public void test135() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test135"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array1 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr2 = princessProver0.mkOr(proverExpr_array1);
    jayhorn.solver.princess.PrincessProver princessProver3 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver4 = new jayhorn.solver.princess.PrincessProver();
    princessProver4.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver7 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array8 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr9 = princessProver7.mkOr(proverExpr_array8);
    jayhorn.solver.ProverExpr proverExpr10 = princessProver4.mkOr(proverExpr_array8);
    jayhorn.solver.BoolType boolType12 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str13 = boolType12.toString();
    jayhorn.solver.ProverType[] proverType_array14 = new jayhorn.solver.ProverType[] { boolType12 };
    jayhorn.solver.princess.PrincessProver princessProver15 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array16 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr17 = princessProver15.mkOr(proverExpr_array16);
    jayhorn.solver.ProverFun proverFun18 = princessProver4.mkDefinedFunction("hi!", proverType_array14, proverExpr17);
    jayhorn.solver.ProverExpr proverExpr20 = princessProver4.mkLiteral((-1));
    jayhorn.solver.IntType intType21 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr22 = princessProver3.mkAll(proverExpr20, (jayhorn.solver.ProverType)intType21);
    jayhorn.solver.princess.PrincessProver princessProver23 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array24 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr25 = princessProver23.mkOr(proverExpr_array24);
    jayhorn.solver.princess.PrincessProver princessProver26 = new jayhorn.solver.princess.PrincessProver();
    princessProver26.setPartitionNumber((-1));
    princessProver26.reset();
    jayhorn.solver.princess.PrincessProver princessProver30 = new jayhorn.solver.princess.PrincessProver();
    princessProver30.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver33 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array34 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr35 = princessProver33.mkOr(proverExpr_array34);
    jayhorn.solver.ProverExpr proverExpr36 = princessProver30.mkOr(proverExpr_array34);
    jayhorn.solver.BoolType boolType38 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str39 = boolType38.toString();
    jayhorn.solver.ProverType[] proverType_array40 = new jayhorn.solver.ProverType[] { boolType38 };
    jayhorn.solver.princess.PrincessProver princessProver41 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array42 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr43 = princessProver41.mkOr(proverExpr_array42);
    jayhorn.solver.ProverFun proverFun44 = princessProver30.mkDefinedFunction("hi!", proverType_array40, proverExpr43);
    jayhorn.solver.ProverExpr proverExpr46 = princessProver30.mkLiteral((-1));
    jayhorn.solver.ProverExpr proverExpr47 = princessProver26.mkNeg(proverExpr46);
    jayhorn.solver.z3.Z3HornExpr z3HornExpr48 = new jayhorn.solver.z3.Z3HornExpr(proverExpr22, proverExpr_array24, proverExpr47);
    jayhorn.solver.ProverExpr proverExpr49 = z3HornExpr48.getHead();
    jayhorn.solver.ProverExpr proverExpr50 = z3HornExpr48.getHead();
    jayhorn.solver.ProverExpr proverExpr51 = z3HornExpr48.getConstraint();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str52 = princessProver0.proverExprToSMT(proverExpr51);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Bool"+ "'", str13.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "Bool"+ "'", str39.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr51);

  }

  @Test
  public void test136() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test136"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    princessProver0.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver3 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array4 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr5 = princessProver3.mkOr(proverExpr_array4);
    jayhorn.solver.ProverExpr proverExpr6 = princessProver0.mkOr(proverExpr_array4);
    jayhorn.solver.BoolType boolType8 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str9 = boolType8.toString();
    jayhorn.solver.ProverType[] proverType_array10 = new jayhorn.solver.ProverType[] { boolType8 };
    jayhorn.solver.princess.PrincessProver princessProver11 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array12 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr13 = princessProver11.mkOr(proverExpr_array12);
    jayhorn.solver.ProverFun proverFun14 = princessProver0.mkDefinedFunction("hi!", proverType_array10, proverExpr13);
    princessProver0.setPartitionNumber(10);
    jayhorn.solver.ProverType proverType17 = princessProver0.getBooleanType();
    jayhorn.solver.princess.PrincessProver princessProver18 = new jayhorn.solver.princess.PrincessProver();
    princessProver18.setPartitionNumber((-1));
    princessProver18.reset();
    jayhorn.solver.princess.PrincessProver princessProver22 = new jayhorn.solver.princess.PrincessProver();
    princessProver22.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver25 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array26 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr27 = princessProver25.mkOr(proverExpr_array26);
    jayhorn.solver.ProverExpr proverExpr28 = princessProver22.mkOr(proverExpr_array26);
    jayhorn.solver.princess.PrincessProver princessProver29 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver30 = new jayhorn.solver.princess.PrincessProver();
    princessProver30.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver33 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array34 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr35 = princessProver33.mkOr(proverExpr_array34);
    jayhorn.solver.ProverExpr proverExpr36 = princessProver30.mkOr(proverExpr_array34);
    jayhorn.solver.BoolType boolType38 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str39 = boolType38.toString();
    jayhorn.solver.ProverType[] proverType_array40 = new jayhorn.solver.ProverType[] { boolType38 };
    jayhorn.solver.princess.PrincessProver princessProver41 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array42 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr43 = princessProver41.mkOr(proverExpr_array42);
    jayhorn.solver.ProverFun proverFun44 = princessProver30.mkDefinedFunction("hi!", proverType_array40, proverExpr43);
    jayhorn.solver.ProverExpr proverExpr46 = princessProver30.mkLiteral((-1));
    jayhorn.solver.IntType intType47 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr48 = princessProver29.mkAll(proverExpr46, (jayhorn.solver.ProverType)intType47);
    jayhorn.solver.ProverExpr proverExpr49 = princessProver18.mkAnd(proverExpr28, proverExpr48);
    jayhorn.solver.princess.PrincessProver princessProver51 = new jayhorn.solver.princess.PrincessProver();
    princessProver51.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver54 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array55 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr56 = princessProver54.mkOr(proverExpr_array55);
    jayhorn.solver.ProverExpr proverExpr57 = princessProver51.mkOr(proverExpr_array55);
    jayhorn.solver.BoolType boolType59 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str60 = boolType59.toString();
    jayhorn.solver.ProverType[] proverType_array61 = new jayhorn.solver.ProverType[] { boolType59 };
    jayhorn.solver.princess.PrincessProver princessProver62 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array63 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr64 = princessProver62.mkOr(proverExpr_array63);
    jayhorn.solver.ProverFun proverFun65 = princessProver51.mkDefinedFunction("hi!", proverType_array61, proverExpr64);
    jayhorn.solver.princess.PrincessProver princessProver67 = new jayhorn.solver.princess.PrincessProver();
    princessProver67.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver70 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array71 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr72 = princessProver70.mkOr(proverExpr_array71);
    jayhorn.solver.ProverExpr proverExpr73 = princessProver67.mkOr(proverExpr_array71);
    jayhorn.solver.BoolType boolType75 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str76 = boolType75.toString();
    jayhorn.solver.ProverType[] proverType_array77 = new jayhorn.solver.ProverType[] { boolType75 };
    jayhorn.solver.princess.PrincessProver princessProver78 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array79 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr80 = princessProver78.mkOr(proverExpr_array79);
    jayhorn.solver.ProverFun proverFun81 = princessProver67.mkDefinedFunction("hi!", proverType_array77, proverExpr80);
    jayhorn.solver.BoolType boolType82 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str83 = boolType82.toString();
    jayhorn.solver.ProverFun proverFun84 = princessProver51.mkUnintFunction("", proverType_array77, (jayhorn.solver.ProverType)boolType82);
    jayhorn.solver.princess.PrincessProver princessProver85 = new jayhorn.solver.princess.PrincessProver();
    princessProver85.setConstructProofs(true);
    jayhorn.solver.ProverResult proverResult89 = princessProver85.getResult(true);
    jayhorn.solver.ProverType proverType90 = princessProver85.getIntType();
    jayhorn.solver.ProverFun proverFun91 = princessProver18.mkUnintFunction("Bool", proverType_array77, proverType90);
    jayhorn.solver.princess.PrincessProver princessProver93 = new jayhorn.solver.princess.PrincessProver("Bool");
    jayhorn.solver.ProverType proverType94 = princessProver93.getIntType();
    jayhorn.solver.ProverType proverType95 = princessProver0.getArrayType(proverType_array77, proverType94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Bool"+ "'", str9.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "Bool"+ "'", str39.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "Bool"+ "'", str60.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "Bool"+ "'", str76.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str83 + "' != '" + "Bool"+ "'", str83.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverResult89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType95);

  }

  @Test
  public void test137() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test137"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver1 = new jayhorn.solver.princess.PrincessProver();
    princessProver1.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver4 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array5 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr6 = princessProver4.mkOr(proverExpr_array5);
    jayhorn.solver.ProverExpr proverExpr7 = princessProver1.mkOr(proverExpr_array5);
    jayhorn.solver.BoolType boolType9 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str10 = boolType9.toString();
    jayhorn.solver.ProverType[] proverType_array11 = new jayhorn.solver.ProverType[] { boolType9 };
    jayhorn.solver.princess.PrincessProver princessProver12 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array13 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr14 = princessProver12.mkOr(proverExpr_array13);
    jayhorn.solver.ProverFun proverFun15 = princessProver1.mkDefinedFunction("hi!", proverType_array11, proverExpr14);
    jayhorn.solver.ProverExpr proverExpr17 = princessProver1.mkLiteral((-1));
    jayhorn.solver.IntType intType18 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr19 = princessProver0.mkAll(proverExpr17, (jayhorn.solver.ProverType)intType18);
    jayhorn.solver.princess.PrincessProver princessProver20 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array21 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr22 = princessProver20.mkOr(proverExpr_array21);
    jayhorn.solver.princess.PrincessProver princessProver23 = new jayhorn.solver.princess.PrincessProver();
    princessProver23.setPartitionNumber((-1));
    princessProver23.reset();
    jayhorn.solver.princess.PrincessProver princessProver27 = new jayhorn.solver.princess.PrincessProver();
    princessProver27.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver30 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array31 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr32 = princessProver30.mkOr(proverExpr_array31);
    jayhorn.solver.ProverExpr proverExpr33 = princessProver27.mkOr(proverExpr_array31);
    jayhorn.solver.BoolType boolType35 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str36 = boolType35.toString();
    jayhorn.solver.ProverType[] proverType_array37 = new jayhorn.solver.ProverType[] { boolType35 };
    jayhorn.solver.princess.PrincessProver princessProver38 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array39 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr40 = princessProver38.mkOr(proverExpr_array39);
    jayhorn.solver.ProverFun proverFun41 = princessProver27.mkDefinedFunction("hi!", proverType_array37, proverExpr40);
    jayhorn.solver.ProverExpr proverExpr43 = princessProver27.mkLiteral((-1));
    jayhorn.solver.ProverExpr proverExpr44 = princessProver23.mkNeg(proverExpr43);
    jayhorn.solver.z3.Z3HornExpr z3HornExpr45 = new jayhorn.solver.z3.Z3HornExpr(proverExpr19, proverExpr_array21, proverExpr44);
    jayhorn.solver.ProverExpr proverExpr46 = z3HornExpr45.getHead();
    jayhorn.solver.ProverExpr proverExpr47 = z3HornExpr45.getHead();
    // The following exception was thrown during execution in test generation
    try {
      jayhorn.solver.ProverFun proverFun48 = z3HornExpr45.getHeadFun();
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Bool"+ "'", str10.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Bool"+ "'", str36.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr47);

  }

  @Test
  public void test138() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test138"); }


    soottocfg.randoop.Javac javac0 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac1 = javac0.debug();
    soottocfg.cfg.util.Tree tree2 = new soottocfg.cfg.util.Tree();
    java.util.Set set3 = tree2.getLeaves();
    soottocfg.randoop.Javac javac4 = javac1.sourcepath((java.util.Collection)set3);
    boolean b5 = javac1.inDebugMode();
    boolean b6 = javac1.inDebugMode();
    soottocfg.randoop.Classpath classpath7 = new soottocfg.randoop.Classpath();
    soottocfg.randoop.Javac javac8 = javac1.classpath(classpath7);
    soottocfg.randoop.Javac javac9 = javac1.debug();
    soottocfg.randoop.Javac javac10 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac11 = javac10.debug();
    soottocfg.cfg.util.Tree tree12 = new soottocfg.cfg.util.Tree();
    java.util.Set set13 = tree12.getLeaves();
    soottocfg.randoop.Javac javac14 = javac11.sourcepath((java.util.Collection)set13);
    java.io.File[] file_array15 = new java.io.File[] {  };
    soottocfg.randoop.Javac javac16 = javac14.sourcepath(file_array15);
    soottocfg.randoop.Javac javac17 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac18 = javac17.debug();
    soottocfg.cfg.util.Tree tree19 = new soottocfg.cfg.util.Tree();
    java.util.Set set20 = tree19.getLeaves();
    soottocfg.randoop.Javac javac21 = javac18.sourcepath((java.util.Collection)set20);
    boolean b22 = javac18.inDebugMode();
    soottocfg.randoop.Javac javac23 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac24 = javac23.debug();
    soottocfg.cfg.util.Tree tree25 = new soottocfg.cfg.util.Tree();
    java.util.Set set26 = tree25.getLeaves();
    soottocfg.randoop.Javac javac27 = javac24.sourcepath((java.util.Collection)set26);
    soottocfg.randoop.Javac javac28 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac29 = javac28.debug();
    soottocfg.cfg.util.Tree tree30 = new soottocfg.cfg.util.Tree();
    java.util.Set set31 = tree30.getLeaves();
    soottocfg.randoop.Javac javac32 = javac29.sourcepath((java.util.Collection)set31);
    soottocfg.randoop.Javac javac33 = javac24.sourcepath((java.util.Collection)set31);
    soottocfg.randoop.Javac javac34 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac35 = javac34.debug();
    soottocfg.cfg.util.Tree tree36 = new soottocfg.cfg.util.Tree();
    java.util.Set set37 = tree36.getLeaves();
    soottocfg.randoop.Javac javac38 = javac35.sourcepath((java.util.Collection)set37);
    boolean b39 = javac35.inDebugMode();
    boolean b40 = javac35.inDebugMode();
    soottocfg.randoop.Classpath classpath41 = new soottocfg.randoop.Classpath();
    soottocfg.randoop.Javac javac42 = javac35.classpath(classpath41);
    soottocfg.randoop.Javac javac43 = javac24.bootClasspath(classpath41);
    soottocfg.randoop.Javac javac44 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac45 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac46 = javac45.debug();
    soottocfg.cfg.util.Tree tree47 = new soottocfg.cfg.util.Tree();
    java.util.Set set48 = tree47.getLeaves();
    soottocfg.randoop.Javac javac49 = javac46.sourcepath((java.util.Collection)set48);
    soottocfg.randoop.Javac javac50 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac51 = javac50.debug();
    soottocfg.cfg.util.Tree tree52 = new soottocfg.cfg.util.Tree();
    java.util.Set set53 = tree52.getLeaves();
    soottocfg.randoop.Javac javac54 = javac51.sourcepath((java.util.Collection)set53);
    soottocfg.randoop.Javac javac55 = javac46.sourcepath((java.util.Collection)set53);
    soottocfg.randoop.Javac javac56 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac57 = javac56.debug();
    soottocfg.cfg.util.Tree tree58 = new soottocfg.cfg.util.Tree();
    java.util.Set set59 = tree58.getLeaves();
    soottocfg.randoop.Javac javac60 = javac57.sourcepath((java.util.Collection)set59);
    boolean b61 = javac57.inDebugMode();
    boolean b62 = javac57.inDebugMode();
    soottocfg.randoop.Classpath classpath63 = new soottocfg.randoop.Classpath();
    soottocfg.randoop.Javac javac64 = javac57.classpath(classpath63);
    soottocfg.randoop.Javac javac65 = javac46.bootClasspath(classpath63);
    java.util.List list66 = javac65.version();
    javac44.log(list66);
    soottocfg.randoop.Javac javac68 = javac43.extraArgs(list66);
    javac18.log(list66);
    soottocfg.randoop.Command command70 = new soottocfg.randoop.Command(list66);
    soottocfg.randoop.Javac javac71 = javac16.extraArgs(list66);
    javac9.log(list66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(file_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac71);

  }

  @Test
  public void test139() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test139"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver1 = new jayhorn.solver.princess.PrincessProver();
    princessProver1.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver4 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array5 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr6 = princessProver4.mkOr(proverExpr_array5);
    jayhorn.solver.ProverExpr proverExpr7 = princessProver1.mkOr(proverExpr_array5);
    jayhorn.solver.BoolType boolType9 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str10 = boolType9.toString();
    jayhorn.solver.ProverType[] proverType_array11 = new jayhorn.solver.ProverType[] { boolType9 };
    jayhorn.solver.princess.PrincessProver princessProver12 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array13 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr14 = princessProver12.mkOr(proverExpr_array13);
    jayhorn.solver.ProverFun proverFun15 = princessProver1.mkDefinedFunction("hi!", proverType_array11, proverExpr14);
    jayhorn.solver.ProverExpr proverExpr17 = princessProver1.mkLiteral((-1));
    jayhorn.solver.IntType intType18 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr19 = princessProver0.mkAll(proverExpr17, (jayhorn.solver.ProverType)intType18);
    jayhorn.solver.princess.PrincessProver princessProver20 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array21 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr22 = princessProver20.mkOr(proverExpr_array21);
    jayhorn.solver.princess.PrincessProver princessProver23 = new jayhorn.solver.princess.PrincessProver();
    princessProver23.setPartitionNumber((-1));
    princessProver23.reset();
    jayhorn.solver.princess.PrincessProver princessProver27 = new jayhorn.solver.princess.PrincessProver();
    princessProver27.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver30 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array31 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr32 = princessProver30.mkOr(proverExpr_array31);
    jayhorn.solver.ProverExpr proverExpr33 = princessProver27.mkOr(proverExpr_array31);
    jayhorn.solver.BoolType boolType35 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str36 = boolType35.toString();
    jayhorn.solver.ProverType[] proverType_array37 = new jayhorn.solver.ProverType[] { boolType35 };
    jayhorn.solver.princess.PrincessProver princessProver38 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array39 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr40 = princessProver38.mkOr(proverExpr_array39);
    jayhorn.solver.ProverFun proverFun41 = princessProver27.mkDefinedFunction("hi!", proverType_array37, proverExpr40);
    jayhorn.solver.ProverExpr proverExpr43 = princessProver27.mkLiteral((-1));
    jayhorn.solver.ProverExpr proverExpr44 = princessProver23.mkNeg(proverExpr43);
    jayhorn.solver.z3.Z3HornExpr z3HornExpr45 = new jayhorn.solver.z3.Z3HornExpr(proverExpr19, proverExpr_array21, proverExpr44);
    jayhorn.solver.ProverExpr proverExpr46 = z3HornExpr45.getHead();
    jayhorn.solver.ProverExpr proverExpr47 = z3HornExpr45.getHead();
    jayhorn.solver.ProverExpr[] proverExpr_array48 = z3HornExpr45.getBody();
    // The following exception was thrown during execution in test generation
    try {
      jayhorn.solver.ProverFun proverFun50 = z3HornExpr45.getBodyFun(100);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Bool"+ "'", str10.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Bool"+ "'", str36.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array48);

  }

  @Test
  public void test140() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test140"); }


    soottocfg.randoop.Javac javac0 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac1 = javac0.debug();
    java.util.List list2 = javac1.version();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);

  }

  @Test
  public void test141() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test141"); }


    soottocfg.cfg.util.Tree tree0 = new soottocfg.cfg.util.Tree();
    jayhorn.solver.princess.PrincessProver princessProver1 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array2 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr3 = princessProver1.mkOr(proverExpr_array2);
    jayhorn.solver.BoolType boolType5 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str6 = boolType5.toString();
    jayhorn.solver.ProverExpr proverExpr7 = princessProver1.mkHornVariable("hi!", (jayhorn.solver.ProverType)boolType5);
    jayhorn.util.SimplCfgToProver simplCfgToProver8 = new jayhorn.util.SimplCfgToProver((jayhorn.solver.Prover)princessProver1);
    jayhorn.solver.ArrayType arrayType11 = new jayhorn.solver.ArrayType(10);
    soottocfg.randoop.Javac javac12 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac13 = javac12.debug();
    soottocfg.cfg.util.Tree tree14 = new soottocfg.cfg.util.Tree();
    java.util.Set set15 = tree14.getLeaves();
    soottocfg.randoop.Javac javac16 = javac13.sourcepath((java.util.Collection)set15);
    soottocfg.randoop.Javac javac17 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac18 = javac17.debug();
    soottocfg.cfg.util.Tree tree19 = new soottocfg.cfg.util.Tree();
    java.util.Set set20 = tree19.getLeaves();
    soottocfg.randoop.Javac javac21 = javac18.sourcepath((java.util.Collection)set20);
    soottocfg.randoop.Javac javac22 = javac13.sourcepath((java.util.Collection)set20);
    soottocfg.randoop.Javac javac23 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac24 = javac23.debug();
    soottocfg.cfg.util.Tree tree25 = new soottocfg.cfg.util.Tree();
    java.util.Set set26 = tree25.getLeaves();
    soottocfg.randoop.Javac javac27 = javac24.sourcepath((java.util.Collection)set26);
    boolean b28 = javac24.inDebugMode();
    boolean b29 = javac24.inDebugMode();
    soottocfg.randoop.Classpath classpath30 = new soottocfg.randoop.Classpath();
    soottocfg.randoop.Javac javac31 = javac24.classpath(classpath30);
    soottocfg.randoop.Javac javac32 = javac13.bootClasspath(classpath30);
    java.util.List list33 = javac32.version();
    boolean b34 = arrayType11.equals((java.lang.Object)javac32);
    jayhorn.solver.ProverExpr proverExpr35 = princessProver1.mkHornVariable("", (jayhorn.solver.ProverType)arrayType11);
    jayhorn.solver.princess.PrincessProver princessProver36 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver37 = new jayhorn.solver.princess.PrincessProver();
    princessProver37.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver40 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array41 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr42 = princessProver40.mkOr(proverExpr_array41);
    jayhorn.solver.ProverExpr proverExpr43 = princessProver37.mkOr(proverExpr_array41);
    jayhorn.solver.BoolType boolType45 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str46 = boolType45.toString();
    jayhorn.solver.ProverType[] proverType_array47 = new jayhorn.solver.ProverType[] { boolType45 };
    jayhorn.solver.princess.PrincessProver princessProver48 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array49 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr50 = princessProver48.mkOr(proverExpr_array49);
    jayhorn.solver.ProverFun proverFun51 = princessProver37.mkDefinedFunction("hi!", proverType_array47, proverExpr50);
    jayhorn.solver.ProverExpr proverExpr53 = princessProver37.mkLiteral((-1));
    jayhorn.solver.IntType intType54 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr55 = princessProver36.mkAll(proverExpr53, (jayhorn.solver.ProverType)intType54);
    jayhorn.solver.princess.PrincessProver princessProver56 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array57 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr58 = princessProver56.mkOr(proverExpr_array57);
    jayhorn.solver.princess.PrincessProver princessProver59 = new jayhorn.solver.princess.PrincessProver();
    princessProver59.setPartitionNumber((-1));
    princessProver59.reset();
    jayhorn.solver.princess.PrincessProver princessProver63 = new jayhorn.solver.princess.PrincessProver();
    princessProver63.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver66 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array67 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr68 = princessProver66.mkOr(proverExpr_array67);
    jayhorn.solver.ProverExpr proverExpr69 = princessProver63.mkOr(proverExpr_array67);
    jayhorn.solver.BoolType boolType71 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str72 = boolType71.toString();
    jayhorn.solver.ProverType[] proverType_array73 = new jayhorn.solver.ProverType[] { boolType71 };
    jayhorn.solver.princess.PrincessProver princessProver74 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array75 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr76 = princessProver74.mkOr(proverExpr_array75);
    jayhorn.solver.ProverFun proverFun77 = princessProver63.mkDefinedFunction("hi!", proverType_array73, proverExpr76);
    jayhorn.solver.ProverExpr proverExpr79 = princessProver63.mkLiteral((-1));
    jayhorn.solver.ProverExpr proverExpr80 = princessProver59.mkNeg(proverExpr79);
    jayhorn.solver.z3.Z3HornExpr z3HornExpr81 = new jayhorn.solver.z3.Z3HornExpr(proverExpr55, proverExpr_array57, proverExpr80);
    jayhorn.solver.ProverExpr proverExpr82 = z3HornExpr81.getHead();
    jayhorn.solver.ProverExpr proverExpr83 = z3HornExpr81.getHead();
    jayhorn.solver.ProverExpr[] proverExpr_array84 = z3HornExpr81.getBody();
    tree0.addEdge((java.lang.Object)"", (java.lang.Object)z3HornExpr81);
    java.util.Set set86 = tree0.getLeaves();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "Bool"+ "'", str6.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "Bool"+ "'", str46.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "Bool"+ "'", str72.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set86);

  }

  @Test
  public void test142() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test142"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array1 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr2 = princessProver0.mkOr(proverExpr_array1);
    jayhorn.solver.BoolType boolType4 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str5 = boolType4.toString();
    jayhorn.solver.ProverExpr proverExpr6 = princessProver0.mkHornVariable("hi!", (jayhorn.solver.ProverType)boolType4);
    jayhorn.solver.ProverType proverType7 = princessProver0.getIntType();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Bool"+ "'", str5.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType7);

  }

  @Test
  public void test143() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test143"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array1 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr2 = princessProver0.mkOr(proverExpr_array1);
    jayhorn.solver.princess.PrincessProver princessProver3 = new jayhorn.solver.princess.PrincessProver();
    princessProver3.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver6 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array7 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr8 = princessProver6.mkOr(proverExpr_array7);
    jayhorn.solver.ProverExpr proverExpr9 = princessProver3.mkOr(proverExpr_array7);
    jayhorn.solver.princess.PrincessProver princessProver10 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver11 = new jayhorn.solver.princess.PrincessProver();
    princessProver11.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver14 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array15 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr16 = princessProver14.mkOr(proverExpr_array15);
    jayhorn.solver.ProverExpr proverExpr17 = princessProver11.mkOr(proverExpr_array15);
    jayhorn.solver.BoolType boolType19 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str20 = boolType19.toString();
    jayhorn.solver.ProverType[] proverType_array21 = new jayhorn.solver.ProverType[] { boolType19 };
    jayhorn.solver.princess.PrincessProver princessProver22 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array23 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr24 = princessProver22.mkOr(proverExpr_array23);
    jayhorn.solver.ProverFun proverFun25 = princessProver11.mkDefinedFunction("hi!", proverType_array21, proverExpr24);
    jayhorn.solver.ProverExpr proverExpr27 = princessProver11.mkLiteral((-1));
    jayhorn.solver.IntType intType28 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr29 = princessProver10.mkAll(proverExpr27, (jayhorn.solver.ProverType)intType28);
    jayhorn.solver.ProverExpr proverExpr30 = princessProver0.mkImplies(proverExpr9, proverExpr29);
    jayhorn.solver.princess.PrincessProver princessProver31 = new jayhorn.solver.princess.PrincessProver();
    princessProver31.setPartitionNumber((-1));
    princessProver31.reset();
    jayhorn.solver.ProverExpr proverExpr36 = princessProver31.mkLiteral(true);
    jayhorn.solver.princess.PrincessProver princessProver37 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver38 = new jayhorn.solver.princess.PrincessProver();
    princessProver38.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver41 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array42 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr43 = princessProver41.mkOr(proverExpr_array42);
    jayhorn.solver.ProverExpr proverExpr44 = princessProver38.mkOr(proverExpr_array42);
    jayhorn.solver.BoolType boolType46 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str47 = boolType46.toString();
    jayhorn.solver.ProverType[] proverType_array48 = new jayhorn.solver.ProverType[] { boolType46 };
    jayhorn.solver.princess.PrincessProver princessProver49 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array50 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr51 = princessProver49.mkOr(proverExpr_array50);
    jayhorn.solver.ProverFun proverFun52 = princessProver38.mkDefinedFunction("hi!", proverType_array48, proverExpr51);
    jayhorn.solver.ProverExpr proverExpr54 = princessProver38.mkLiteral((-1));
    jayhorn.solver.IntType intType55 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr56 = princessProver37.mkAll(proverExpr54, (jayhorn.solver.ProverType)intType55);
    jayhorn.solver.princess.PrincessProver princessProver57 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array58 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr59 = princessProver57.mkOr(proverExpr_array58);
    jayhorn.solver.princess.PrincessProver princessProver60 = new jayhorn.solver.princess.PrincessProver();
    princessProver60.setPartitionNumber((-1));
    princessProver60.reset();
    jayhorn.solver.princess.PrincessProver princessProver64 = new jayhorn.solver.princess.PrincessProver();
    princessProver64.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver67 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array68 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr69 = princessProver67.mkOr(proverExpr_array68);
    jayhorn.solver.ProverExpr proverExpr70 = princessProver64.mkOr(proverExpr_array68);
    jayhorn.solver.BoolType boolType72 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str73 = boolType72.toString();
    jayhorn.solver.ProverType[] proverType_array74 = new jayhorn.solver.ProverType[] { boolType72 };
    jayhorn.solver.princess.PrincessProver princessProver75 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array76 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr77 = princessProver75.mkOr(proverExpr_array76);
    jayhorn.solver.ProverFun proverFun78 = princessProver64.mkDefinedFunction("hi!", proverType_array74, proverExpr77);
    jayhorn.solver.ProverExpr proverExpr80 = princessProver64.mkLiteral((-1));
    jayhorn.solver.ProverExpr proverExpr81 = princessProver60.mkNeg(proverExpr80);
    jayhorn.solver.z3.Z3HornExpr z3HornExpr82 = new jayhorn.solver.z3.Z3HornExpr(proverExpr56, proverExpr_array58, proverExpr81);
    jayhorn.solver.ProverExpr proverExpr83 = z3HornExpr82.getHead();
    jayhorn.solver.ProverExpr proverExpr84 = z3HornExpr82.getHead();
    jayhorn.solver.ProverExpr[] proverExpr_array85 = z3HornExpr82.getBody();
    jayhorn.solver.ProverExpr proverExpr86 = princessProver31.mkAnd(proverExpr_array85);
    jayhorn.solver.princess.PrincessProver princessProver87 = new jayhorn.solver.princess.PrincessProver();
    princessProver87.setPartitionNumber((-1));
    princessProver87.reset();
    jayhorn.solver.ProverExpr proverExpr92 = princessProver87.mkLiteral(true);
    jayhorn.solver.z3.Z3HornExpr z3HornExpr93 = new jayhorn.solver.z3.Z3HornExpr(proverExpr29, proverExpr_array85, proverExpr92);
    jayhorn.solver.ProverExpr proverExpr94 = z3HornExpr93.getHead();
    // The following exception was thrown during execution in test generation
    try {
      jayhorn.solver.ProverFun proverFun96 = z3HornExpr93.getBodyFun(100);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Bool"+ "'", str20.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "Bool"+ "'", str47.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + "Bool"+ "'", str73.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr94);

  }

  @Test
  public void test144() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test144"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    princessProver0.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver3 = new jayhorn.solver.princess.PrincessProver();
    princessProver3.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver6 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array7 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr8 = princessProver6.mkOr(proverExpr_array7);
    jayhorn.solver.ProverExpr proverExpr9 = princessProver3.mkOr(proverExpr_array7);
    jayhorn.solver.BoolType boolType11 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str12 = boolType11.toString();
    jayhorn.solver.ProverType[] proverType_array13 = new jayhorn.solver.ProverType[] { boolType11 };
    jayhorn.solver.princess.PrincessProver princessProver14 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array15 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr16 = princessProver14.mkOr(proverExpr_array15);
    jayhorn.solver.ProverFun proverFun17 = princessProver3.mkDefinedFunction("hi!", proverType_array13, proverExpr16);
    princessProver3.setPartitionNumber(10);
    jayhorn.solver.ProverResult proverResult21 = princessProver3.checkSat(false);
    jayhorn.solver.princess.PrincessProver princessProver23 = new jayhorn.solver.princess.PrincessProver();
    princessProver23.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver26 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array27 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr28 = princessProver26.mkOr(proverExpr_array27);
    jayhorn.solver.ProverExpr proverExpr29 = princessProver23.mkOr(proverExpr_array27);
    jayhorn.solver.BoolType boolType31 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str32 = boolType31.toString();
    jayhorn.solver.ProverType[] proverType_array33 = new jayhorn.solver.ProverType[] { boolType31 };
    jayhorn.solver.princess.PrincessProver princessProver34 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array35 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr36 = princessProver34.mkOr(proverExpr_array35);
    jayhorn.solver.ProverFun proverFun37 = princessProver23.mkDefinedFunction("hi!", proverType_array33, proverExpr36);
    princessProver23.setPartitionNumber(10);
    jayhorn.solver.ProverType proverType40 = princessProver23.getBooleanType();
    jayhorn.solver.ProverExpr proverExpr41 = princessProver3.mkHornVariable("Array(10)", proverType40);
    jayhorn.solver.princess.PrincessProver princessProver42 = new jayhorn.solver.princess.PrincessProver();
    princessProver42.setPartitionNumber((-1));
    princessProver42.reset();
    jayhorn.solver.princess.PrincessProver princessProver46 = new jayhorn.solver.princess.PrincessProver();
    princessProver46.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver49 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array50 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr51 = princessProver49.mkOr(proverExpr_array50);
    jayhorn.solver.ProverExpr proverExpr52 = princessProver46.mkOr(proverExpr_array50);
    jayhorn.solver.BoolType boolType54 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str55 = boolType54.toString();
    jayhorn.solver.ProverType[] proverType_array56 = new jayhorn.solver.ProverType[] { boolType54 };
    jayhorn.solver.princess.PrincessProver princessProver57 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array58 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr59 = princessProver57.mkOr(proverExpr_array58);
    jayhorn.solver.ProverFun proverFun60 = princessProver46.mkDefinedFunction("hi!", proverType_array56, proverExpr59);
    jayhorn.solver.ProverExpr proverExpr62 = princessProver46.mkLiteral((-1));
    jayhorn.solver.ProverExpr proverExpr63 = princessProver42.mkNeg(proverExpr62);
    jayhorn.solver.ProverExpr proverExpr64 = princessProver0.mkPlus(proverExpr41, proverExpr63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Bool"+ "'", str12.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverResult21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Bool"+ "'", str32.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "Bool"+ "'", str55.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr64);

  }

  @Test
  public void test145() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test145"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver1 = new jayhorn.solver.princess.PrincessProver();
    princessProver1.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver4 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array5 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr6 = princessProver4.mkOr(proverExpr_array5);
    jayhorn.solver.ProverExpr proverExpr7 = princessProver1.mkOr(proverExpr_array5);
    jayhorn.solver.BoolType boolType9 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str10 = boolType9.toString();
    jayhorn.solver.ProverType[] proverType_array11 = new jayhorn.solver.ProverType[] { boolType9 };
    jayhorn.solver.princess.PrincessProver princessProver12 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array13 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr14 = princessProver12.mkOr(proverExpr_array13);
    jayhorn.solver.ProverFun proverFun15 = princessProver1.mkDefinedFunction("hi!", proverType_array11, proverExpr14);
    jayhorn.solver.ProverExpr proverExpr17 = princessProver1.mkLiteral((-1));
    jayhorn.solver.IntType intType18 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr19 = princessProver0.mkAll(proverExpr17, (jayhorn.solver.ProverType)intType18);
    jayhorn.solver.princess.PrincessProver princessProver20 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array21 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr22 = princessProver20.mkOr(proverExpr_array21);
    jayhorn.solver.princess.PrincessProver princessProver23 = new jayhorn.solver.princess.PrincessProver();
    princessProver23.setPartitionNumber((-1));
    princessProver23.reset();
    jayhorn.solver.princess.PrincessProver princessProver27 = new jayhorn.solver.princess.PrincessProver();
    princessProver27.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver30 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array31 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr32 = princessProver30.mkOr(proverExpr_array31);
    jayhorn.solver.ProverExpr proverExpr33 = princessProver27.mkOr(proverExpr_array31);
    jayhorn.solver.BoolType boolType35 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str36 = boolType35.toString();
    jayhorn.solver.ProverType[] proverType_array37 = new jayhorn.solver.ProverType[] { boolType35 };
    jayhorn.solver.princess.PrincessProver princessProver38 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array39 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr40 = princessProver38.mkOr(proverExpr_array39);
    jayhorn.solver.ProverFun proverFun41 = princessProver27.mkDefinedFunction("hi!", proverType_array37, proverExpr40);
    jayhorn.solver.ProverExpr proverExpr43 = princessProver27.mkLiteral((-1));
    jayhorn.solver.ProverExpr proverExpr44 = princessProver23.mkNeg(proverExpr43);
    jayhorn.solver.z3.Z3HornExpr z3HornExpr45 = new jayhorn.solver.z3.Z3HornExpr(proverExpr19, proverExpr_array21, proverExpr44);
    jayhorn.solver.ProverExpr proverExpr46 = z3HornExpr45.getHead();
    jayhorn.solver.ProverExpr proverExpr47 = z3HornExpr45.getHead();
    java.lang.String str48 = z3HornExpr45.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Bool"+ "'", str10.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Bool"+ "'", str36.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "\\forall int v0; -1 = 0 <- -1*-1"+ "'", str48.equals("\\forall int v0; -1 = 0 <- -1*-1"));

  }

  @Test
  public void test146() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test146"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    princessProver0.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver3 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array4 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr5 = princessProver3.mkOr(proverExpr_array4);
    jayhorn.solver.ProverExpr proverExpr6 = princessProver0.mkOr(proverExpr_array4);
    jayhorn.solver.BoolType boolType8 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str9 = boolType8.toString();
    jayhorn.solver.ProverType[] proverType_array10 = new jayhorn.solver.ProverType[] { boolType8 };
    jayhorn.solver.princess.PrincessProver princessProver11 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array12 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr13 = princessProver11.mkOr(proverExpr_array12);
    jayhorn.solver.ProverFun proverFun14 = princessProver0.mkDefinedFunction("hi!", proverType_array10, proverExpr13);
    princessProver0.setPartitionNumber(10);
    jayhorn.solver.ProverType proverType17 = princessProver0.getBooleanType();
    jayhorn.solver.princess.PrincessProver princessProver18 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver19 = new jayhorn.solver.princess.PrincessProver();
    princessProver19.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver22 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array23 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr24 = princessProver22.mkOr(proverExpr_array23);
    jayhorn.solver.ProverExpr proverExpr25 = princessProver19.mkOr(proverExpr_array23);
    jayhorn.solver.BoolType boolType27 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str28 = boolType27.toString();
    jayhorn.solver.ProverType[] proverType_array29 = new jayhorn.solver.ProverType[] { boolType27 };
    jayhorn.solver.princess.PrincessProver princessProver30 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array31 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr32 = princessProver30.mkOr(proverExpr_array31);
    jayhorn.solver.ProverFun proverFun33 = princessProver19.mkDefinedFunction("hi!", proverType_array29, proverExpr32);
    jayhorn.solver.ProverExpr proverExpr35 = princessProver19.mkLiteral((-1));
    jayhorn.solver.IntType intType36 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr37 = princessProver18.mkAll(proverExpr35, (jayhorn.solver.ProverType)intType36);
    jayhorn.solver.princess.PrincessProver princessProver38 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array39 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr40 = princessProver38.mkOr(proverExpr_array39);
    jayhorn.solver.princess.PrincessProver princessProver41 = new jayhorn.solver.princess.PrincessProver();
    princessProver41.setPartitionNumber((-1));
    princessProver41.reset();
    jayhorn.solver.princess.PrincessProver princessProver45 = new jayhorn.solver.princess.PrincessProver();
    princessProver45.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver48 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array49 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr50 = princessProver48.mkOr(proverExpr_array49);
    jayhorn.solver.ProverExpr proverExpr51 = princessProver45.mkOr(proverExpr_array49);
    jayhorn.solver.BoolType boolType53 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str54 = boolType53.toString();
    jayhorn.solver.ProverType[] proverType_array55 = new jayhorn.solver.ProverType[] { boolType53 };
    jayhorn.solver.princess.PrincessProver princessProver56 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array57 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr58 = princessProver56.mkOr(proverExpr_array57);
    jayhorn.solver.ProverFun proverFun59 = princessProver45.mkDefinedFunction("hi!", proverType_array55, proverExpr58);
    jayhorn.solver.ProverExpr proverExpr61 = princessProver45.mkLiteral((-1));
    jayhorn.solver.ProverExpr proverExpr62 = princessProver41.mkNeg(proverExpr61);
    jayhorn.solver.z3.Z3HornExpr z3HornExpr63 = new jayhorn.solver.z3.Z3HornExpr(proverExpr37, proverExpr_array39, proverExpr62);
    jayhorn.solver.ProverExpr proverExpr64 = z3HornExpr63.getHead();
    jayhorn.solver.ProverType proverType65 = z3HornExpr63.getType();
    // The following exception was thrown during execution in test generation
    try {
      jayhorn.solver.ProverExpr proverExpr66 = princessProver0.evaluate((jayhorn.solver.ProverExpr)z3HornExpr63);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Bool"+ "'", str9.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Bool"+ "'", str28.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "Bool"+ "'", str54.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType65);

  }

  @Test
  public void test147() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test147"); }


    jayhorn.solver.z3.Z3ProverFactory z3ProverFactory0 = new jayhorn.solver.z3.Z3ProverFactory();
    // The following exception was thrown during execution in test generation
    try {
      jayhorn.solver.Prover prover2 = z3ProverFactory0.spawnWithLog("javac 1.8.0_72");
      org.junit.Assert.fail("Expected exception of type java.lang.NoClassDefFoundError");
    } catch (java.lang.NoClassDefFoundError e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NoClassDefFoundError")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NoClassDefFoundError, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test148() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test148"); }


    soottocfg.cfg.SourceLocation sourceLocation2 = new soottocfg.cfg.SourceLocation("javac 1.8.0_72", 100);

  }

  @Test
  public void test149() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test149"); }


    soottocfg.randoop.Javac javac1 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac2 = javac1.debug();
    soottocfg.cfg.util.Tree tree3 = new soottocfg.cfg.util.Tree();
    java.util.Set set4 = tree3.getLeaves();
    soottocfg.randoop.Javac javac5 = javac2.sourcepath((java.util.Collection)set4);
    soottocfg.randoop.Javac javac6 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac7 = javac6.debug();
    soottocfg.cfg.util.Tree tree8 = new soottocfg.cfg.util.Tree();
    java.util.Set set9 = tree8.getLeaves();
    soottocfg.randoop.Javac javac10 = javac7.sourcepath((java.util.Collection)set9);
    soottocfg.randoop.Javac javac11 = javac2.sourcepath((java.util.Collection)set9);
    java.lang.String[] str_array12 = soottocfg.randoop.Strings.generateArrayOfStrings((java.util.Collection)set9);
    soottocfg.cfg.ClassVariable classVariable13 = new soottocfg.cfg.ClassVariable("\\forall int v0; -1 = 0 <- -1*-1", (java.util.Collection)set9);
    boolean b14 = classVariable13.isConstant();
    java.lang.String str15 = classVariable13.getName();
    java.lang.String str16 = classVariable13.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "\\forall int v0; -1 = 0 <- -1*-1"+ "'", str15.equals("\\forall int v0; -1 = 0 <- -1*-1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\\forall int v0; -1 = 0 <- -1*-1"+ "'", str16.equals("\\forall int v0; -1 = 0 <- -1*-1"));

  }

  @Test
  public void test150() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test150"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverType proverType1 = princessProver0.getBooleanType();
    jayhorn.solver.princess.PrincessProver princessProver2 = new jayhorn.solver.princess.PrincessProver();
    princessProver2.setPartitionNumber((-1));
    princessProver2.reset();
    jayhorn.solver.princess.PrincessProver princessProver6 = new jayhorn.solver.princess.PrincessProver();
    princessProver6.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver9 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array10 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr11 = princessProver9.mkOr(proverExpr_array10);
    jayhorn.solver.ProverExpr proverExpr12 = princessProver6.mkOr(proverExpr_array10);
    jayhorn.solver.BoolType boolType14 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str15 = boolType14.toString();
    jayhorn.solver.ProverType[] proverType_array16 = new jayhorn.solver.ProverType[] { boolType14 };
    jayhorn.solver.princess.PrincessProver princessProver17 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array18 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr19 = princessProver17.mkOr(proverExpr_array18);
    jayhorn.solver.ProverFun proverFun20 = princessProver6.mkDefinedFunction("hi!", proverType_array16, proverExpr19);
    jayhorn.solver.ProverExpr proverExpr22 = princessProver6.mkLiteral((-1));
    jayhorn.solver.ProverExpr proverExpr23 = princessProver2.mkNeg(proverExpr22);
    jayhorn.solver.princess.PrincessProver princessProver24 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array25 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr26 = princessProver24.mkOr(proverExpr_array25);
    jayhorn.solver.BoolType boolType28 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str29 = boolType28.toString();
    jayhorn.solver.ProverExpr proverExpr30 = princessProver24.mkHornVariable("hi!", (jayhorn.solver.ProverType)boolType28);
    jayhorn.util.SimplCfgToProver simplCfgToProver31 = new jayhorn.util.SimplCfgToProver((jayhorn.solver.Prover)princessProver24);
    jayhorn.solver.princess.PrincessProver princessProver32 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver33 = new jayhorn.solver.princess.PrincessProver();
    princessProver33.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver36 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array37 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr38 = princessProver36.mkOr(proverExpr_array37);
    jayhorn.solver.ProverExpr proverExpr39 = princessProver33.mkOr(proverExpr_array37);
    jayhorn.solver.BoolType boolType41 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str42 = boolType41.toString();
    jayhorn.solver.ProverType[] proverType_array43 = new jayhorn.solver.ProverType[] { boolType41 };
    jayhorn.solver.princess.PrincessProver princessProver44 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array45 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr46 = princessProver44.mkOr(proverExpr_array45);
    jayhorn.solver.ProverFun proverFun47 = princessProver33.mkDefinedFunction("hi!", proverType_array43, proverExpr46);
    jayhorn.solver.ProverExpr proverExpr49 = princessProver33.mkLiteral((-1));
    jayhorn.solver.IntType intType50 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr51 = princessProver32.mkAll(proverExpr49, (jayhorn.solver.ProverType)intType50);
    jayhorn.solver.princess.PrincessProver princessProver52 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array53 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr54 = princessProver52.mkOr(proverExpr_array53);
    jayhorn.solver.princess.PrincessProver princessProver55 = new jayhorn.solver.princess.PrincessProver();
    princessProver55.setPartitionNumber((-1));
    princessProver55.reset();
    jayhorn.solver.princess.PrincessProver princessProver59 = new jayhorn.solver.princess.PrincessProver();
    princessProver59.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver62 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array63 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr64 = princessProver62.mkOr(proverExpr_array63);
    jayhorn.solver.ProverExpr proverExpr65 = princessProver59.mkOr(proverExpr_array63);
    jayhorn.solver.BoolType boolType67 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str68 = boolType67.toString();
    jayhorn.solver.ProverType[] proverType_array69 = new jayhorn.solver.ProverType[] { boolType67 };
    jayhorn.solver.princess.PrincessProver princessProver70 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array71 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr72 = princessProver70.mkOr(proverExpr_array71);
    jayhorn.solver.ProverFun proverFun73 = princessProver59.mkDefinedFunction("hi!", proverType_array69, proverExpr72);
    jayhorn.solver.ProverExpr proverExpr75 = princessProver59.mkLiteral((-1));
    jayhorn.solver.ProverExpr proverExpr76 = princessProver55.mkNeg(proverExpr75);
    jayhorn.solver.z3.Z3HornExpr z3HornExpr77 = new jayhorn.solver.z3.Z3HornExpr(proverExpr51, proverExpr_array53, proverExpr76);
    jayhorn.solver.ProverExpr proverExpr78 = z3HornExpr77.getHead();
    jayhorn.solver.ProverExpr[] proverExpr_array79 = new jayhorn.solver.ProverExpr[] { proverExpr78 };
    jayhorn.solver.ProverExpr proverExpr80 = princessProver24.mkAnd(proverExpr_array79);
    // The following exception was thrown during execution in test generation
    try {
      jayhorn.solver.ProverExpr proverExpr81 = princessProver0.mkGt(proverExpr22, proverExpr80);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Bool"+ "'", str15.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "Bool"+ "'", str29.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "Bool"+ "'", str42.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "Bool"+ "'", str68.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr80);

  }

  @Test
  public void test151() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test151"); }


    soottocfg.randoop.Javac javac1 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac2 = javac1.debug();
    soottocfg.cfg.util.Tree tree3 = new soottocfg.cfg.util.Tree();
    java.util.Set set4 = tree3.getLeaves();
    soottocfg.randoop.Javac javac5 = javac2.sourcepath((java.util.Collection)set4);
    soottocfg.randoop.Javac javac6 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac7 = javac6.debug();
    soottocfg.cfg.util.Tree tree8 = new soottocfg.cfg.util.Tree();
    java.util.Set set9 = tree8.getLeaves();
    soottocfg.randoop.Javac javac10 = javac7.sourcepath((java.util.Collection)set9);
    soottocfg.randoop.Javac javac11 = javac2.sourcepath((java.util.Collection)set9);
    java.lang.String[] str_array12 = soottocfg.randoop.Strings.generateArrayOfStrings((java.util.Collection)set9);
    soottocfg.cfg.ClassVariable classVariable13 = new soottocfg.cfg.ClassVariable("Int", (java.util.Collection)set9);
    soottocfg.cfg.Variable[] variable_array14 = classVariable13.getAssociatedFields();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(variable_array14);

  }

  @Test
  public void test152() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test152"); }


    jayhorn.solver.Main main0 = new jayhorn.solver.Main();
    jayhorn.solver.princess.PrincessProver princessProver1 = new jayhorn.solver.princess.PrincessProver();
    princessProver1.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver4 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array5 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr6 = princessProver4.mkOr(proverExpr_array5);
    jayhorn.solver.ProverExpr proverExpr7 = princessProver1.mkOr(proverExpr_array5);
    jayhorn.solver.BoolType boolType9 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str10 = boolType9.toString();
    jayhorn.solver.ProverType[] proverType_array11 = new jayhorn.solver.ProverType[] { boolType9 };
    jayhorn.solver.princess.PrincessProver princessProver12 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array13 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr14 = princessProver12.mkOr(proverExpr_array13);
    jayhorn.solver.ProverFun proverFun15 = princessProver1.mkDefinedFunction("hi!", proverType_array11, proverExpr14);
    jayhorn.solver.ProverExpr proverExpr17 = princessProver1.mkLiteral((-1));
    jayhorn.solver.princess.PrincessProver princessProver18 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array19 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr20 = princessProver18.mkOr(proverExpr_array19);
    jayhorn.solver.ProverExpr proverExpr21 = princessProver1.mkAnd(proverExpr_array19);
    jayhorn.solver.ProverType proverType22 = princessProver1.getIntType();
    main0.test02((jayhorn.solver.Prover)princessProver1);
    jayhorn.solver.princess.PrincessProver princessProver24 = new jayhorn.solver.princess.PrincessProver();
    princessProver24.setPartitionNumber((-1));
    princessProver24.reset();
    jayhorn.solver.princess.PrincessProver princessProver28 = new jayhorn.solver.princess.PrincessProver();
    princessProver28.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver31 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array32 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr33 = princessProver31.mkOr(proverExpr_array32);
    jayhorn.solver.ProverExpr proverExpr34 = princessProver28.mkOr(proverExpr_array32);
    jayhorn.solver.BoolType boolType36 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str37 = boolType36.toString();
    jayhorn.solver.ProverType[] proverType_array38 = new jayhorn.solver.ProverType[] { boolType36 };
    jayhorn.solver.princess.PrincessProver princessProver39 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array40 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr41 = princessProver39.mkOr(proverExpr_array40);
    jayhorn.solver.ProverFun proverFun42 = princessProver28.mkDefinedFunction("hi!", proverType_array38, proverExpr41);
    jayhorn.solver.ProverExpr proverExpr44 = princessProver28.mkLiteral((-1));
    jayhorn.solver.ProverExpr proverExpr45 = princessProver24.mkNeg(proverExpr44);
    main0.test03((jayhorn.solver.Prover)princessProver24);
    jayhorn.solver.princess.PrincessProverFactory princessProverFactory47 = new jayhorn.solver.princess.PrincessProverFactory();
    jayhorn.solver.Prover prover48 = princessProverFactory47.spawn();
    main0.runTests((jayhorn.solver.ProverFactory)princessProverFactory47);
    jayhorn.solver.princess.PrincessProver princessProver50 = new jayhorn.solver.princess.PrincessProver();
    princessProver50.setConstructProofs(true);
    jayhorn.solver.ProverResult proverResult54 = princessProver50.getResult(true);
    main0.test03((jayhorn.solver.Prover)princessProver50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Bool"+ "'", str10.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "Bool"+ "'", str37.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(prover48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverResult54);

  }

  @Test
  public void test153() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test153"); }


    java.io.File[] file_array0 = new java.io.File[] {  };
    soottocfg.randoop.Classpath classpath1 = soottocfg.randoop.Classpath.of(file_array0);
    soottocfg.randoop.Javac javac2 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac3 = javac2.debug();
    soottocfg.cfg.util.Tree tree4 = new soottocfg.cfg.util.Tree();
    java.util.Set set5 = tree4.getLeaves();
    soottocfg.randoop.Javac javac6 = javac3.sourcepath((java.util.Collection)set5);
    boolean b7 = javac3.inDebugMode();
    boolean b8 = javac3.inDebugMode();
    soottocfg.randoop.Classpath classpath9 = new soottocfg.randoop.Classpath();
    soottocfg.randoop.Javac javac10 = javac3.classpath(classpath9);
    java.io.File[] file_array11 = new java.io.File[] {  };
    soottocfg.randoop.Classpath classpath12 = soottocfg.randoop.Classpath.of(file_array11);
    classpath9.addAll(file_array11);
    classpath1.addAll(file_array11);
    soottocfg.randoop.Javac javac15 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac16 = javac15.debug();
    soottocfg.cfg.util.Tree tree17 = new soottocfg.cfg.util.Tree();
    java.util.Set set18 = tree17.getLeaves();
    soottocfg.randoop.Javac javac19 = javac16.sourcepath((java.util.Collection)set18);
    boolean b20 = javac16.inDebugMode();
    boolean b21 = javac16.inDebugMode();
    soottocfg.randoop.Classpath classpath22 = new soottocfg.randoop.Classpath();
    soottocfg.randoop.Javac javac23 = javac16.classpath(classpath22);
    java.util.List list24 = javac23.version();
    soottocfg.randoop.Javac javac25 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac26 = javac25.debug();
    soottocfg.cfg.util.Tree tree27 = new soottocfg.cfg.util.Tree();
    java.util.Set set28 = tree27.getLeaves();
    soottocfg.randoop.Javac javac29 = javac26.sourcepath((java.util.Collection)set28);
    boolean b30 = javac26.inDebugMode();
    boolean b31 = javac26.inDebugMode();
    soottocfg.randoop.Classpath classpath32 = new soottocfg.randoop.Classpath();
    soottocfg.randoop.Javac javac33 = javac26.classpath(classpath32);
    java.io.File[] file_array34 = new java.io.File[] {  };
    soottocfg.randoop.Classpath classpath35 = soottocfg.randoop.Classpath.of(file_array34);
    classpath32.addAll(file_array34);
    soottocfg.randoop.Javac javac37 = javac23.bootClasspath(classpath32);
    java.lang.String str38 = classpath32.toString();
    classpath1.addAll(classpath32);
    boolean b40 = classpath1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(file_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(classpath1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(file_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(classpath12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(file_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(classpath35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + ""+ "'", str38.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);

  }

  @Test
  public void test154() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test154"); }


    soottocfg.cfg.Program program0 = new soottocfg.cfg.Program();
    org.jgrapht.DirectedGraph directedGraph1 = program0.getCallGraph();
    jayhorn.solver.princess.PrincessProver princessProver2 = new jayhorn.solver.princess.PrincessProver();
    princessProver2.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver5 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array6 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr7 = princessProver5.mkOr(proverExpr_array6);
    jayhorn.solver.ProverExpr proverExpr8 = princessProver2.mkOr(proverExpr_array6);
    jayhorn.solver.BoolType boolType10 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str11 = boolType10.toString();
    jayhorn.solver.ProverType[] proverType_array12 = new jayhorn.solver.ProverType[] { boolType10 };
    jayhorn.solver.princess.PrincessProver princessProver13 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array14 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr15 = princessProver13.mkOr(proverExpr_array14);
    jayhorn.solver.ProverFun proverFun16 = princessProver2.mkDefinedFunction("hi!", proverType_array12, proverExpr15);
    princessProver2.setPartitionNumber(10);
    jayhorn.solver.ProverResult proverResult20 = princessProver2.checkSat(false);
    // The following exception was thrown during execution in test generation
    try {
      boolean b21 = soottocfg.cfg.util.GraphUtil.isIrreducibleGraphAndHasLoops(directedGraph1, (java.lang.Object)false);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(directedGraph1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Bool"+ "'", str11.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverResult20);

  }

  @Test
  public void test155() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test155"); }


    jayhorn.Options options0 = jayhorn.Options.v();
    boolean b1 = options0.hasScope();
    java.lang.String str2 = options0.getAndroidStubPath();
    java.lang.String str3 = options0.getScope();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(options0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);

  }

  @Test
  public void test156() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test156"); }


    soottocfg.cfg.Program program0 = new soottocfg.cfg.Program();
    java.util.Map map1 = program0.getModifiedGlobals();
    soottocfg.cfg.Variable[] variable_array2 = program0.getGlobalVariables();
    soottocfg.cfg.method.Method method4 = program0.loopupMethod("Bool");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(variable_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(method4);

  }

  @Test
  public void test157() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test157"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    princessProver0.setPartitionNumber((-1));
    princessProver0.reset();
    jayhorn.solver.princess.PrincessProver princessProver4 = new jayhorn.solver.princess.PrincessProver();
    princessProver4.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver7 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array8 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr9 = princessProver7.mkOr(proverExpr_array8);
    jayhorn.solver.ProverExpr proverExpr10 = princessProver4.mkOr(proverExpr_array8);
    jayhorn.solver.princess.PrincessProver princessProver11 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver12 = new jayhorn.solver.princess.PrincessProver();
    princessProver12.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver15 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array16 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr17 = princessProver15.mkOr(proverExpr_array16);
    jayhorn.solver.ProverExpr proverExpr18 = princessProver12.mkOr(proverExpr_array16);
    jayhorn.solver.BoolType boolType20 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str21 = boolType20.toString();
    jayhorn.solver.ProverType[] proverType_array22 = new jayhorn.solver.ProverType[] { boolType20 };
    jayhorn.solver.princess.PrincessProver princessProver23 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array24 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr25 = princessProver23.mkOr(proverExpr_array24);
    jayhorn.solver.ProverFun proverFun26 = princessProver12.mkDefinedFunction("hi!", proverType_array22, proverExpr25);
    jayhorn.solver.ProverExpr proverExpr28 = princessProver12.mkLiteral((-1));
    jayhorn.solver.IntType intType29 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr30 = princessProver11.mkAll(proverExpr28, (jayhorn.solver.ProverType)intType29);
    jayhorn.solver.ProverExpr proverExpr31 = princessProver0.mkAnd(proverExpr10, proverExpr30);
    jayhorn.solver.princess.PrincessProver princessProver32 = new jayhorn.solver.princess.PrincessProver();
    princessProver32.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver35 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array36 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr37 = princessProver35.mkOr(proverExpr_array36);
    jayhorn.solver.ProverExpr proverExpr38 = princessProver32.mkOr(proverExpr_array36);
    java.lang.String[] str_array39 = soottocfg.randoop.Strings.generateArrayOfStrings((java.lang.Object[])proverExpr_array36);
    jayhorn.solver.princess.PrincessProver princessProver40 = new jayhorn.solver.princess.PrincessProver();
    princessProver40.setPartitionNumber((-1));
    princessProver40.reset();
    jayhorn.solver.princess.PrincessProver princessProver44 = new jayhorn.solver.princess.PrincessProver();
    princessProver44.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver47 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array48 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr49 = princessProver47.mkOr(proverExpr_array48);
    jayhorn.solver.ProverExpr proverExpr50 = princessProver44.mkOr(proverExpr_array48);
    jayhorn.solver.princess.PrincessProver princessProver51 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver52 = new jayhorn.solver.princess.PrincessProver();
    princessProver52.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver55 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array56 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr57 = princessProver55.mkOr(proverExpr_array56);
    jayhorn.solver.ProverExpr proverExpr58 = princessProver52.mkOr(proverExpr_array56);
    jayhorn.solver.BoolType boolType60 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str61 = boolType60.toString();
    jayhorn.solver.ProverType[] proverType_array62 = new jayhorn.solver.ProverType[] { boolType60 };
    jayhorn.solver.princess.PrincessProver princessProver63 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array64 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr65 = princessProver63.mkOr(proverExpr_array64);
    jayhorn.solver.ProverFun proverFun66 = princessProver52.mkDefinedFunction("hi!", proverType_array62, proverExpr65);
    jayhorn.solver.ProverExpr proverExpr68 = princessProver52.mkLiteral((-1));
    jayhorn.solver.IntType intType69 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr70 = princessProver51.mkAll(proverExpr68, (jayhorn.solver.ProverType)intType69);
    jayhorn.solver.ProverExpr proverExpr71 = princessProver40.mkAnd(proverExpr50, proverExpr70);
    jayhorn.solver.z3.Z3HornExpr z3HornExpr72 = new jayhorn.solver.z3.Z3HornExpr(proverExpr31, proverExpr_array36, proverExpr50);
    // The following exception was thrown during execution in test generation
    try {
      jayhorn.solver.ProverFun proverFun73 = z3HornExpr72.getHeadFun();
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Bool"+ "'", str21.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "Bool"+ "'", str61.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr71);

  }

  @Test
  public void test158() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test158"); }


    jayhorn.Options options0 = jayhorn.Options.v();
    boolean b1 = options0.hasScope();
    java.lang.String str2 = options0.getScope();
    jayhorn.Log.error((java.lang.Object)options0);
    boolean b4 = options0.hasScope();
    boolean b5 = options0.hasScope();
    int i6 = options0.getTimeout();
    boolean b7 = options0.hasScope();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(options0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);

  }

  @Test
  public void test159() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test159"); }


    jayhorn.Log.error((java.lang.Object)0L);

  }

  @Test
  public void test160() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test160"); }


    soottocfg.randoop.Javac javac1 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac2 = javac1.debug();
    soottocfg.cfg.util.Tree tree3 = new soottocfg.cfg.util.Tree();
    java.util.Set set4 = tree3.getLeaves();
    soottocfg.randoop.Javac javac5 = javac2.sourcepath((java.util.Collection)set4);
    soottocfg.randoop.Javac javac6 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac7 = javac6.debug();
    soottocfg.cfg.util.Tree tree8 = new soottocfg.cfg.util.Tree();
    java.util.Set set9 = tree8.getLeaves();
    soottocfg.randoop.Javac javac10 = javac7.sourcepath((java.util.Collection)set9);
    soottocfg.randoop.Javac javac11 = javac2.sourcepath((java.util.Collection)set9);
    soottocfg.cfg.ClassVariable classVariable12 = new soottocfg.cfg.ClassVariable("\\forall int v0; -1 = 0 <- -1*-1", (java.util.Collection)set9);
    java.lang.String str13 = classVariable12.toString();
    boolean b14 = classVariable12.isUnique();
    java.lang.String str15 = classVariable12.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\\forall int v0; -1 = 0 <- -1*-1"+ "'", str13.equals("\\forall int v0; -1 = 0 <- -1*-1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "\\forall int v0; -1 = 0 <- -1*-1"+ "'", str15.equals("\\forall int v0; -1 = 0 <- -1*-1"));

  }

  @Test
  public void test161() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test161"); }


    jayhorn.solver.Main main0 = new jayhorn.solver.Main();
    jayhorn.solver.princess.PrincessProver princessProver1 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver2 = new jayhorn.solver.princess.PrincessProver();
    princessProver2.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver5 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array6 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr7 = princessProver5.mkOr(proverExpr_array6);
    jayhorn.solver.ProverExpr proverExpr8 = princessProver2.mkOr(proverExpr_array6);
    jayhorn.solver.BoolType boolType10 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str11 = boolType10.toString();
    jayhorn.solver.ProverType[] proverType_array12 = new jayhorn.solver.ProverType[] { boolType10 };
    jayhorn.solver.princess.PrincessProver princessProver13 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array14 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr15 = princessProver13.mkOr(proverExpr_array14);
    jayhorn.solver.ProverFun proverFun16 = princessProver2.mkDefinedFunction("hi!", proverType_array12, proverExpr15);
    jayhorn.solver.ProverExpr proverExpr18 = princessProver2.mkLiteral((-1));
    jayhorn.solver.IntType intType19 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr20 = princessProver1.mkAll(proverExpr18, (jayhorn.solver.ProverType)intType19);
    main0.testHorn((jayhorn.solver.Prover)princessProver1);
    jayhorn.solver.princess.PrincessProver princessProver22 = new jayhorn.solver.princess.PrincessProver();
    princessProver22.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver25 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array26 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr27 = princessProver25.mkOr(proverExpr_array26);
    jayhorn.solver.ProverExpr proverExpr28 = princessProver22.mkOr(proverExpr_array26);
    jayhorn.solver.ProverResult proverResult30 = princessProver22.getResult(false);
    main0.test06((jayhorn.solver.Prover)princessProver22);
    jayhorn.solver.princess.PrincessProver princessProver32 = new jayhorn.solver.princess.PrincessProver();
    princessProver32.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver35 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array36 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr37 = princessProver35.mkOr(proverExpr_array36);
    jayhorn.solver.ProverExpr proverExpr38 = princessProver32.mkOr(proverExpr_array36);
    jayhorn.solver.BoolType boolType40 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str41 = boolType40.toString();
    jayhorn.solver.ProverType[] proverType_array42 = new jayhorn.solver.ProverType[] { boolType40 };
    jayhorn.solver.princess.PrincessProver princessProver43 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array44 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr45 = princessProver43.mkOr(proverExpr_array44);
    jayhorn.solver.ProverFun proverFun46 = princessProver32.mkDefinedFunction("hi!", proverType_array42, proverExpr45);
    jayhorn.solver.ProverExpr proverExpr48 = princessProver32.mkLiteral((-1));
    main0.test06((jayhorn.solver.Prover)princessProver32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Bool"+ "'", str11.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverResult30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "Bool"+ "'", str41.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr48);

  }

  @Test
  public void test162() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test162"); }


    soottocfg.cfg.Program program0 = new soottocfg.cfg.Program();
    org.jgrapht.DirectedGraph directedGraph1 = program0.getCallGraph();
    // The following exception was thrown during execution in test generation
    try {
      soottocfg.cfg.Variable variable2 = program0.getExceptionGlobal();
      org.junit.Assert.fail("Expected exception of type com.google.common.base.VerifyException");
    } catch (com.google.common.base.VerifyException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("com.google.common.base.VerifyException")) {
        org.junit.Assert.fail("Expected exception of type com.google.common.base.VerifyException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(directedGraph1);

  }

  @Test
  public void test163() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test163"); }


    soottocfg.randoop.Javac javac0 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac1 = javac0.debug();
    soottocfg.cfg.util.Tree tree2 = new soottocfg.cfg.util.Tree();
    java.util.Set set3 = tree2.getLeaves();
    soottocfg.randoop.Javac javac4 = javac1.sourcepath((java.util.Collection)set3);
    soottocfg.randoop.Javac javac5 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac6 = javac5.debug();
    soottocfg.cfg.util.Tree tree7 = new soottocfg.cfg.util.Tree();
    java.util.Set set8 = tree7.getLeaves();
    soottocfg.randoop.Javac javac9 = javac6.sourcepath((java.util.Collection)set8);
    soottocfg.randoop.Javac javac10 = javac1.sourcepath((java.util.Collection)set8);
    soottocfg.randoop.Javac javac11 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac12 = javac11.debug();
    soottocfg.cfg.util.Tree tree13 = new soottocfg.cfg.util.Tree();
    java.util.Set set14 = tree13.getLeaves();
    soottocfg.randoop.Javac javac15 = javac12.sourcepath((java.util.Collection)set14);
    boolean b16 = javac12.inDebugMode();
    boolean b17 = javac12.inDebugMode();
    soottocfg.randoop.Classpath classpath18 = new soottocfg.randoop.Classpath();
    soottocfg.randoop.Javac javac19 = javac12.classpath(classpath18);
    soottocfg.randoop.Javac javac20 = javac1.bootClasspath(classpath18);
    soottocfg.randoop.Classpath classpath21 = new soottocfg.randoop.Classpath();
    java.util.Collection collection22 = classpath21.getElements();
    soottocfg.randoop.Javac javac23 = javac1.classpath(classpath21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac23);

  }

  @Test
  public void test164() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test164"); }


    soottocfg.randoop.Javac javac0 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac1 = javac0.debug();
    soottocfg.cfg.util.Tree tree2 = new soottocfg.cfg.util.Tree();
    java.util.Set set3 = tree2.getLeaves();
    soottocfg.randoop.Javac javac4 = javac1.sourcepath((java.util.Collection)set3);
    boolean b5 = javac1.inDebugMode();
    boolean b6 = javac1.inDebugMode();
    soottocfg.randoop.Classpath classpath7 = new soottocfg.randoop.Classpath();
    soottocfg.randoop.Javac javac8 = javac1.classpath(classpath7);
    java.util.List list9 = javac8.version();
    soottocfg.randoop.Javac javac10 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac11 = javac10.debug();
    soottocfg.cfg.util.Tree tree12 = new soottocfg.cfg.util.Tree();
    java.util.Set set13 = tree12.getLeaves();
    soottocfg.randoop.Javac javac14 = javac11.sourcepath((java.util.Collection)set13);
    boolean b15 = javac11.inDebugMode();
    boolean b16 = javac11.inDebugMode();
    soottocfg.randoop.Classpath classpath17 = new soottocfg.randoop.Classpath();
    soottocfg.randoop.Javac javac18 = javac11.classpath(classpath17);
    java.io.File[] file_array19 = new java.io.File[] {  };
    soottocfg.randoop.Classpath classpath20 = soottocfg.randoop.Classpath.of(file_array19);
    classpath17.addAll(file_array19);
    soottocfg.randoop.Javac javac22 = javac8.bootClasspath(classpath17);
    boolean b23 = javac8.inDebugMode();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(file_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(classpath20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);

  }

  @Test
  public void test165() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test165"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    princessProver0.setPartitionNumber((-1));
    princessProver0.reset();
    jayhorn.solver.princess.PrincessProver princessProver4 = new jayhorn.solver.princess.PrincessProver();
    princessProver4.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver7 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array8 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr9 = princessProver7.mkOr(proverExpr_array8);
    jayhorn.solver.ProverExpr proverExpr10 = princessProver4.mkOr(proverExpr_array8);
    jayhorn.solver.princess.PrincessProver princessProver11 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver12 = new jayhorn.solver.princess.PrincessProver();
    princessProver12.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver15 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array16 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr17 = princessProver15.mkOr(proverExpr_array16);
    jayhorn.solver.ProverExpr proverExpr18 = princessProver12.mkOr(proverExpr_array16);
    jayhorn.solver.BoolType boolType20 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str21 = boolType20.toString();
    jayhorn.solver.ProverType[] proverType_array22 = new jayhorn.solver.ProverType[] { boolType20 };
    jayhorn.solver.princess.PrincessProver princessProver23 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array24 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr25 = princessProver23.mkOr(proverExpr_array24);
    jayhorn.solver.ProverFun proverFun26 = princessProver12.mkDefinedFunction("hi!", proverType_array22, proverExpr25);
    jayhorn.solver.ProverExpr proverExpr28 = princessProver12.mkLiteral((-1));
    jayhorn.solver.IntType intType29 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr30 = princessProver11.mkAll(proverExpr28, (jayhorn.solver.ProverType)intType29);
    jayhorn.solver.ProverExpr proverExpr31 = princessProver0.mkAnd(proverExpr10, proverExpr30);
    jayhorn.solver.princess.PrincessProver princessProver32 = new jayhorn.solver.princess.PrincessProver();
    princessProver32.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver35 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array36 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr37 = princessProver35.mkOr(proverExpr_array36);
    jayhorn.solver.ProverExpr proverExpr38 = princessProver32.mkOr(proverExpr_array36);
    java.lang.String[] str_array39 = soottocfg.randoop.Strings.generateArrayOfStrings((java.lang.Object[])proverExpr_array36);
    jayhorn.solver.princess.PrincessProver princessProver40 = new jayhorn.solver.princess.PrincessProver();
    princessProver40.setPartitionNumber((-1));
    princessProver40.reset();
    jayhorn.solver.princess.PrincessProver princessProver44 = new jayhorn.solver.princess.PrincessProver();
    princessProver44.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver47 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array48 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr49 = princessProver47.mkOr(proverExpr_array48);
    jayhorn.solver.ProverExpr proverExpr50 = princessProver44.mkOr(proverExpr_array48);
    jayhorn.solver.princess.PrincessProver princessProver51 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver52 = new jayhorn.solver.princess.PrincessProver();
    princessProver52.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver55 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array56 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr57 = princessProver55.mkOr(proverExpr_array56);
    jayhorn.solver.ProverExpr proverExpr58 = princessProver52.mkOr(proverExpr_array56);
    jayhorn.solver.BoolType boolType60 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str61 = boolType60.toString();
    jayhorn.solver.ProverType[] proverType_array62 = new jayhorn.solver.ProverType[] { boolType60 };
    jayhorn.solver.princess.PrincessProver princessProver63 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array64 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr65 = princessProver63.mkOr(proverExpr_array64);
    jayhorn.solver.ProverFun proverFun66 = princessProver52.mkDefinedFunction("hi!", proverType_array62, proverExpr65);
    jayhorn.solver.ProverExpr proverExpr68 = princessProver52.mkLiteral((-1));
    jayhorn.solver.IntType intType69 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr70 = princessProver51.mkAll(proverExpr68, (jayhorn.solver.ProverType)intType69);
    jayhorn.solver.ProverExpr proverExpr71 = princessProver40.mkAnd(proverExpr50, proverExpr70);
    jayhorn.solver.z3.Z3HornExpr z3HornExpr72 = new jayhorn.solver.z3.Z3HornExpr(proverExpr31, proverExpr_array36, proverExpr50);
    // The following exception was thrown during execution in test generation
    try {
      jayhorn.solver.ProverFun proverFun74 = z3HornExpr72.getBodyFun(1);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Bool"+ "'", str21.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "Bool"+ "'", str61.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr71);

  }

  @Test
  public void test166() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test166"); }


    jayhorn.Log.info((java.lang.Object)"Int");

  }

  @Test
  public void test167() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test167"); }


    soottocfg.cfg.Program program0 = new soottocfg.cfg.Program();
    soottocfg.cfg.Variable[] variable_array1 = program0.getGlobalVariables();
    jayhorn.Log.error((java.lang.Object)variable_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(variable_array1);

  }

  @Test
  public void test168() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test168"); }


    jayhorn.Options options0 = jayhorn.Options.v();
    boolean b1 = options0.hasScope();
    java.lang.String str2 = options0.getAndroidStubPath();
    int i3 = options0.getTimeout();
    java.lang.String str4 = options0.getChecker();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(options0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "safety"+ "'", str4.equals("safety"));

  }

  @Test
  public void test169() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test169"); }


    soottocfg.cfg.util.Tree tree0 = new soottocfg.cfg.util.Tree();
    tree0.addEdge((java.lang.Object)(short)10, (java.lang.Object)10);
    java.util.Set set4 = tree0.getLeaves();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);

  }

  @Test
  public void test170() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test170"); }


    jayhorn.solver.Main main0 = new jayhorn.solver.Main();
    jayhorn.solver.princess.PrincessProver princessProver1 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver2 = new jayhorn.solver.princess.PrincessProver();
    princessProver2.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver5 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array6 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr7 = princessProver5.mkOr(proverExpr_array6);
    jayhorn.solver.ProverExpr proverExpr8 = princessProver2.mkOr(proverExpr_array6);
    jayhorn.solver.BoolType boolType10 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str11 = boolType10.toString();
    jayhorn.solver.ProverType[] proverType_array12 = new jayhorn.solver.ProverType[] { boolType10 };
    jayhorn.solver.princess.PrincessProver princessProver13 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array14 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr15 = princessProver13.mkOr(proverExpr_array14);
    jayhorn.solver.ProverFun proverFun16 = princessProver2.mkDefinedFunction("hi!", proverType_array12, proverExpr15);
    jayhorn.solver.ProverExpr proverExpr18 = princessProver2.mkLiteral((-1));
    jayhorn.solver.IntType intType19 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr20 = princessProver1.mkAll(proverExpr18, (jayhorn.solver.ProverType)intType19);
    main0.testHorn((jayhorn.solver.Prover)princessProver1);
    jayhorn.solver.princess.PrincessProver princessProver22 = new jayhorn.solver.princess.PrincessProver();
    princessProver22.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver25 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array26 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr27 = princessProver25.mkOr(proverExpr_array26);
    jayhorn.solver.ProverExpr proverExpr28 = princessProver22.mkOr(proverExpr_array26);
    jayhorn.solver.BoolType boolType30 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str31 = boolType30.toString();
    jayhorn.solver.ProverType[] proverType_array32 = new jayhorn.solver.ProverType[] { boolType30 };
    jayhorn.solver.princess.PrincessProver princessProver33 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array34 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr35 = princessProver33.mkOr(proverExpr_array34);
    jayhorn.solver.ProverFun proverFun36 = princessProver22.mkDefinedFunction("hi!", proverType_array32, proverExpr35);
    main0.test05((jayhorn.solver.Prover)princessProver22);
    jayhorn.solver.princess.PrincessProver princessProver38 = new jayhorn.solver.princess.PrincessProver();
    princessProver38.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver41 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array42 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr43 = princessProver41.mkOr(proverExpr_array42);
    jayhorn.solver.ProverExpr proverExpr44 = princessProver38.mkOr(proverExpr_array42);
    jayhorn.solver.BoolType boolType46 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str47 = boolType46.toString();
    jayhorn.solver.ProverType[] proverType_array48 = new jayhorn.solver.ProverType[] { boolType46 };
    jayhorn.solver.princess.PrincessProver princessProver49 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array50 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr51 = princessProver49.mkOr(proverExpr_array50);
    jayhorn.solver.ProverFun proverFun52 = princessProver38.mkDefinedFunction("hi!", proverType_array48, proverExpr51);
    princessProver38.setPartitionNumber(10);
    main0.test06((jayhorn.solver.Prover)princessProver38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Bool"+ "'", str11.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "Bool"+ "'", str31.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "Bool"+ "'", str47.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun52);

  }

  @Test
  public void test171() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test171"); }


    soottocfg.randoop.Javac javac0 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac1 = javac0.debug();
    soottocfg.cfg.util.Tree tree2 = new soottocfg.cfg.util.Tree();
    java.util.Set set3 = tree2.getLeaves();
    soottocfg.randoop.Javac javac4 = javac1.sourcepath((java.util.Collection)set3);
    boolean b5 = javac1.inDebugMode();
    soottocfg.randoop.Javac javac6 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac7 = javac6.debug();
    soottocfg.cfg.util.Tree tree8 = new soottocfg.cfg.util.Tree();
    java.util.Set set9 = tree8.getLeaves();
    soottocfg.randoop.Javac javac10 = javac7.sourcepath((java.util.Collection)set9);
    soottocfg.randoop.Javac javac11 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac12 = javac11.debug();
    soottocfg.cfg.util.Tree tree13 = new soottocfg.cfg.util.Tree();
    java.util.Set set14 = tree13.getLeaves();
    soottocfg.randoop.Javac javac15 = javac12.sourcepath((java.util.Collection)set14);
    soottocfg.randoop.Javac javac16 = javac7.sourcepath((java.util.Collection)set14);
    soottocfg.randoop.Javac javac17 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac18 = javac17.debug();
    soottocfg.cfg.util.Tree tree19 = new soottocfg.cfg.util.Tree();
    java.util.Set set20 = tree19.getLeaves();
    soottocfg.randoop.Javac javac21 = javac18.sourcepath((java.util.Collection)set20);
    boolean b22 = javac18.inDebugMode();
    boolean b23 = javac18.inDebugMode();
    soottocfg.randoop.Classpath classpath24 = new soottocfg.randoop.Classpath();
    soottocfg.randoop.Javac javac25 = javac18.classpath(classpath24);
    soottocfg.randoop.Javac javac26 = javac7.bootClasspath(classpath24);
    soottocfg.randoop.Javac javac27 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac28 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac29 = javac28.debug();
    soottocfg.cfg.util.Tree tree30 = new soottocfg.cfg.util.Tree();
    java.util.Set set31 = tree30.getLeaves();
    soottocfg.randoop.Javac javac32 = javac29.sourcepath((java.util.Collection)set31);
    soottocfg.randoop.Javac javac33 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac34 = javac33.debug();
    soottocfg.cfg.util.Tree tree35 = new soottocfg.cfg.util.Tree();
    java.util.Set set36 = tree35.getLeaves();
    soottocfg.randoop.Javac javac37 = javac34.sourcepath((java.util.Collection)set36);
    soottocfg.randoop.Javac javac38 = javac29.sourcepath((java.util.Collection)set36);
    soottocfg.randoop.Javac javac39 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac40 = javac39.debug();
    soottocfg.cfg.util.Tree tree41 = new soottocfg.cfg.util.Tree();
    java.util.Set set42 = tree41.getLeaves();
    soottocfg.randoop.Javac javac43 = javac40.sourcepath((java.util.Collection)set42);
    boolean b44 = javac40.inDebugMode();
    boolean b45 = javac40.inDebugMode();
    soottocfg.randoop.Classpath classpath46 = new soottocfg.randoop.Classpath();
    soottocfg.randoop.Javac javac47 = javac40.classpath(classpath46);
    soottocfg.randoop.Javac javac48 = javac29.bootClasspath(classpath46);
    java.util.List list49 = javac48.version();
    javac27.log(list49);
    soottocfg.randoop.Javac javac51 = javac26.extraArgs(list49);
    javac1.log(list49);
    soottocfg.randoop.Command command53 = new soottocfg.randoop.Command(list49);
    java.lang.String str54 = command53.toString();
    java.lang.String str55 = command53.toString();
    // The following exception was thrown during execution in test generation
    try {
      command53.start();
      org.junit.Assert.fail("Expected exception of type java.io.IOException");
    } catch (java.io.IOException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.io.IOException")) {
        org.junit.Assert.fail("Expected exception of type java.io.IOException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "javac 1.8.0_72"+ "'", str54.equals("javac 1.8.0_72"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "javac 1.8.0_72"+ "'", str55.equals("javac 1.8.0_72"));

  }

  @Test
  public void test172() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test172"); }


    jayhorn.Options options0 = jayhorn.Options.v();
    options0.setAndroidStubPath("");
    jayhorn.Log.info((java.lang.Object)"");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(options0);

  }

  @Test
  public void test173() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test173"); }


    soottocfg.cfg.util.Tree tree0 = new soottocfg.cfg.util.Tree();
    java.util.Set set1 = tree0.getLeaves();
    java.lang.Object obj2 = tree0.getRoot();
    java.util.Set set3 = tree0.getLeaves();
    soottocfg.randoop.Javac javac4 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac5 = javac4.debug();
    soottocfg.cfg.util.Tree tree6 = new soottocfg.cfg.util.Tree();
    java.util.Set set7 = tree6.getLeaves();
    soottocfg.randoop.Javac javac8 = javac5.sourcepath((java.util.Collection)set7);
    boolean b9 = javac5.inDebugMode();
    soottocfg.randoop.Javac javac10 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac11 = javac10.debug();
    soottocfg.cfg.util.Tree tree12 = new soottocfg.cfg.util.Tree();
    java.util.Set set13 = tree12.getLeaves();
    soottocfg.randoop.Javac javac14 = javac11.sourcepath((java.util.Collection)set13);
    soottocfg.randoop.Javac javac15 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac16 = javac15.debug();
    soottocfg.cfg.util.Tree tree17 = new soottocfg.cfg.util.Tree();
    java.util.Set set18 = tree17.getLeaves();
    soottocfg.randoop.Javac javac19 = javac16.sourcepath((java.util.Collection)set18);
    soottocfg.randoop.Javac javac20 = javac11.sourcepath((java.util.Collection)set18);
    soottocfg.randoop.Javac javac21 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac22 = javac21.debug();
    soottocfg.cfg.util.Tree tree23 = new soottocfg.cfg.util.Tree();
    java.util.Set set24 = tree23.getLeaves();
    soottocfg.randoop.Javac javac25 = javac22.sourcepath((java.util.Collection)set24);
    boolean b26 = javac22.inDebugMode();
    boolean b27 = javac22.inDebugMode();
    soottocfg.randoop.Classpath classpath28 = new soottocfg.randoop.Classpath();
    soottocfg.randoop.Javac javac29 = javac22.classpath(classpath28);
    soottocfg.randoop.Javac javac30 = javac11.bootClasspath(classpath28);
    soottocfg.randoop.Javac javac31 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac32 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac33 = javac32.debug();
    soottocfg.cfg.util.Tree tree34 = new soottocfg.cfg.util.Tree();
    java.util.Set set35 = tree34.getLeaves();
    soottocfg.randoop.Javac javac36 = javac33.sourcepath((java.util.Collection)set35);
    soottocfg.randoop.Javac javac37 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac38 = javac37.debug();
    soottocfg.cfg.util.Tree tree39 = new soottocfg.cfg.util.Tree();
    java.util.Set set40 = tree39.getLeaves();
    soottocfg.randoop.Javac javac41 = javac38.sourcepath((java.util.Collection)set40);
    soottocfg.randoop.Javac javac42 = javac33.sourcepath((java.util.Collection)set40);
    soottocfg.randoop.Javac javac43 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac44 = javac43.debug();
    soottocfg.cfg.util.Tree tree45 = new soottocfg.cfg.util.Tree();
    java.util.Set set46 = tree45.getLeaves();
    soottocfg.randoop.Javac javac47 = javac44.sourcepath((java.util.Collection)set46);
    boolean b48 = javac44.inDebugMode();
    boolean b49 = javac44.inDebugMode();
    soottocfg.randoop.Classpath classpath50 = new soottocfg.randoop.Classpath();
    soottocfg.randoop.Javac javac51 = javac44.classpath(classpath50);
    soottocfg.randoop.Javac javac52 = javac33.bootClasspath(classpath50);
    java.util.List list53 = javac52.version();
    javac31.log(list53);
    soottocfg.randoop.Javac javac55 = javac30.extraArgs(list53);
    javac5.log(list53);
    soottocfg.randoop.Javac javac57 = javac5.debug();
    soottocfg.randoop.Javac javac58 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac59 = javac58.debug();
    soottocfg.cfg.util.Tree tree60 = new soottocfg.cfg.util.Tree();
    java.util.Set set61 = tree60.getLeaves();
    soottocfg.randoop.Javac javac62 = javac59.sourcepath((java.util.Collection)set61);
    java.lang.String[] str_array63 = soottocfg.randoop.Strings.generateArrayOfStrings((java.util.Collection)set61);
    soottocfg.randoop.Classpath classpath64 = soottocfg.randoop.Classpath.of((java.util.Collection)set61);
    soottocfg.randoop.Javac javac65 = javac5.bootClasspath(classpath64);
    // The following exception was thrown during execution in test generation
    try {
      boolean b67 = tree0.isAncestor((java.lang.Object)classpath64, (java.lang.Object)"\\forall int v0; -1 = 0 <- -1*-1");
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obj2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(classpath64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac65);

  }

  @Test
  public void test174() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test174"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver1 = new jayhorn.solver.princess.PrincessProver();
    princessProver1.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver4 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array5 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr6 = princessProver4.mkOr(proverExpr_array5);
    jayhorn.solver.ProverExpr proverExpr7 = princessProver1.mkOr(proverExpr_array5);
    jayhorn.solver.BoolType boolType9 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str10 = boolType9.toString();
    jayhorn.solver.ProverType[] proverType_array11 = new jayhorn.solver.ProverType[] { boolType9 };
    jayhorn.solver.princess.PrincessProver princessProver12 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array13 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr14 = princessProver12.mkOr(proverExpr_array13);
    jayhorn.solver.ProverFun proverFun15 = princessProver1.mkDefinedFunction("hi!", proverType_array11, proverExpr14);
    jayhorn.solver.ProverExpr proverExpr17 = princessProver1.mkLiteral((-1));
    jayhorn.solver.IntType intType18 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr19 = princessProver0.mkAll(proverExpr17, (jayhorn.solver.ProverType)intType18);
    jayhorn.solver.princess.PrincessProver princessProver20 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array21 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr22 = princessProver20.mkOr(proverExpr_array21);
    jayhorn.solver.princess.PrincessProver princessProver23 = new jayhorn.solver.princess.PrincessProver();
    princessProver23.setPartitionNumber((-1));
    princessProver23.reset();
    jayhorn.solver.princess.PrincessProver princessProver27 = new jayhorn.solver.princess.PrincessProver();
    princessProver27.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver30 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array31 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr32 = princessProver30.mkOr(proverExpr_array31);
    jayhorn.solver.ProverExpr proverExpr33 = princessProver27.mkOr(proverExpr_array31);
    jayhorn.solver.BoolType boolType35 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str36 = boolType35.toString();
    jayhorn.solver.ProverType[] proverType_array37 = new jayhorn.solver.ProverType[] { boolType35 };
    jayhorn.solver.princess.PrincessProver princessProver38 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array39 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr40 = princessProver38.mkOr(proverExpr_array39);
    jayhorn.solver.ProverFun proverFun41 = princessProver27.mkDefinedFunction("hi!", proverType_array37, proverExpr40);
    jayhorn.solver.ProverExpr proverExpr43 = princessProver27.mkLiteral((-1));
    jayhorn.solver.ProverExpr proverExpr44 = princessProver23.mkNeg(proverExpr43);
    jayhorn.solver.z3.Z3HornExpr z3HornExpr45 = new jayhorn.solver.z3.Z3HornExpr(proverExpr19, proverExpr_array21, proverExpr44);
    jayhorn.solver.ProverExpr proverExpr46 = z3HornExpr45.getHead();
    jayhorn.solver.ProverExpr proverExpr47 = z3HornExpr45.getHead();
    jayhorn.solver.ProverExpr[] proverExpr_array48 = z3HornExpr45.getBody();
    // The following exception was thrown during execution in test generation
    try {
      java.math.BigInteger bigInteger49 = z3HornExpr45.getIntLiteralValue();
      org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.RuntimeException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Bool"+ "'", str10.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Bool"+ "'", str36.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array48);

  }

  @Test
  public void test175() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test175"); }


    soottocfg.cfg.Program program0 = new soottocfg.cfg.Program();
    org.jgrapht.DirectedGraph directedGraph1 = program0.getCallGraph();
    org.jgrapht.DirectedGraph directedGraph2 = program0.getCallGraph();
    soottocfg.cfg.method.Method[] method_array3 = program0.getMethods();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(directedGraph1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(directedGraph2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(method_array3);

  }

  @Test
  public void test176() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test176"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    princessProver0.setPartitionNumber((-1));
    princessProver0.reset();
    princessProver0.push();
    princessProver0.pop();
    jayhorn.solver.princess.PrincessProver princessProver6 = new jayhorn.solver.princess.PrincessProver();
    princessProver6.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver9 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array10 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr11 = princessProver9.mkOr(proverExpr_array10);
    jayhorn.solver.ProverExpr proverExpr12 = princessProver6.mkOr(proverExpr_array10);
    jayhorn.solver.BoolType boolType14 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str15 = boolType14.toString();
    jayhorn.solver.ProverType[] proverType_array16 = new jayhorn.solver.ProverType[] { boolType14 };
    jayhorn.solver.princess.PrincessProver princessProver17 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array18 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr19 = princessProver17.mkOr(proverExpr_array18);
    jayhorn.solver.ProverFun proverFun20 = princessProver6.mkDefinedFunction("hi!", proverType_array16, proverExpr19);
    princessProver6.setPartitionNumber(10);
    jayhorn.solver.ProverExpr proverExpr24 = princessProver6.mkLiteral(100);
    jayhorn.solver.princess.PrincessProver princessProver25 = new jayhorn.solver.princess.PrincessProver();
    princessProver25.setPartitionNumber((-1));
    princessProver25.reset();
    jayhorn.solver.princess.PrincessProver princessProver29 = new jayhorn.solver.princess.PrincessProver();
    princessProver29.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver32 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array33 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr34 = princessProver32.mkOr(proverExpr_array33);
    jayhorn.solver.ProverExpr proverExpr35 = princessProver29.mkOr(proverExpr_array33);
    jayhorn.solver.BoolType boolType37 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str38 = boolType37.toString();
    jayhorn.solver.ProverType[] proverType_array39 = new jayhorn.solver.ProverType[] { boolType37 };
    jayhorn.solver.princess.PrincessProver princessProver40 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array41 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr42 = princessProver40.mkOr(proverExpr_array41);
    jayhorn.solver.ProverFun proverFun43 = princessProver29.mkDefinedFunction("hi!", proverType_array39, proverExpr42);
    jayhorn.solver.ProverExpr proverExpr45 = princessProver29.mkLiteral((-1));
    jayhorn.solver.ProverExpr proverExpr46 = princessProver25.mkNeg(proverExpr45);
    jayhorn.solver.ProverExpr proverExpr47 = princessProver6.mkNot(proverExpr46);
    jayhorn.solver.princess.PrincessProver princessProver48 = new jayhorn.solver.princess.PrincessProver();
    princessProver48.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver51 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array52 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr53 = princessProver51.mkOr(proverExpr_array52);
    jayhorn.solver.ProverExpr proverExpr54 = princessProver48.mkOr(proverExpr_array52);
    jayhorn.solver.ProverResult proverResult56 = princessProver48.getResult(false);
    jayhorn.solver.IntType intType58 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr59 = princessProver48.mkHornVariable("Int", (jayhorn.solver.ProverType)intType58);
    jayhorn.solver.princess.PrincessProver princessProver62 = new jayhorn.solver.princess.PrincessProver("Bool");
    jayhorn.solver.ProverType proverType63 = princessProver62.getIntType();
    jayhorn.solver.ProverExpr proverExpr64 = princessProver48.mkVariable("", proverType63);
    jayhorn.solver.ProverExpr proverExpr65 = princessProver0.mkOr(proverExpr46, proverExpr64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Bool"+ "'", str15.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "Bool"+ "'", str38.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverResult56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr65);

  }

  @Test
  public void test177() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test177"); }


    soottocfg.cfg.util.Tree tree0 = new soottocfg.cfg.util.Tree();
    java.lang.Object obj1 = tree0.getRoot();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obj1);

  }

  @Test
  public void test178() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test178"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    princessProver0.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver3 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array4 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr5 = princessProver3.mkOr(proverExpr_array4);
    jayhorn.solver.ProverExpr proverExpr6 = princessProver0.mkOr(proverExpr_array4);
    jayhorn.solver.BoolType boolType8 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str9 = boolType8.toString();
    jayhorn.solver.ProverType[] proverType_array10 = new jayhorn.solver.ProverType[] { boolType8 };
    jayhorn.solver.princess.PrincessProver princessProver11 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array12 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr13 = princessProver11.mkOr(proverExpr_array12);
    jayhorn.solver.ProverFun proverFun14 = princessProver0.mkDefinedFunction("hi!", proverType_array10, proverExpr13);
    princessProver0.setPartitionNumber(10);
    jayhorn.solver.ProverResult proverResult18 = princessProver0.checkSat(false);
    jayhorn.solver.ProverResult proverResult19 = princessProver0.stop();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Bool"+ "'", str9.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverResult18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverResult19);

  }

  @Test
  public void test179() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test179"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    princessProver0.setPartitionNumber((-1));
    jayhorn.util.SimplCfgToProver simplCfgToProver3 = new jayhorn.util.SimplCfgToProver((jayhorn.solver.Prover)princessProver0);
    java.util.List list4 = simplCfgToProver3.generatedAxioms();
    soottocfg.randoop.Javac javac5 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac6 = javac5.debug();
    soottocfg.cfg.util.Tree tree7 = new soottocfg.cfg.util.Tree();
    java.util.Set set8 = tree7.getLeaves();
    soottocfg.randoop.Javac javac9 = javac6.sourcepath((java.util.Collection)set8);
    boolean b10 = javac6.inDebugMode();
    soottocfg.randoop.Javac javac11 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac12 = javac11.debug();
    soottocfg.cfg.util.Tree tree13 = new soottocfg.cfg.util.Tree();
    java.util.Set set14 = tree13.getLeaves();
    soottocfg.randoop.Javac javac15 = javac12.sourcepath((java.util.Collection)set14);
    soottocfg.randoop.Javac javac16 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac17 = javac16.debug();
    soottocfg.cfg.util.Tree tree18 = new soottocfg.cfg.util.Tree();
    java.util.Set set19 = tree18.getLeaves();
    soottocfg.randoop.Javac javac20 = javac17.sourcepath((java.util.Collection)set19);
    soottocfg.randoop.Javac javac21 = javac12.sourcepath((java.util.Collection)set19);
    soottocfg.randoop.Javac javac22 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac23 = javac22.debug();
    soottocfg.cfg.util.Tree tree24 = new soottocfg.cfg.util.Tree();
    java.util.Set set25 = tree24.getLeaves();
    soottocfg.randoop.Javac javac26 = javac23.sourcepath((java.util.Collection)set25);
    boolean b27 = javac23.inDebugMode();
    boolean b28 = javac23.inDebugMode();
    soottocfg.randoop.Classpath classpath29 = new soottocfg.randoop.Classpath();
    soottocfg.randoop.Javac javac30 = javac23.classpath(classpath29);
    soottocfg.randoop.Javac javac31 = javac12.bootClasspath(classpath29);
    soottocfg.randoop.Javac javac32 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac33 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac34 = javac33.debug();
    soottocfg.cfg.util.Tree tree35 = new soottocfg.cfg.util.Tree();
    java.util.Set set36 = tree35.getLeaves();
    soottocfg.randoop.Javac javac37 = javac34.sourcepath((java.util.Collection)set36);
    soottocfg.randoop.Javac javac38 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac39 = javac38.debug();
    soottocfg.cfg.util.Tree tree40 = new soottocfg.cfg.util.Tree();
    java.util.Set set41 = tree40.getLeaves();
    soottocfg.randoop.Javac javac42 = javac39.sourcepath((java.util.Collection)set41);
    soottocfg.randoop.Javac javac43 = javac34.sourcepath((java.util.Collection)set41);
    soottocfg.randoop.Javac javac44 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac45 = javac44.debug();
    soottocfg.cfg.util.Tree tree46 = new soottocfg.cfg.util.Tree();
    java.util.Set set47 = tree46.getLeaves();
    soottocfg.randoop.Javac javac48 = javac45.sourcepath((java.util.Collection)set47);
    boolean b49 = javac45.inDebugMode();
    boolean b50 = javac45.inDebugMode();
    soottocfg.randoop.Classpath classpath51 = new soottocfg.randoop.Classpath();
    soottocfg.randoop.Javac javac52 = javac45.classpath(classpath51);
    soottocfg.randoop.Javac javac53 = javac34.bootClasspath(classpath51);
    java.util.List list54 = javac53.version();
    javac32.log(list54);
    soottocfg.randoop.Javac javac56 = javac31.extraArgs(list54);
    javac6.log(list54);
    // The following exception was thrown during execution in test generation
    try {
      jayhorn.solver.ProverExpr proverExpr58 = simplCfgToProver3.statementListToTransitionRelation(list54);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac56);

  }

  @Test
  public void test180() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test180"); }


    soottocfg.cfg.util.Tree tree0 = new soottocfg.cfg.util.Tree();
    java.util.Set set1 = tree0.getLeaves();
    java.lang.Object obj2 = tree0.getRoot();
    java.util.Set set3 = tree0.getLeaves();
    jayhorn.solver.ArrayType arrayType5 = new jayhorn.solver.ArrayType(10);
    soottocfg.randoop.Javac javac6 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac7 = javac6.debug();
    soottocfg.cfg.util.Tree tree8 = new soottocfg.cfg.util.Tree();
    java.util.Set set9 = tree8.getLeaves();
    soottocfg.randoop.Javac javac10 = javac7.sourcepath((java.util.Collection)set9);
    soottocfg.randoop.Javac javac11 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac12 = javac11.debug();
    soottocfg.cfg.util.Tree tree13 = new soottocfg.cfg.util.Tree();
    java.util.Set set14 = tree13.getLeaves();
    soottocfg.randoop.Javac javac15 = javac12.sourcepath((java.util.Collection)set14);
    soottocfg.randoop.Javac javac16 = javac7.sourcepath((java.util.Collection)set14);
    soottocfg.randoop.Javac javac17 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac18 = javac17.debug();
    soottocfg.cfg.util.Tree tree19 = new soottocfg.cfg.util.Tree();
    java.util.Set set20 = tree19.getLeaves();
    soottocfg.randoop.Javac javac21 = javac18.sourcepath((java.util.Collection)set20);
    boolean b22 = javac18.inDebugMode();
    boolean b23 = javac18.inDebugMode();
    soottocfg.randoop.Classpath classpath24 = new soottocfg.randoop.Classpath();
    soottocfg.randoop.Javac javac25 = javac18.classpath(classpath24);
    soottocfg.randoop.Javac javac26 = javac7.bootClasspath(classpath24);
    java.util.List list27 = javac26.version();
    boolean b28 = arrayType5.equals((java.lang.Object)javac26);
    jayhorn.solver.princess.PrincessProver princessProver29 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverType proverType30 = princessProver29.getBooleanType();
    // The following exception was thrown during execution in test generation
    try {
      boolean b31 = tree0.isDescendant((java.lang.Object)javac26, (java.lang.Object)princessProver29);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obj2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType30);

  }

  @Test
  public void test181() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test181"); }


    soottocfg.cfg.Program program0 = new soottocfg.cfg.Program();
    org.jgrapht.DirectedGraph directedGraph1 = program0.getCallGraph();
    java.util.Map map2 = program0.getModifiedGlobals();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(directedGraph1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map2);

  }

  @Test
  public void test182() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test182"); }


    soottocfg.randoop.Javac javac0 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac1 = javac0.debug();
    soottocfg.cfg.util.Tree tree2 = new soottocfg.cfg.util.Tree();
    java.util.Set set3 = tree2.getLeaves();
    soottocfg.randoop.Javac javac4 = javac1.sourcepath((java.util.Collection)set3);
    soottocfg.randoop.Javac javac5 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac6 = javac5.debug();
    soottocfg.cfg.util.Tree tree7 = new soottocfg.cfg.util.Tree();
    java.util.Set set8 = tree7.getLeaves();
    soottocfg.randoop.Javac javac9 = javac6.sourcepath((java.util.Collection)set8);
    soottocfg.randoop.Javac javac10 = javac1.sourcepath((java.util.Collection)set8);
    soottocfg.randoop.Javac javac11 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac12 = javac11.debug();
    soottocfg.cfg.util.Tree tree13 = new soottocfg.cfg.util.Tree();
    java.util.Set set14 = tree13.getLeaves();
    soottocfg.randoop.Javac javac15 = javac12.sourcepath((java.util.Collection)set14);
    boolean b16 = javac12.inDebugMode();
    boolean b17 = javac12.inDebugMode();
    soottocfg.randoop.Classpath classpath18 = new soottocfg.randoop.Classpath();
    soottocfg.randoop.Javac javac19 = javac12.classpath(classpath18);
    soottocfg.randoop.Javac javac20 = javac1.bootClasspath(classpath18);
    java.util.List list21 = javac20.version();
    soottocfg.randoop.Javac javac22 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac23 = javac22.debug();
    soottocfg.cfg.util.Tree tree24 = new soottocfg.cfg.util.Tree();
    java.util.Set set25 = tree24.getLeaves();
    soottocfg.randoop.Javac javac26 = javac23.sourcepath((java.util.Collection)set25);
    boolean b27 = javac23.inDebugMode();
    soottocfg.randoop.Javac javac28 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac29 = javac28.debug();
    soottocfg.cfg.util.Tree tree30 = new soottocfg.cfg.util.Tree();
    java.util.Set set31 = tree30.getLeaves();
    soottocfg.randoop.Javac javac32 = javac29.sourcepath((java.util.Collection)set31);
    soottocfg.randoop.Javac javac33 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac34 = javac33.debug();
    soottocfg.cfg.util.Tree tree35 = new soottocfg.cfg.util.Tree();
    java.util.Set set36 = tree35.getLeaves();
    soottocfg.randoop.Javac javac37 = javac34.sourcepath((java.util.Collection)set36);
    soottocfg.randoop.Javac javac38 = javac29.sourcepath((java.util.Collection)set36);
    soottocfg.randoop.Javac javac39 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac40 = javac39.debug();
    soottocfg.cfg.util.Tree tree41 = new soottocfg.cfg.util.Tree();
    java.util.Set set42 = tree41.getLeaves();
    soottocfg.randoop.Javac javac43 = javac40.sourcepath((java.util.Collection)set42);
    boolean b44 = javac40.inDebugMode();
    boolean b45 = javac40.inDebugMode();
    soottocfg.randoop.Classpath classpath46 = new soottocfg.randoop.Classpath();
    soottocfg.randoop.Javac javac47 = javac40.classpath(classpath46);
    soottocfg.randoop.Javac javac48 = javac29.bootClasspath(classpath46);
    soottocfg.randoop.Javac javac49 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac50 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac51 = javac50.debug();
    soottocfg.cfg.util.Tree tree52 = new soottocfg.cfg.util.Tree();
    java.util.Set set53 = tree52.getLeaves();
    soottocfg.randoop.Javac javac54 = javac51.sourcepath((java.util.Collection)set53);
    soottocfg.randoop.Javac javac55 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac56 = javac55.debug();
    soottocfg.cfg.util.Tree tree57 = new soottocfg.cfg.util.Tree();
    java.util.Set set58 = tree57.getLeaves();
    soottocfg.randoop.Javac javac59 = javac56.sourcepath((java.util.Collection)set58);
    soottocfg.randoop.Javac javac60 = javac51.sourcepath((java.util.Collection)set58);
    soottocfg.randoop.Javac javac61 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac62 = javac61.debug();
    soottocfg.cfg.util.Tree tree63 = new soottocfg.cfg.util.Tree();
    java.util.Set set64 = tree63.getLeaves();
    soottocfg.randoop.Javac javac65 = javac62.sourcepath((java.util.Collection)set64);
    boolean b66 = javac62.inDebugMode();
    boolean b67 = javac62.inDebugMode();
    soottocfg.randoop.Classpath classpath68 = new soottocfg.randoop.Classpath();
    soottocfg.randoop.Javac javac69 = javac62.classpath(classpath68);
    soottocfg.randoop.Javac javac70 = javac51.bootClasspath(classpath68);
    java.util.List list71 = javac70.version();
    javac49.log(list71);
    soottocfg.randoop.Javac javac73 = javac48.extraArgs(list71);
    javac23.log(list71);
    soottocfg.randoop.Javac javac75 = javac20.sourcepath((java.util.Collection)list71);
    java.lang.String[] str_array76 = soottocfg.randoop.Strings.generateArrayOfStrings((java.util.Collection)list71);
    soottocfg.randoop.Command command77 = new soottocfg.randoop.Command(list71);
    // The following exception was thrown during execution in test generation
    try {
      java.io.InputStream inputStream78 = command77.getInputStream();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array76);

  }

  @Test
  public void test183() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test183"); }


    soottocfg.randoop.Javac javac0 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac1 = javac0.debug();
    soottocfg.cfg.util.Tree tree2 = new soottocfg.cfg.util.Tree();
    java.util.Set set3 = tree2.getLeaves();
    soottocfg.randoop.Javac javac4 = javac1.sourcepath((java.util.Collection)set3);
    boolean b5 = javac1.inDebugMode();
    soottocfg.randoop.Javac javac6 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac7 = javac6.debug();
    soottocfg.cfg.util.Tree tree8 = new soottocfg.cfg.util.Tree();
    java.util.Set set9 = tree8.getLeaves();
    soottocfg.randoop.Javac javac10 = javac7.sourcepath((java.util.Collection)set9);
    soottocfg.randoop.Javac javac11 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac12 = javac11.debug();
    soottocfg.cfg.util.Tree tree13 = new soottocfg.cfg.util.Tree();
    java.util.Set set14 = tree13.getLeaves();
    soottocfg.randoop.Javac javac15 = javac12.sourcepath((java.util.Collection)set14);
    soottocfg.randoop.Javac javac16 = javac7.sourcepath((java.util.Collection)set14);
    soottocfg.randoop.Javac javac17 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac18 = javac17.debug();
    soottocfg.cfg.util.Tree tree19 = new soottocfg.cfg.util.Tree();
    java.util.Set set20 = tree19.getLeaves();
    soottocfg.randoop.Javac javac21 = javac18.sourcepath((java.util.Collection)set20);
    boolean b22 = javac18.inDebugMode();
    boolean b23 = javac18.inDebugMode();
    soottocfg.randoop.Classpath classpath24 = new soottocfg.randoop.Classpath();
    soottocfg.randoop.Javac javac25 = javac18.classpath(classpath24);
    soottocfg.randoop.Javac javac26 = javac7.bootClasspath(classpath24);
    soottocfg.randoop.Javac javac27 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac28 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac29 = javac28.debug();
    soottocfg.cfg.util.Tree tree30 = new soottocfg.cfg.util.Tree();
    java.util.Set set31 = tree30.getLeaves();
    soottocfg.randoop.Javac javac32 = javac29.sourcepath((java.util.Collection)set31);
    soottocfg.randoop.Javac javac33 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac34 = javac33.debug();
    soottocfg.cfg.util.Tree tree35 = new soottocfg.cfg.util.Tree();
    java.util.Set set36 = tree35.getLeaves();
    soottocfg.randoop.Javac javac37 = javac34.sourcepath((java.util.Collection)set36);
    soottocfg.randoop.Javac javac38 = javac29.sourcepath((java.util.Collection)set36);
    soottocfg.randoop.Javac javac39 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac40 = javac39.debug();
    soottocfg.cfg.util.Tree tree41 = new soottocfg.cfg.util.Tree();
    java.util.Set set42 = tree41.getLeaves();
    soottocfg.randoop.Javac javac43 = javac40.sourcepath((java.util.Collection)set42);
    boolean b44 = javac40.inDebugMode();
    boolean b45 = javac40.inDebugMode();
    soottocfg.randoop.Classpath classpath46 = new soottocfg.randoop.Classpath();
    soottocfg.randoop.Javac javac47 = javac40.classpath(classpath46);
    soottocfg.randoop.Javac javac48 = javac29.bootClasspath(classpath46);
    java.util.List list49 = javac48.version();
    javac27.log(list49);
    soottocfg.randoop.Javac javac51 = javac26.extraArgs(list49);
    javac1.log(list49);
    soottocfg.randoop.Javac javac53 = javac1.debug();
    soottocfg.randoop.Javac javac54 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac55 = javac54.debug();
    soottocfg.cfg.util.Tree tree56 = new soottocfg.cfg.util.Tree();
    java.util.Set set57 = tree56.getLeaves();
    soottocfg.randoop.Javac javac58 = javac55.sourcepath((java.util.Collection)set57);
    java.lang.String[] str_array59 = soottocfg.randoop.Strings.generateArrayOfStrings((java.util.Collection)set57);
    soottocfg.randoop.Classpath classpath60 = soottocfg.randoop.Classpath.of((java.util.Collection)set57);
    soottocfg.randoop.Javac javac61 = javac1.bootClasspath(classpath60);
    soottocfg.randoop.Javac javac62 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac63 = javac62.debug();
    soottocfg.cfg.util.Tree tree64 = new soottocfg.cfg.util.Tree();
    java.util.Set set65 = tree64.getLeaves();
    soottocfg.randoop.Javac javac66 = javac63.sourcepath((java.util.Collection)set65);
    boolean b67 = javac63.inDebugMode();
    boolean b68 = javac63.inDebugMode();
    soottocfg.randoop.Classpath classpath69 = new soottocfg.randoop.Classpath();
    soottocfg.randoop.Javac javac70 = javac63.classpath(classpath69);
    java.util.List list71 = javac70.version();
    soottocfg.randoop.Javac javac72 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac73 = javac72.debug();
    soottocfg.cfg.util.Tree tree74 = new soottocfg.cfg.util.Tree();
    java.util.Set set75 = tree74.getLeaves();
    soottocfg.randoop.Javac javac76 = javac73.sourcepath((java.util.Collection)set75);
    boolean b77 = javac73.inDebugMode();
    boolean b78 = javac73.inDebugMode();
    soottocfg.randoop.Classpath classpath79 = new soottocfg.randoop.Classpath();
    soottocfg.randoop.Javac javac80 = javac73.classpath(classpath79);
    java.io.File[] file_array81 = new java.io.File[] {  };
    soottocfg.randoop.Classpath classpath82 = soottocfg.randoop.Classpath.of(file_array81);
    classpath79.addAll(file_array81);
    soottocfg.randoop.Javac javac84 = javac70.bootClasspath(classpath79);
    java.lang.String str85 = classpath79.toString();
    soottocfg.randoop.Javac javac86 = javac1.bootClasspath(classpath79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(classpath60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(file_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(classpath82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str85 + "' != '" + ""+ "'", str85.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac86);

  }

  @Test
  public void test184() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test184"); }


    jayhorn.solver.princess.PrincessProver princessProver1 = new jayhorn.solver.princess.PrincessProver("Bool");
    jayhorn.solver.ProverType proverType2 = princessProver1.getIntType();
    jayhorn.solver.princess.PrincessProver princessProver3 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver4 = new jayhorn.solver.princess.PrincessProver();
    princessProver4.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver7 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array8 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr9 = princessProver7.mkOr(proverExpr_array8);
    jayhorn.solver.ProverExpr proverExpr10 = princessProver4.mkOr(proverExpr_array8);
    jayhorn.solver.BoolType boolType12 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str13 = boolType12.toString();
    jayhorn.solver.ProverType[] proverType_array14 = new jayhorn.solver.ProverType[] { boolType12 };
    jayhorn.solver.princess.PrincessProver princessProver15 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array16 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr17 = princessProver15.mkOr(proverExpr_array16);
    jayhorn.solver.ProverFun proverFun18 = princessProver4.mkDefinedFunction("hi!", proverType_array14, proverExpr17);
    jayhorn.solver.ProverExpr proverExpr20 = princessProver4.mkLiteral((-1));
    jayhorn.solver.IntType intType21 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr22 = princessProver3.mkAll(proverExpr20, (jayhorn.solver.ProverType)intType21);
    jayhorn.solver.princess.PrincessProver princessProver23 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array24 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr25 = princessProver23.mkOr(proverExpr_array24);
    jayhorn.solver.princess.PrincessProver princessProver26 = new jayhorn.solver.princess.PrincessProver();
    princessProver26.setPartitionNumber((-1));
    princessProver26.reset();
    jayhorn.solver.princess.PrincessProver princessProver30 = new jayhorn.solver.princess.PrincessProver();
    princessProver30.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver33 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array34 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr35 = princessProver33.mkOr(proverExpr_array34);
    jayhorn.solver.ProverExpr proverExpr36 = princessProver30.mkOr(proverExpr_array34);
    jayhorn.solver.BoolType boolType38 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str39 = boolType38.toString();
    jayhorn.solver.ProverType[] proverType_array40 = new jayhorn.solver.ProverType[] { boolType38 };
    jayhorn.solver.princess.PrincessProver princessProver41 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array42 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr43 = princessProver41.mkOr(proverExpr_array42);
    jayhorn.solver.ProverFun proverFun44 = princessProver30.mkDefinedFunction("hi!", proverType_array40, proverExpr43);
    jayhorn.solver.ProverExpr proverExpr46 = princessProver30.mkLiteral((-1));
    jayhorn.solver.ProverExpr proverExpr47 = princessProver26.mkNeg(proverExpr46);
    jayhorn.solver.z3.Z3HornExpr z3HornExpr48 = new jayhorn.solver.z3.Z3HornExpr(proverExpr22, proverExpr_array24, proverExpr47);
    jayhorn.solver.ProverExpr proverExpr49 = z3HornExpr48.getHead();
    jayhorn.solver.ProverExpr proverExpr50 = z3HornExpr48.getHead();
    jayhorn.solver.ProverExpr proverExpr51 = z3HornExpr48.getConstraint();
    // The following exception was thrown during execution in test generation
    try {
      jayhorn.solver.ProverExpr proverExpr52 = princessProver1.mkNot((jayhorn.solver.ProverExpr)z3HornExpr48);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Bool"+ "'", str13.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "Bool"+ "'", str39.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr51);

  }

  @Test
  public void test185() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test185"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    princessProver0.setConstructProofs(true);
    jayhorn.solver.ProverResult proverResult4 = princessProver0.getResult(true);
    jayhorn.util.SimplCfgToProver simplCfgToProver5 = new jayhorn.util.SimplCfgToProver((jayhorn.solver.Prover)princessProver0);
    java.util.List list6 = simplCfgToProver5.generatedAxioms();
    java.util.List list7 = simplCfgToProver5.generatedAxioms();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverResult4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);

  }

  @Test
  public void test186() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test186"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    princessProver0.setPartitionNumber((-1));
    princessProver0.reset();
    princessProver0.push();
    jayhorn.solver.ProverType proverType5 = princessProver0.getBooleanType();
    jayhorn.solver.ProverResult proverResult7 = princessProver0.nextModel(false);
    jayhorn.solver.princess.PrincessProver princessProver8 = new jayhorn.solver.princess.PrincessProver();
    princessProver8.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver11 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array12 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr13 = princessProver11.mkOr(proverExpr_array12);
    jayhorn.solver.ProverExpr proverExpr14 = princessProver8.mkOr(proverExpr_array12);
    jayhorn.solver.princess.PrincessProver princessProver15 = new jayhorn.solver.princess.PrincessProver();
    princessProver15.setPartitionNumber((-1));
    princessProver15.reset();
    jayhorn.solver.princess.PrincessProver princessProver19 = new jayhorn.solver.princess.PrincessProver();
    princessProver19.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver22 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array23 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr24 = princessProver22.mkOr(proverExpr_array23);
    jayhorn.solver.ProverExpr proverExpr25 = princessProver19.mkOr(proverExpr_array23);
    jayhorn.solver.princess.PrincessProver princessProver26 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver27 = new jayhorn.solver.princess.PrincessProver();
    princessProver27.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver30 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array31 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr32 = princessProver30.mkOr(proverExpr_array31);
    jayhorn.solver.ProverExpr proverExpr33 = princessProver27.mkOr(proverExpr_array31);
    jayhorn.solver.BoolType boolType35 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str36 = boolType35.toString();
    jayhorn.solver.ProverType[] proverType_array37 = new jayhorn.solver.ProverType[] { boolType35 };
    jayhorn.solver.princess.PrincessProver princessProver38 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array39 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr40 = princessProver38.mkOr(proverExpr_array39);
    jayhorn.solver.ProverFun proverFun41 = princessProver27.mkDefinedFunction("hi!", proverType_array37, proverExpr40);
    jayhorn.solver.ProverExpr proverExpr43 = princessProver27.mkLiteral((-1));
    jayhorn.solver.IntType intType44 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr45 = princessProver26.mkAll(proverExpr43, (jayhorn.solver.ProverType)intType44);
    jayhorn.solver.ProverExpr proverExpr46 = princessProver15.mkAnd(proverExpr25, proverExpr45);
    jayhorn.solver.princess.PrincessProver princessProver47 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array48 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr49 = princessProver47.mkOr(proverExpr_array48);
    jayhorn.solver.princess.PrincessProver princessProver50 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array51 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr52 = princessProver50.mkOr(proverExpr_array51);
    jayhorn.solver.BoolType boolType54 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str55 = boolType54.toString();
    jayhorn.solver.ProverExpr proverExpr56 = princessProver50.mkHornVariable("hi!", (jayhorn.solver.ProverType)boolType54);
    jayhorn.solver.princess.PrincessProver princessProver57 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver58 = new jayhorn.solver.princess.PrincessProver();
    princessProver58.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver61 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array62 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr63 = princessProver61.mkOr(proverExpr_array62);
    jayhorn.solver.ProverExpr proverExpr64 = princessProver58.mkOr(proverExpr_array62);
    jayhorn.solver.BoolType boolType66 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str67 = boolType66.toString();
    jayhorn.solver.ProverType[] proverType_array68 = new jayhorn.solver.ProverType[] { boolType66 };
    jayhorn.solver.princess.PrincessProver princessProver69 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array70 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr71 = princessProver69.mkOr(proverExpr_array70);
    jayhorn.solver.ProverFun proverFun72 = princessProver58.mkDefinedFunction("hi!", proverType_array68, proverExpr71);
    jayhorn.solver.ProverExpr proverExpr74 = princessProver58.mkLiteral((-1));
    jayhorn.solver.IntType intType75 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr76 = princessProver57.mkAll(proverExpr74, (jayhorn.solver.ProverType)intType75);
    jayhorn.solver.princess.PrincessProver princessProver78 = new jayhorn.solver.princess.PrincessProver();
    princessProver78.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver81 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array82 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr83 = princessProver81.mkOr(proverExpr_array82);
    jayhorn.solver.ProverExpr proverExpr84 = princessProver78.mkOr(proverExpr_array82);
    jayhorn.solver.BoolType boolType86 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str87 = boolType86.toString();
    jayhorn.solver.ProverType[] proverType_array88 = new jayhorn.solver.ProverType[] { boolType86 };
    jayhorn.solver.princess.PrincessProver princessProver89 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array90 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr91 = princessProver89.mkOr(proverExpr_array90);
    jayhorn.solver.ProverFun proverFun92 = princessProver78.mkDefinedFunction("hi!", proverType_array88, proverExpr91);
    jayhorn.solver.princess.PrincessProver princessProver93 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array94 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr95 = princessProver93.mkOr(proverExpr_array94);
    jayhorn.solver.ProverFun proverFun96 = princessProver57.mkDefinedFunction("hi!", proverType_array88, proverExpr95);
    jayhorn.solver.ProverExpr proverExpr97 = princessProver47.mkAnd(proverExpr56, proverExpr95);
    jayhorn.solver.ProverExpr proverExpr98 = princessProver8.mkAnd(proverExpr25, proverExpr56);
    princessProver0.addAssertion(proverExpr98);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverResult7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Bool"+ "'", str36.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "Bool"+ "'", str55.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "Bool"+ "'", str67.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str87 + "' != '" + "Bool"+ "'", str87.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun96);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr97);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr98);

  }

  @Test
  public void test187() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test187"); }


    jayhorn.solver.ArrayType arrayType1 = new jayhorn.solver.ArrayType(0);

  }

  @Test
  public void test188() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test188"); }


    jayhorn.solver.Main main0 = new jayhorn.solver.Main();
    jayhorn.solver.princess.PrincessProver princessProver1 = new jayhorn.solver.princess.PrincessProver();
    princessProver1.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver4 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array5 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr6 = princessProver4.mkOr(proverExpr_array5);
    jayhorn.solver.ProverExpr proverExpr7 = princessProver1.mkOr(proverExpr_array5);
    jayhorn.solver.BoolType boolType9 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str10 = boolType9.toString();
    jayhorn.solver.ProverType[] proverType_array11 = new jayhorn.solver.ProverType[] { boolType9 };
    jayhorn.solver.princess.PrincessProver princessProver12 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array13 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr14 = princessProver12.mkOr(proverExpr_array13);
    jayhorn.solver.ProverFun proverFun15 = princessProver1.mkDefinedFunction("hi!", proverType_array11, proverExpr14);
    jayhorn.solver.ProverExpr proverExpr17 = princessProver1.mkLiteral((-1));
    jayhorn.solver.princess.PrincessProver princessProver18 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array19 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr20 = princessProver18.mkOr(proverExpr_array19);
    jayhorn.solver.ProverExpr proverExpr21 = princessProver1.mkAnd(proverExpr_array19);
    jayhorn.solver.ProverType proverType22 = princessProver1.getIntType();
    main0.test02((jayhorn.solver.Prover)princessProver1);
    princessProver1.shutdown();
    jayhorn.solver.ArrayType arrayType27 = new jayhorn.solver.ArrayType(10);
    soottocfg.randoop.Javac javac28 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac29 = javac28.debug();
    soottocfg.cfg.util.Tree tree30 = new soottocfg.cfg.util.Tree();
    java.util.Set set31 = tree30.getLeaves();
    soottocfg.randoop.Javac javac32 = javac29.sourcepath((java.util.Collection)set31);
    soottocfg.randoop.Javac javac33 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac34 = javac33.debug();
    soottocfg.cfg.util.Tree tree35 = new soottocfg.cfg.util.Tree();
    java.util.Set set36 = tree35.getLeaves();
    soottocfg.randoop.Javac javac37 = javac34.sourcepath((java.util.Collection)set36);
    soottocfg.randoop.Javac javac38 = javac29.sourcepath((java.util.Collection)set36);
    soottocfg.randoop.Javac javac39 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac40 = javac39.debug();
    soottocfg.cfg.util.Tree tree41 = new soottocfg.cfg.util.Tree();
    java.util.Set set42 = tree41.getLeaves();
    soottocfg.randoop.Javac javac43 = javac40.sourcepath((java.util.Collection)set42);
    boolean b44 = javac40.inDebugMode();
    boolean b45 = javac40.inDebugMode();
    soottocfg.randoop.Classpath classpath46 = new soottocfg.randoop.Classpath();
    soottocfg.randoop.Javac javac47 = javac40.classpath(classpath46);
    soottocfg.randoop.Javac javac48 = javac29.bootClasspath(classpath46);
    java.util.List list49 = javac48.version();
    boolean b50 = arrayType27.equals((java.lang.Object)javac48);
    jayhorn.solver.ProverExpr proverExpr51 = princessProver1.mkVariable("hi!", (jayhorn.solver.ProverType)arrayType27);
    jayhorn.Log.error((java.lang.Object)proverExpr51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Bool"+ "'", str10.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr51);

  }

  @Test
  public void test189() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test189"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverType proverType1 = princessProver0.getBooleanType();
    princessProver0.push();
    jayhorn.solver.ProverResult proverResult4 = princessProver0.checkSat(true);
    princessProver0.reset();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverResult4);

  }

  @Test
  public void test190() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test190"); }


    soottocfg.cfg.Program program0 = new soottocfg.cfg.Program();
    org.jgrapht.DirectedGraph directedGraph1 = program0.getCallGraph();
    org.jgrapht.DirectedGraph directedGraph2 = program0.getCallGraph();
    java.util.Set set3 = soottocfg.cfg.util.GraphUtil.getSinks(directedGraph2);
    java.lang.Object obj4 = soottocfg.cfg.util.GraphUtil.getSink(directedGraph2);
    java.lang.Object obj5 = soottocfg.cfg.util.GraphUtil.getSink(directedGraph2);
    jayhorn.solver.Main main6 = new jayhorn.solver.Main();
    jayhorn.solver.princess.PrincessProver princessProver7 = new jayhorn.solver.princess.PrincessProver();
    princessProver7.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver10 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array11 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr12 = princessProver10.mkOr(proverExpr_array11);
    jayhorn.solver.ProverExpr proverExpr13 = princessProver7.mkOr(proverExpr_array11);
    jayhorn.solver.BoolType boolType15 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str16 = boolType15.toString();
    jayhorn.solver.ProverType[] proverType_array17 = new jayhorn.solver.ProverType[] { boolType15 };
    jayhorn.solver.princess.PrincessProver princessProver18 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array19 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr20 = princessProver18.mkOr(proverExpr_array19);
    jayhorn.solver.ProverFun proverFun21 = princessProver7.mkDefinedFunction("hi!", proverType_array17, proverExpr20);
    jayhorn.solver.ProverExpr proverExpr23 = princessProver7.mkLiteral((-1));
    jayhorn.solver.princess.PrincessProver princessProver24 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array25 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr26 = princessProver24.mkOr(proverExpr_array25);
    jayhorn.solver.ProverExpr proverExpr27 = princessProver7.mkAnd(proverExpr_array25);
    jayhorn.solver.ProverType proverType28 = princessProver7.getIntType();
    main6.test02((jayhorn.solver.Prover)princessProver7);
    jayhorn.solver.princess.PrincessProver princessProver30 = new jayhorn.solver.princess.PrincessProver();
    princessProver30.setPartitionNumber((-1));
    princessProver30.reset();
    jayhorn.solver.princess.PrincessProver princessProver34 = new jayhorn.solver.princess.PrincessProver();
    princessProver34.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver37 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array38 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr39 = princessProver37.mkOr(proverExpr_array38);
    jayhorn.solver.ProverExpr proverExpr40 = princessProver34.mkOr(proverExpr_array38);
    jayhorn.solver.BoolType boolType42 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str43 = boolType42.toString();
    jayhorn.solver.ProverType[] proverType_array44 = new jayhorn.solver.ProverType[] { boolType42 };
    jayhorn.solver.princess.PrincessProver princessProver45 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array46 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr47 = princessProver45.mkOr(proverExpr_array46);
    jayhorn.solver.ProverFun proverFun48 = princessProver34.mkDefinedFunction("hi!", proverType_array44, proverExpr47);
    jayhorn.solver.ProverExpr proverExpr50 = princessProver34.mkLiteral((-1));
    jayhorn.solver.ProverExpr proverExpr51 = princessProver30.mkNeg(proverExpr50);
    main6.test03((jayhorn.solver.Prover)princessProver30);
    jayhorn.solver.princess.PrincessProver princessProver53 = new jayhorn.solver.princess.PrincessProver();
    princessProver53.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver56 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array57 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr58 = princessProver56.mkOr(proverExpr_array57);
    jayhorn.solver.ProverExpr proverExpr59 = princessProver53.mkOr(proverExpr_array57);
    jayhorn.solver.BoolType boolType61 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str62 = boolType61.toString();
    jayhorn.solver.ProverType[] proverType_array63 = new jayhorn.solver.ProverType[] { boolType61 };
    jayhorn.solver.princess.PrincessProver princessProver64 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array65 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr66 = princessProver64.mkOr(proverExpr_array65);
    jayhorn.solver.ProverFun proverFun67 = princessProver53.mkDefinedFunction("hi!", proverType_array63, proverExpr66);
    jayhorn.solver.princess.PrincessProver princessProver69 = new jayhorn.solver.princess.PrincessProver();
    princessProver69.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver72 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array73 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr74 = princessProver72.mkOr(proverExpr_array73);
    jayhorn.solver.ProverExpr proverExpr75 = princessProver69.mkOr(proverExpr_array73);
    jayhorn.solver.BoolType boolType77 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str78 = boolType77.toString();
    jayhorn.solver.ProverType[] proverType_array79 = new jayhorn.solver.ProverType[] { boolType77 };
    jayhorn.solver.princess.PrincessProver princessProver80 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array81 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr82 = princessProver80.mkOr(proverExpr_array81);
    jayhorn.solver.ProverFun proverFun83 = princessProver69.mkDefinedFunction("hi!", proverType_array79, proverExpr82);
    jayhorn.solver.BoolType boolType84 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str85 = boolType84.toString();
    jayhorn.solver.ProverFun proverFun86 = princessProver53.mkUnintFunction("", proverType_array79, (jayhorn.solver.ProverType)boolType84);
    main6.test01((jayhorn.solver.Prover)princessProver53);
    jayhorn.solver.princess.PrincessProverFactory princessProverFactory88 = new jayhorn.solver.princess.PrincessProverFactory();
    main6.runTests((jayhorn.solver.ProverFactory)princessProverFactory88);
    // The following exception was thrown during execution in test generation
    try {
      soottocfg.cfg.util.CategorizeEdges categorizeEdges90 = new soottocfg.cfg.util.CategorizeEdges(directedGraph2, (java.lang.Object)princessProverFactory88);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(directedGraph1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(directedGraph2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obj4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obj5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Bool"+ "'", str16.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "Bool"+ "'", str43.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "Bool"+ "'", str62.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str78 + "' != '" + "Bool"+ "'", str78.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str85 + "' != '" + "Bool"+ "'", str85.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun86);

  }

  @Test
  public void test191() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test191"); }


    soottocfg.cfg.Program program0 = new soottocfg.cfg.Program();
    org.jgrapht.DirectedGraph directedGraph1 = program0.getCallGraph();
    org.jgrapht.DirectedGraph directedGraph2 = program0.getCallGraph();
    jayhorn.solver.princess.PrincessProver princessProver3 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver4 = new jayhorn.solver.princess.PrincessProver();
    princessProver4.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver7 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array8 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr9 = princessProver7.mkOr(proverExpr_array8);
    jayhorn.solver.ProverExpr proverExpr10 = princessProver4.mkOr(proverExpr_array8);
    jayhorn.solver.BoolType boolType12 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str13 = boolType12.toString();
    jayhorn.solver.ProverType[] proverType_array14 = new jayhorn.solver.ProverType[] { boolType12 };
    jayhorn.solver.princess.PrincessProver princessProver15 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array16 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr17 = princessProver15.mkOr(proverExpr_array16);
    jayhorn.solver.ProverFun proverFun18 = princessProver4.mkDefinedFunction("hi!", proverType_array14, proverExpr17);
    jayhorn.solver.ProverExpr proverExpr20 = princessProver4.mkLiteral((-1));
    jayhorn.solver.IntType intType21 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr22 = princessProver3.mkAll(proverExpr20, (jayhorn.solver.ProverType)intType21);
    // The following exception was thrown during execution in test generation
    try {
      java.util.Set set23 = soottocfg.cfg.util.GraphUtil.getBackwardReachableVertices(directedGraph2, (java.lang.Object)intType21);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(directedGraph1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(directedGraph2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Bool"+ "'", str13.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr22);

  }

  @Test
  public void test192() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test192"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    princessProver0.setPartitionNumber((-1));
    jayhorn.solver.ProverType proverType3 = princessProver0.getBooleanType();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType3);

  }

  @Test
  public void test193() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test193"); }


    jayhorn.Options options0 = jayhorn.Options.v();
    boolean b1 = options0.hasScope();
    java.lang.String str2 = options0.getScope();
    jayhorn.Log.error((java.lang.Object)options0);
    options0.setAndroidStubPath("");
    options0.setClasspath("Int");
    java.lang.String str8 = options0.getScope();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(options0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str8);

  }

  @Test
  public void test194() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test194"); }


    soottocfg.cfg.Program program0 = new soottocfg.cfg.Program();
    org.jgrapht.DirectedGraph directedGraph1 = program0.getCallGraph();
    org.jgrapht.DirectedGraph directedGraph2 = program0.getCallGraph();
    java.util.Set set3 = soottocfg.cfg.util.GraphUtil.getSinks(directedGraph2);
    java.lang.Object obj4 = soottocfg.cfg.util.GraphUtil.getSink(directedGraph2);
    java.lang.Object obj5 = soottocfg.cfg.util.GraphUtil.getSink(directedGraph2);
    soottocfg.cfg.Program program6 = new soottocfg.cfg.Program();
    org.jgrapht.DirectedGraph directedGraph7 = program6.getCallGraph();
    org.jgrapht.DirectedGraph directedGraph8 = program6.getCallGraph();
    // The following exception was thrown during execution in test generation
    try {
      org.jgrapht.DirectedGraph directedGraph9 = soottocfg.cfg.util.GraphUtil.computeSubgraphThroughVertex(directedGraph2, (java.lang.Object)directedGraph8);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(directedGraph1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(directedGraph2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obj4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obj5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(directedGraph7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(directedGraph8);

  }

  @Test
  public void test195() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test195"); }


    jayhorn.solver.princess.PrincessProverFactory princessProverFactory0 = new jayhorn.solver.princess.PrincessProverFactory();
    jayhorn.solver.Prover prover2 = princessProverFactory0.spawnWithLog("hi!");
    jayhorn.solver.Prover prover4 = princessProverFactory0.spawnWithLog("Bool");
    jayhorn.solver.Prover prover5 = princessProverFactory0.spawn();
    jayhorn.solver.Prover prover6 = princessProverFactory0.spawn();
    jayhorn.solver.Prover prover8 = princessProverFactory0.spawnWithLog("\\forall int v0; -1 = 0 <- -1*-1");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(prover2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(prover4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(prover5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(prover6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(prover8);

  }

  @Test
  public void test196() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test196"); }


    soottocfg.cfg.SourceLocation sourceLocation2 = new soottocfg.cfg.SourceLocation("", 0);
    java.lang.String str3 = sourceLocation2.getSourceFileName();
    int i4 = sourceLocation2.getLineNumber();
    java.lang.String str5 = sourceLocation2.getSourceFileName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + ""+ "'", str3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));

  }

  @Test
  public void test197() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test197"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver1 = new jayhorn.solver.princess.PrincessProver();
    princessProver1.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver4 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array5 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr6 = princessProver4.mkOr(proverExpr_array5);
    jayhorn.solver.ProverExpr proverExpr7 = princessProver1.mkOr(proverExpr_array5);
    jayhorn.solver.BoolType boolType9 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str10 = boolType9.toString();
    jayhorn.solver.ProverType[] proverType_array11 = new jayhorn.solver.ProverType[] { boolType9 };
    jayhorn.solver.princess.PrincessProver princessProver12 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array13 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr14 = princessProver12.mkOr(proverExpr_array13);
    jayhorn.solver.ProverFun proverFun15 = princessProver1.mkDefinedFunction("hi!", proverType_array11, proverExpr14);
    jayhorn.solver.ProverExpr proverExpr17 = princessProver1.mkLiteral((-1));
    jayhorn.solver.IntType intType18 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr19 = princessProver0.mkAll(proverExpr17, (jayhorn.solver.ProverType)intType18);
    jayhorn.solver.princess.PrincessProver princessProver20 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver21 = new jayhorn.solver.princess.PrincessProver();
    princessProver21.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver24 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array25 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr26 = princessProver24.mkOr(proverExpr_array25);
    jayhorn.solver.ProverExpr proverExpr27 = princessProver21.mkOr(proverExpr_array25);
    jayhorn.solver.BoolType boolType29 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str30 = boolType29.toString();
    jayhorn.solver.ProverType[] proverType_array31 = new jayhorn.solver.ProverType[] { boolType29 };
    jayhorn.solver.princess.PrincessProver princessProver32 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array33 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr34 = princessProver32.mkOr(proverExpr_array33);
    jayhorn.solver.ProverFun proverFun35 = princessProver21.mkDefinedFunction("hi!", proverType_array31, proverExpr34);
    jayhorn.solver.ProverExpr proverExpr37 = princessProver21.mkLiteral((-1));
    jayhorn.solver.IntType intType38 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr39 = princessProver20.mkAll(proverExpr37, (jayhorn.solver.ProverType)intType38);
    jayhorn.solver.princess.PrincessProver princessProver40 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array41 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr42 = princessProver40.mkOr(proverExpr_array41);
    jayhorn.solver.princess.PrincessProver princessProver43 = new jayhorn.solver.princess.PrincessProver();
    princessProver43.setPartitionNumber((-1));
    princessProver43.reset();
    jayhorn.solver.princess.PrincessProver princessProver47 = new jayhorn.solver.princess.PrincessProver();
    princessProver47.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver50 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array51 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr52 = princessProver50.mkOr(proverExpr_array51);
    jayhorn.solver.ProverExpr proverExpr53 = princessProver47.mkOr(proverExpr_array51);
    jayhorn.solver.BoolType boolType55 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str56 = boolType55.toString();
    jayhorn.solver.ProverType[] proverType_array57 = new jayhorn.solver.ProverType[] { boolType55 };
    jayhorn.solver.princess.PrincessProver princessProver58 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array59 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr60 = princessProver58.mkOr(proverExpr_array59);
    jayhorn.solver.ProverFun proverFun61 = princessProver47.mkDefinedFunction("hi!", proverType_array57, proverExpr60);
    jayhorn.solver.ProverExpr proverExpr63 = princessProver47.mkLiteral((-1));
    jayhorn.solver.ProverExpr proverExpr64 = princessProver43.mkNeg(proverExpr63);
    jayhorn.solver.z3.Z3HornExpr z3HornExpr65 = new jayhorn.solver.z3.Z3HornExpr(proverExpr39, proverExpr_array41, proverExpr64);
    jayhorn.solver.ProverExpr proverExpr66 = z3HornExpr65.getHead();
    jayhorn.solver.ProverExpr proverExpr67 = z3HornExpr65.getHead();
    jayhorn.solver.ProverExpr[] proverExpr_array68 = z3HornExpr65.getBody();
    jayhorn.solver.ProverExpr proverExpr69 = princessProver0.mkOr(proverExpr_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Bool"+ "'", str10.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "Bool"+ "'", str30.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "Bool"+ "'", str56.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr69);

  }

  @Test
  public void test198() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test198"); }


    soottocfg.cfg.SourceLocation sourceLocation2 = new soottocfg.cfg.SourceLocation("Bool", 100);

  }

  @Test
  public void test199() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test199"); }


    soottocfg.randoop.Javac javac0 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac1 = javac0.debug();
    soottocfg.cfg.util.Tree tree2 = new soottocfg.cfg.util.Tree();
    java.util.Set set3 = tree2.getLeaves();
    soottocfg.randoop.Javac javac4 = javac1.sourcepath((java.util.Collection)set3);
    boolean b5 = javac1.inDebugMode();
    soottocfg.randoop.Javac javac6 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac7 = javac6.debug();
    soottocfg.cfg.util.Tree tree8 = new soottocfg.cfg.util.Tree();
    java.util.Set set9 = tree8.getLeaves();
    soottocfg.randoop.Javac javac10 = javac7.sourcepath((java.util.Collection)set9);
    soottocfg.randoop.Javac javac11 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac12 = javac11.debug();
    soottocfg.cfg.util.Tree tree13 = new soottocfg.cfg.util.Tree();
    java.util.Set set14 = tree13.getLeaves();
    soottocfg.randoop.Javac javac15 = javac12.sourcepath((java.util.Collection)set14);
    soottocfg.randoop.Javac javac16 = javac7.sourcepath((java.util.Collection)set14);
    soottocfg.randoop.Javac javac17 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac18 = javac17.debug();
    soottocfg.cfg.util.Tree tree19 = new soottocfg.cfg.util.Tree();
    java.util.Set set20 = tree19.getLeaves();
    soottocfg.randoop.Javac javac21 = javac18.sourcepath((java.util.Collection)set20);
    boolean b22 = javac18.inDebugMode();
    boolean b23 = javac18.inDebugMode();
    soottocfg.randoop.Classpath classpath24 = new soottocfg.randoop.Classpath();
    soottocfg.randoop.Javac javac25 = javac18.classpath(classpath24);
    soottocfg.randoop.Javac javac26 = javac7.bootClasspath(classpath24);
    soottocfg.randoop.Javac javac27 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac28 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac29 = javac28.debug();
    soottocfg.cfg.util.Tree tree30 = new soottocfg.cfg.util.Tree();
    java.util.Set set31 = tree30.getLeaves();
    soottocfg.randoop.Javac javac32 = javac29.sourcepath((java.util.Collection)set31);
    soottocfg.randoop.Javac javac33 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac34 = javac33.debug();
    soottocfg.cfg.util.Tree tree35 = new soottocfg.cfg.util.Tree();
    java.util.Set set36 = tree35.getLeaves();
    soottocfg.randoop.Javac javac37 = javac34.sourcepath((java.util.Collection)set36);
    soottocfg.randoop.Javac javac38 = javac29.sourcepath((java.util.Collection)set36);
    soottocfg.randoop.Javac javac39 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac40 = javac39.debug();
    soottocfg.cfg.util.Tree tree41 = new soottocfg.cfg.util.Tree();
    java.util.Set set42 = tree41.getLeaves();
    soottocfg.randoop.Javac javac43 = javac40.sourcepath((java.util.Collection)set42);
    boolean b44 = javac40.inDebugMode();
    boolean b45 = javac40.inDebugMode();
    soottocfg.randoop.Classpath classpath46 = new soottocfg.randoop.Classpath();
    soottocfg.randoop.Javac javac47 = javac40.classpath(classpath46);
    soottocfg.randoop.Javac javac48 = javac29.bootClasspath(classpath46);
    java.util.List list49 = javac48.version();
    javac27.log(list49);
    soottocfg.randoop.Javac javac51 = javac26.extraArgs(list49);
    javac1.log(list49);
    soottocfg.randoop.Command command53 = new soottocfg.randoop.Command(list49);
    // The following exception was thrown during execution in test generation
    try {
      command53.start();
      org.junit.Assert.fail("Expected exception of type java.io.IOException");
    } catch (java.io.IOException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.io.IOException")) {
        org.junit.Assert.fail("Expected exception of type java.io.IOException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac51);

  }

  @Test
  public void test200() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test200"); }


    soottocfg.cfg.Program program0 = new soottocfg.cfg.Program();
    soottocfg.cfg.Variable[] variable_array1 = program0.getGlobalVariables();
    soottocfg.cfg.method.Method method3 = program0.loopupMethod("javac 1.8.0_72");
    soottocfg.randoop.Javac javac6 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac7 = javac6.debug();
    soottocfg.cfg.util.Tree tree8 = new soottocfg.cfg.util.Tree();
    java.util.Set set9 = tree8.getLeaves();
    soottocfg.randoop.Javac javac10 = javac7.sourcepath((java.util.Collection)set9);
    soottocfg.randoop.Javac javac11 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac12 = javac11.debug();
    soottocfg.cfg.util.Tree tree13 = new soottocfg.cfg.util.Tree();
    java.util.Set set14 = tree13.getLeaves();
    soottocfg.randoop.Javac javac15 = javac12.sourcepath((java.util.Collection)set14);
    soottocfg.randoop.Javac javac16 = javac7.sourcepath((java.util.Collection)set14);
    java.lang.String[] str_array17 = soottocfg.randoop.Strings.generateArrayOfStrings((java.util.Collection)set14);
    soottocfg.cfg.ClassVariable classVariable18 = new soottocfg.cfg.ClassVariable("\\forall int v0; -1 = 0 <- -1*-1", (java.util.Collection)set14);
    boolean b19 = classVariable18.isConstant();
    soottocfg.cfg.type.Type type20 = classVariable18.getType();
    soottocfg.cfg.Variable variable21 = program0.lookupGlobalVariable("hi!", type20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(variable_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(method3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(type20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(variable21);

  }

  @Test
  public void test201() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test201"); }


    jayhorn.Options options0 = jayhorn.Options.v();
    boolean b1 = options0.hasScope();
    options0.setClasspath("");
    boolean b4 = options0.hasClasspath();
    options0.setAndroidStubPath("safety");
    java.lang.String str7 = options0.getJavaInput();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(options0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str7);

  }

  @Test
  public void test202() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test202"); }


    soottocfg.randoop.Javac javac1 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac2 = javac1.debug();
    soottocfg.cfg.util.Tree tree3 = new soottocfg.cfg.util.Tree();
    java.util.Set set4 = tree3.getLeaves();
    soottocfg.randoop.Javac javac5 = javac2.sourcepath((java.util.Collection)set4);
    soottocfg.randoop.Javac javac6 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac7 = javac6.debug();
    soottocfg.cfg.util.Tree tree8 = new soottocfg.cfg.util.Tree();
    java.util.Set set9 = tree8.getLeaves();
    soottocfg.randoop.Javac javac10 = javac7.sourcepath((java.util.Collection)set9);
    soottocfg.randoop.Javac javac11 = javac2.sourcepath((java.util.Collection)set9);
    java.lang.String[] str_array12 = soottocfg.randoop.Strings.generateArrayOfStrings((java.util.Collection)set9);
    soottocfg.cfg.ClassVariable classVariable13 = new soottocfg.cfg.ClassVariable("\\forall int v0; -1 = 0 <- -1*-1", (java.util.Collection)set9);
    boolean b14 = classVariable13.isConstant();
    soottocfg.cfg.type.Type type15 = classVariable13.getType();
    java.lang.String str16 = classVariable13.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(type15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\\forall int v0; -1 = 0 <- -1*-1"+ "'", str16.equals("\\forall int v0; -1 = 0 <- -1*-1"));

  }

  @Test
  public void test203() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test203"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    princessProver0.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver3 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array4 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr5 = princessProver3.mkOr(proverExpr_array4);
    jayhorn.solver.ProverExpr proverExpr6 = princessProver0.mkOr(proverExpr_array4);
    jayhorn.solver.ProverResult proverResult8 = princessProver0.getResult(false);
    jayhorn.solver.IntType intType10 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr11 = princessProver0.mkHornVariable("Int", (jayhorn.solver.ProverType)intType10);
    jayhorn.solver.princess.PrincessProver princessProver14 = new jayhorn.solver.princess.PrincessProver("Bool");
    jayhorn.solver.ProverType proverType15 = princessProver14.getIntType();
    jayhorn.solver.ProverExpr proverExpr16 = princessProver0.mkVariable("", proverType15);
    // The following exception was thrown during execution in test generation
    try {
      princessProver0.pop();
      org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.RuntimeException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverResult8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr16);

  }

  @Test
  public void test204() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test204"); }


    soottocfg.cfg.Program program0 = new soottocfg.cfg.Program();
    org.jgrapht.DirectedGraph directedGraph1 = program0.getCallGraph();
    soottocfg.cfg.method.Method[] method_array2 = program0.getEntryPoints();
    java.util.Map map3 = program0.getModifiedGlobals();
    soottocfg.cfg.method.Method[] method_array4 = program0.getMethods();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(directedGraph1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(method_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(method_array4);

  }

  @Test
  public void test205() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test205"); }


    soottocfg.randoop.Javac javac0 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac1 = javac0.debug();
    soottocfg.cfg.util.Tree tree2 = new soottocfg.cfg.util.Tree();
    java.util.Set set3 = tree2.getLeaves();
    soottocfg.randoop.Javac javac4 = javac1.sourcepath((java.util.Collection)set3);
    soottocfg.randoop.Javac javac5 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac6 = javac5.debug();
    soottocfg.cfg.util.Tree tree7 = new soottocfg.cfg.util.Tree();
    java.util.Set set8 = tree7.getLeaves();
    soottocfg.randoop.Javac javac9 = javac6.sourcepath((java.util.Collection)set8);
    soottocfg.randoop.Javac javac10 = javac1.sourcepath((java.util.Collection)set8);
    soottocfg.randoop.Javac javac11 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac12 = javac11.debug();
    soottocfg.cfg.util.Tree tree13 = new soottocfg.cfg.util.Tree();
    java.util.Set set14 = tree13.getLeaves();
    soottocfg.randoop.Javac javac15 = javac12.sourcepath((java.util.Collection)set14);
    boolean b16 = javac12.inDebugMode();
    boolean b17 = javac12.inDebugMode();
    soottocfg.randoop.Classpath classpath18 = new soottocfg.randoop.Classpath();
    soottocfg.randoop.Javac javac19 = javac12.classpath(classpath18);
    soottocfg.randoop.Javac javac20 = javac1.bootClasspath(classpath18);
    jayhorn.Log.info((java.lang.Object)javac20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac20);

  }

  @Test
  public void test206() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test206"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    princessProver0.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver3 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array4 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr5 = princessProver3.mkOr(proverExpr_array4);
    jayhorn.solver.ProverExpr proverExpr6 = princessProver0.mkOr(proverExpr_array4);
    jayhorn.solver.BoolType boolType8 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str9 = boolType8.toString();
    jayhorn.solver.ProverType[] proverType_array10 = new jayhorn.solver.ProverType[] { boolType8 };
    jayhorn.solver.princess.PrincessProver princessProver11 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array12 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr13 = princessProver11.mkOr(proverExpr_array12);
    jayhorn.solver.ProverFun proverFun14 = princessProver0.mkDefinedFunction("hi!", proverType_array10, proverExpr13);
    princessProver0.setPartitionNumber(10);
    jayhorn.solver.ProverResult proverResult18 = princessProver0.checkSat(false);
    jayhorn.solver.princess.PrincessProver princessProver20 = new jayhorn.solver.princess.PrincessProver();
    princessProver20.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver23 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array24 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr25 = princessProver23.mkOr(proverExpr_array24);
    jayhorn.solver.ProverExpr proverExpr26 = princessProver20.mkOr(proverExpr_array24);
    jayhorn.solver.BoolType boolType28 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str29 = boolType28.toString();
    jayhorn.solver.ProverType[] proverType_array30 = new jayhorn.solver.ProverType[] { boolType28 };
    jayhorn.solver.princess.PrincessProver princessProver31 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array32 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr33 = princessProver31.mkOr(proverExpr_array32);
    jayhorn.solver.ProverFun proverFun34 = princessProver20.mkDefinedFunction("hi!", proverType_array30, proverExpr33);
    princessProver20.setPartitionNumber(10);
    jayhorn.solver.ProverType proverType37 = princessProver20.getBooleanType();
    jayhorn.solver.ProverExpr proverExpr38 = princessProver0.mkHornVariable("Array(10)", proverType37);
    // The following exception was thrown during execution in test generation
    try {
      princessProver0.pop();
      org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.RuntimeException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Bool"+ "'", str9.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverResult18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "Bool"+ "'", str29.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr38);

  }

  @Test
  public void test207() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test207"); }


    soottocfg.randoop.Javac javac2 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac3 = javac2.debug();
    soottocfg.cfg.util.Tree tree4 = new soottocfg.cfg.util.Tree();
    java.util.Set set5 = tree4.getLeaves();
    soottocfg.randoop.Javac javac6 = javac3.sourcepath((java.util.Collection)set5);
    soottocfg.randoop.Javac javac7 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac8 = javac7.debug();
    soottocfg.cfg.util.Tree tree9 = new soottocfg.cfg.util.Tree();
    java.util.Set set10 = tree9.getLeaves();
    soottocfg.randoop.Javac javac11 = javac8.sourcepath((java.util.Collection)set10);
    soottocfg.randoop.Javac javac12 = javac3.sourcepath((java.util.Collection)set10);
    java.lang.String[] str_array13 = soottocfg.randoop.Strings.generateArrayOfStrings((java.util.Collection)set10);
    soottocfg.cfg.ClassVariable classVariable14 = new soottocfg.cfg.ClassVariable("\\forall int v0; -1 = 0 <- -1*-1", (java.util.Collection)set10);
    boolean b15 = classVariable14.isConstant();
    soottocfg.cfg.type.Type type16 = classVariable14.getType();
    soottocfg.cfg.Variable variable17 = new soottocfg.cfg.Variable("", type16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(type16);

  }

  @Test
  public void test208() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test208"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    princessProver0.setPartitionNumber((-1));
    princessProver0.reset();
    jayhorn.solver.princess.PrincessProver princessProver4 = new jayhorn.solver.princess.PrincessProver();
    princessProver4.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver7 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array8 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr9 = princessProver7.mkOr(proverExpr_array8);
    jayhorn.solver.ProverExpr proverExpr10 = princessProver4.mkOr(proverExpr_array8);
    jayhorn.solver.BoolType boolType12 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str13 = boolType12.toString();
    jayhorn.solver.ProverType[] proverType_array14 = new jayhorn.solver.ProverType[] { boolType12 };
    jayhorn.solver.princess.PrincessProver princessProver15 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array16 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr17 = princessProver15.mkOr(proverExpr_array16);
    jayhorn.solver.ProverFun proverFun18 = princessProver4.mkDefinedFunction("hi!", proverType_array14, proverExpr17);
    jayhorn.solver.ProverExpr proverExpr20 = princessProver4.mkLiteral((-1));
    jayhorn.solver.ProverExpr proverExpr21 = princessProver0.mkNeg(proverExpr20);
    jayhorn.solver.ProverResult proverResult23 = princessProver0.getResult((-1L));
    jayhorn.solver.ProverResult proverResult25 = princessProver0.getResult(false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Bool"+ "'", str13.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverResult23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverResult25);

  }

  @Test
  public void test209() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test209"); }


    soottocfg.randoop.Javac javac0 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac1 = javac0.debug();
    soottocfg.cfg.util.Tree tree2 = new soottocfg.cfg.util.Tree();
    java.util.Set set3 = tree2.getLeaves();
    soottocfg.randoop.Javac javac4 = javac1.sourcepath((java.util.Collection)set3);
    soottocfg.randoop.Javac javac5 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac6 = javac5.debug();
    soottocfg.cfg.util.Tree tree7 = new soottocfg.cfg.util.Tree();
    java.util.Set set8 = tree7.getLeaves();
    soottocfg.randoop.Javac javac9 = javac6.sourcepath((java.util.Collection)set8);
    soottocfg.randoop.Javac javac10 = javac1.sourcepath((java.util.Collection)set8);
    soottocfg.randoop.Javac javac11 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac12 = javac11.debug();
    soottocfg.cfg.util.Tree tree13 = new soottocfg.cfg.util.Tree();
    java.util.Set set14 = tree13.getLeaves();
    soottocfg.randoop.Javac javac15 = javac12.sourcepath((java.util.Collection)set14);
    boolean b16 = javac12.inDebugMode();
    boolean b17 = javac12.inDebugMode();
    soottocfg.randoop.Classpath classpath18 = new soottocfg.randoop.Classpath();
    soottocfg.randoop.Javac javac19 = javac12.classpath(classpath18);
    soottocfg.randoop.Javac javac20 = javac1.bootClasspath(classpath18);
    java.util.List list21 = javac20.version();
    java.io.File[] file_array22 = new java.io.File[] {  };
    soottocfg.randoop.Javac javac23 = javac20.classpath(file_array22);
    soottocfg.randoop.Javac javac24 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac25 = javac24.debug();
    soottocfg.cfg.util.Tree tree26 = new soottocfg.cfg.util.Tree();
    java.util.Set set27 = tree26.getLeaves();
    soottocfg.randoop.Javac javac28 = javac25.sourcepath((java.util.Collection)set27);
    boolean b29 = javac25.inDebugMode();
    boolean b30 = javac25.inDebugMode();
    soottocfg.randoop.Javac javac31 = javac25.debug();
    soottocfg.randoop.Javac javac32 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac33 = javac32.debug();
    soottocfg.cfg.util.Tree tree34 = new soottocfg.cfg.util.Tree();
    java.util.Set set35 = tree34.getLeaves();
    soottocfg.randoop.Javac javac36 = javac33.sourcepath((java.util.Collection)set35);
    soottocfg.randoop.Javac javac37 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac38 = javac37.debug();
    soottocfg.cfg.util.Tree tree39 = new soottocfg.cfg.util.Tree();
    java.util.Set set40 = tree39.getLeaves();
    soottocfg.randoop.Javac javac41 = javac38.sourcepath((java.util.Collection)set40);
    soottocfg.randoop.Javac javac42 = javac33.sourcepath((java.util.Collection)set40);
    java.lang.String[] str_array43 = soottocfg.randoop.Strings.generateArrayOfStrings((java.util.Collection)set40);
    soottocfg.randoop.Javac javac44 = javac25.sourcepath((java.util.Collection)set40);
    java.util.List list45 = javac23.compile((java.util.Collection)set40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(file_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list45);

  }

  @Test
  public void test210() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test210"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    princessProver0.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver3 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array4 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr5 = princessProver3.mkOr(proverExpr_array4);
    jayhorn.solver.ProverExpr proverExpr6 = princessProver0.mkOr(proverExpr_array4);
    jayhorn.solver.ProverResult proverResult8 = princessProver0.getResult(false);
    jayhorn.solver.IntType intType10 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr11 = princessProver0.mkHornVariable("Int", (jayhorn.solver.ProverType)intType10);
    jayhorn.solver.princess.PrincessProver princessProver12 = new jayhorn.solver.princess.PrincessProver();
    princessProver12.setPartitionNumber((-1));
    princessProver12.reset();
    jayhorn.solver.princess.PrincessProver princessProver16 = new jayhorn.solver.princess.PrincessProver();
    princessProver16.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver19 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array20 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr21 = princessProver19.mkOr(proverExpr_array20);
    jayhorn.solver.ProverExpr proverExpr22 = princessProver16.mkOr(proverExpr_array20);
    jayhorn.solver.princess.PrincessProver princessProver23 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver24 = new jayhorn.solver.princess.PrincessProver();
    princessProver24.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver27 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array28 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr29 = princessProver27.mkOr(proverExpr_array28);
    jayhorn.solver.ProverExpr proverExpr30 = princessProver24.mkOr(proverExpr_array28);
    jayhorn.solver.BoolType boolType32 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str33 = boolType32.toString();
    jayhorn.solver.ProverType[] proverType_array34 = new jayhorn.solver.ProverType[] { boolType32 };
    jayhorn.solver.princess.PrincessProver princessProver35 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array36 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr37 = princessProver35.mkOr(proverExpr_array36);
    jayhorn.solver.ProverFun proverFun38 = princessProver24.mkDefinedFunction("hi!", proverType_array34, proverExpr37);
    jayhorn.solver.ProverExpr proverExpr40 = princessProver24.mkLiteral((-1));
    jayhorn.solver.IntType intType41 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr42 = princessProver23.mkAll(proverExpr40, (jayhorn.solver.ProverType)intType41);
    jayhorn.solver.ProverExpr proverExpr43 = princessProver12.mkAnd(proverExpr22, proverExpr42);
    jayhorn.solver.princess.PrincessProver princessProver44 = new jayhorn.solver.princess.PrincessProver();
    princessProver44.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver47 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array48 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr49 = princessProver47.mkOr(proverExpr_array48);
    jayhorn.solver.ProverExpr proverExpr50 = princessProver44.mkOr(proverExpr_array48);
    java.lang.String[] str_array51 = soottocfg.randoop.Strings.generateArrayOfStrings((java.lang.Object[])proverExpr_array48);
    jayhorn.solver.princess.PrincessProver princessProver52 = new jayhorn.solver.princess.PrincessProver();
    princessProver52.setPartitionNumber((-1));
    princessProver52.reset();
    jayhorn.solver.princess.PrincessProver princessProver56 = new jayhorn.solver.princess.PrincessProver();
    princessProver56.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver59 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array60 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr61 = princessProver59.mkOr(proverExpr_array60);
    jayhorn.solver.ProverExpr proverExpr62 = princessProver56.mkOr(proverExpr_array60);
    jayhorn.solver.princess.PrincessProver princessProver63 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver64 = new jayhorn.solver.princess.PrincessProver();
    princessProver64.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver67 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array68 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr69 = princessProver67.mkOr(proverExpr_array68);
    jayhorn.solver.ProverExpr proverExpr70 = princessProver64.mkOr(proverExpr_array68);
    jayhorn.solver.BoolType boolType72 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str73 = boolType72.toString();
    jayhorn.solver.ProverType[] proverType_array74 = new jayhorn.solver.ProverType[] { boolType72 };
    jayhorn.solver.princess.PrincessProver princessProver75 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array76 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr77 = princessProver75.mkOr(proverExpr_array76);
    jayhorn.solver.ProverFun proverFun78 = princessProver64.mkDefinedFunction("hi!", proverType_array74, proverExpr77);
    jayhorn.solver.ProverExpr proverExpr80 = princessProver64.mkLiteral((-1));
    jayhorn.solver.IntType intType81 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr82 = princessProver63.mkAll(proverExpr80, (jayhorn.solver.ProverType)intType81);
    jayhorn.solver.ProverExpr proverExpr83 = princessProver52.mkAnd(proverExpr62, proverExpr82);
    jayhorn.solver.z3.Z3HornExpr z3HornExpr84 = new jayhorn.solver.z3.Z3HornExpr(proverExpr43, proverExpr_array48, proverExpr62);
    jayhorn.solver.IntType intType85 = jayhorn.solver.IntType.INSTANCE;
    java.lang.String str86 = intType85.toString();
    jayhorn.solver.ProverExpr proverExpr87 = princessProver0.mkAll(proverExpr43, (jayhorn.solver.ProverType)intType85);
    // The following exception was thrown during execution in test generation
    try {
      princessProver0.pop();
      org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.RuntimeException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverResult8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Bool"+ "'", str33.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + "Bool"+ "'", str73.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str86 + "' != '" + "Int"+ "'", str86.equals("Int"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr87);

  }

  @Test
  public void test211() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test211"); }


    soottocfg.randoop.Javac javac1 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac2 = javac1.debug();
    soottocfg.cfg.util.Tree tree3 = new soottocfg.cfg.util.Tree();
    java.util.Set set4 = tree3.getLeaves();
    soottocfg.randoop.Javac javac5 = javac2.sourcepath((java.util.Collection)set4);
    soottocfg.randoop.Javac javac6 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac7 = javac6.debug();
    soottocfg.cfg.util.Tree tree8 = new soottocfg.cfg.util.Tree();
    java.util.Set set9 = tree8.getLeaves();
    soottocfg.randoop.Javac javac10 = javac7.sourcepath((java.util.Collection)set9);
    soottocfg.randoop.Javac javac11 = javac2.sourcepath((java.util.Collection)set9);
    soottocfg.cfg.ClassVariable classVariable12 = new soottocfg.cfg.ClassVariable("\\forall int v0; -1 = 0 <- -1*-1", (java.util.Collection)set9);
    java.lang.String str13 = classVariable12.toString();
    java.lang.String str14 = classVariable12.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\\forall int v0; -1 = 0 <- -1*-1"+ "'", str13.equals("\\forall int v0; -1 = 0 <- -1*-1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\\forall int v0; -1 = 0 <- -1*-1"+ "'", str14.equals("\\forall int v0; -1 = 0 <- -1*-1"));

  }

  @Test
  public void test212() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test212"); }


    soottocfg.cfg.Program program0 = new soottocfg.cfg.Program();
    java.util.Map map1 = program0.getModifiedGlobals();
    soottocfg.cfg.method.Method[] method_array2 = program0.getEntryPoints();
    soottocfg.randoop.Javac javac5 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac6 = javac5.debug();
    soottocfg.cfg.util.Tree tree7 = new soottocfg.cfg.util.Tree();
    java.util.Set set8 = tree7.getLeaves();
    soottocfg.randoop.Javac javac9 = javac6.sourcepath((java.util.Collection)set8);
    soottocfg.randoop.Javac javac10 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac11 = javac10.debug();
    soottocfg.cfg.util.Tree tree12 = new soottocfg.cfg.util.Tree();
    java.util.Set set13 = tree12.getLeaves();
    soottocfg.randoop.Javac javac14 = javac11.sourcepath((java.util.Collection)set13);
    soottocfg.randoop.Javac javac15 = javac6.sourcepath((java.util.Collection)set13);
    java.lang.String[] str_array16 = soottocfg.randoop.Strings.generateArrayOfStrings((java.util.Collection)set13);
    soottocfg.cfg.ClassVariable classVariable17 = new soottocfg.cfg.ClassVariable("\\forall int v0; -1 = 0 <- -1*-1", (java.util.Collection)set13);
    boolean b18 = classVariable17.isConstant();
    soottocfg.cfg.type.Type type19 = classVariable17.getType();
    soottocfg.cfg.Variable variable20 = program0.createFreshGlobal("Int", type19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(method_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(type19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(variable20);

  }

  @Test
  public void test213() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test213"); }


    jayhorn.solver.Main main0 = new jayhorn.solver.Main();
    jayhorn.solver.princess.PrincessProver princessProver1 = new jayhorn.solver.princess.PrincessProver();
    princessProver1.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver4 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array5 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr6 = princessProver4.mkOr(proverExpr_array5);
    jayhorn.solver.ProverExpr proverExpr7 = princessProver1.mkOr(proverExpr_array5);
    jayhorn.solver.princess.PrincessProver princessProver8 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array9 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr10 = princessProver8.mkOr(proverExpr_array9);
    jayhorn.solver.BoolType boolType12 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str13 = boolType12.toString();
    jayhorn.solver.ProverExpr proverExpr14 = princessProver8.mkHornVariable("hi!", (jayhorn.solver.ProverType)boolType12);
    jayhorn.solver.ProverExpr proverExpr15 = princessProver1.mkNeg(proverExpr14);
    jayhorn.solver.ProverResult proverResult17 = princessProver1.getResult(true);
    main0.test01((jayhorn.solver.Prover)princessProver1);
    princessProver1.setHornLogic(true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Bool"+ "'", str13.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverResult17);

  }

  @Test
  public void test214() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test214"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverType proverType1 = princessProver0.getBooleanType();
    princessProver0.push();
    jayhorn.solver.princess.PrincessProver princessProver3 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver4 = new jayhorn.solver.princess.PrincessProver();
    princessProver4.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver7 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array8 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr9 = princessProver7.mkOr(proverExpr_array8);
    jayhorn.solver.ProverExpr proverExpr10 = princessProver4.mkOr(proverExpr_array8);
    jayhorn.solver.BoolType boolType12 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str13 = boolType12.toString();
    jayhorn.solver.ProverType[] proverType_array14 = new jayhorn.solver.ProverType[] { boolType12 };
    jayhorn.solver.princess.PrincessProver princessProver15 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array16 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr17 = princessProver15.mkOr(proverExpr_array16);
    jayhorn.solver.ProverFun proverFun18 = princessProver4.mkDefinedFunction("hi!", proverType_array14, proverExpr17);
    jayhorn.solver.ProverExpr proverExpr20 = princessProver4.mkLiteral((-1));
    jayhorn.solver.IntType intType21 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr22 = princessProver3.mkAll(proverExpr20, (jayhorn.solver.ProverType)intType21);
    jayhorn.solver.ProverResult proverResult24 = princessProver3.getResult(10L);
    jayhorn.solver.princess.PrincessProver princessProver25 = new jayhorn.solver.princess.PrincessProver();
    princessProver25.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver28 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array29 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr30 = princessProver28.mkOr(proverExpr_array29);
    jayhorn.solver.ProverExpr proverExpr31 = princessProver25.mkOr(proverExpr_array29);
    jayhorn.solver.BoolType boolType33 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str34 = boolType33.toString();
    jayhorn.solver.ProverType[] proverType_array35 = new jayhorn.solver.ProverType[] { boolType33 };
    jayhorn.solver.princess.PrincessProver princessProver36 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array37 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr38 = princessProver36.mkOr(proverExpr_array37);
    jayhorn.solver.ProverFun proverFun39 = princessProver25.mkDefinedFunction("hi!", proverType_array35, proverExpr38);
    jayhorn.solver.ProverExpr proverExpr41 = princessProver25.mkLiteral((-1));
    jayhorn.solver.princess.PrincessProver princessProver42 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array43 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr44 = princessProver42.mkOr(proverExpr_array43);
    jayhorn.solver.ProverExpr proverExpr45 = princessProver25.mkAnd(proverExpr_array43);
    jayhorn.solver.ProverExpr[] proverExpr_array46 = princessProver3.freeVariables(proverExpr45);
    jayhorn.solver.ProverExpr proverExpr47 = princessProver0.mkOr(proverExpr_array46);
    jayhorn.solver.ProverResult proverResult49 = princessProver0.nextModel(false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Bool"+ "'", str13.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverResult24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "Bool"+ "'", str34.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverResult49);

  }

  @Test
  public void test215() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test215"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    princessProver0.setPartitionNumber((-1));
    princessProver0.reset();
    jayhorn.solver.princess.PrincessProver princessProver4 = new jayhorn.solver.princess.PrincessProver();
    princessProver4.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver7 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array8 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr9 = princessProver7.mkOr(proverExpr_array8);
    jayhorn.solver.ProverExpr proverExpr10 = princessProver4.mkOr(proverExpr_array8);
    jayhorn.solver.princess.PrincessProver princessProver11 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver12 = new jayhorn.solver.princess.PrincessProver();
    princessProver12.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver15 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array16 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr17 = princessProver15.mkOr(proverExpr_array16);
    jayhorn.solver.ProverExpr proverExpr18 = princessProver12.mkOr(proverExpr_array16);
    jayhorn.solver.BoolType boolType20 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str21 = boolType20.toString();
    jayhorn.solver.ProverType[] proverType_array22 = new jayhorn.solver.ProverType[] { boolType20 };
    jayhorn.solver.princess.PrincessProver princessProver23 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array24 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr25 = princessProver23.mkOr(proverExpr_array24);
    jayhorn.solver.ProverFun proverFun26 = princessProver12.mkDefinedFunction("hi!", proverType_array22, proverExpr25);
    jayhorn.solver.ProverExpr proverExpr28 = princessProver12.mkLiteral((-1));
    jayhorn.solver.IntType intType29 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr30 = princessProver11.mkAll(proverExpr28, (jayhorn.solver.ProverType)intType29);
    jayhorn.solver.ProverExpr proverExpr31 = princessProver0.mkAnd(proverExpr10, proverExpr30);
    jayhorn.solver.princess.PrincessProver princessProver33 = new jayhorn.solver.princess.PrincessProver();
    princessProver33.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver36 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array37 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr38 = princessProver36.mkOr(proverExpr_array37);
    jayhorn.solver.ProverExpr proverExpr39 = princessProver33.mkOr(proverExpr_array37);
    jayhorn.solver.BoolType boolType41 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str42 = boolType41.toString();
    jayhorn.solver.ProverType[] proverType_array43 = new jayhorn.solver.ProverType[] { boolType41 };
    jayhorn.solver.princess.PrincessProver princessProver44 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array45 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr46 = princessProver44.mkOr(proverExpr_array45);
    jayhorn.solver.ProverFun proverFun47 = princessProver33.mkDefinedFunction("hi!", proverType_array43, proverExpr46);
    jayhorn.solver.princess.PrincessProver princessProver49 = new jayhorn.solver.princess.PrincessProver();
    princessProver49.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver52 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array53 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr54 = princessProver52.mkOr(proverExpr_array53);
    jayhorn.solver.ProverExpr proverExpr55 = princessProver49.mkOr(proverExpr_array53);
    jayhorn.solver.BoolType boolType57 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str58 = boolType57.toString();
    jayhorn.solver.ProverType[] proverType_array59 = new jayhorn.solver.ProverType[] { boolType57 };
    jayhorn.solver.princess.PrincessProver princessProver60 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array61 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr62 = princessProver60.mkOr(proverExpr_array61);
    jayhorn.solver.ProverFun proverFun63 = princessProver49.mkDefinedFunction("hi!", proverType_array59, proverExpr62);
    jayhorn.solver.BoolType boolType64 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str65 = boolType64.toString();
    jayhorn.solver.ProverFun proverFun66 = princessProver33.mkUnintFunction("", proverType_array59, (jayhorn.solver.ProverType)boolType64);
    jayhorn.solver.princess.PrincessProver princessProver67 = new jayhorn.solver.princess.PrincessProver();
    princessProver67.setConstructProofs(true);
    jayhorn.solver.ProverResult proverResult71 = princessProver67.getResult(true);
    jayhorn.solver.ProverType proverType72 = princessProver67.getIntType();
    jayhorn.solver.ProverFun proverFun73 = princessProver0.mkUnintFunction("Bool", proverType_array59, proverType72);
    princessProver0.shutdown();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Bool"+ "'", str21.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "Bool"+ "'", str42.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "Bool"+ "'", str58.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "Bool"+ "'", str65.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverResult71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun73);

  }

  @Test
  public void test216() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test216"); }


    soottocfg.randoop.Javac javac1 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac2 = javac1.debug();
    soottocfg.cfg.util.Tree tree3 = new soottocfg.cfg.util.Tree();
    java.util.Set set4 = tree3.getLeaves();
    soottocfg.randoop.Javac javac5 = javac2.sourcepath((java.util.Collection)set4);
    soottocfg.randoop.Javac javac6 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac7 = javac6.debug();
    soottocfg.cfg.util.Tree tree8 = new soottocfg.cfg.util.Tree();
    java.util.Set set9 = tree8.getLeaves();
    soottocfg.randoop.Javac javac10 = javac7.sourcepath((java.util.Collection)set9);
    soottocfg.randoop.Javac javac11 = javac2.sourcepath((java.util.Collection)set9);
    soottocfg.cfg.ClassVariable classVariable12 = new soottocfg.cfg.ClassVariable("\\forall int v0; -1 = 0 <- -1*-1", (java.util.Collection)set9);
    soottocfg.randoop.Javac javac13 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac14 = javac13.debug();
    soottocfg.cfg.util.Tree tree15 = new soottocfg.cfg.util.Tree();
    java.util.Set set16 = tree15.getLeaves();
    soottocfg.randoop.Javac javac17 = javac14.sourcepath((java.util.Collection)set16);
    boolean b18 = javac14.inDebugMode();
    soottocfg.randoop.Javac javac19 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac20 = javac19.debug();
    soottocfg.cfg.util.Tree tree21 = new soottocfg.cfg.util.Tree();
    java.util.Set set22 = tree21.getLeaves();
    soottocfg.randoop.Javac javac23 = javac20.sourcepath((java.util.Collection)set22);
    soottocfg.randoop.Javac javac24 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac25 = javac24.debug();
    soottocfg.cfg.util.Tree tree26 = new soottocfg.cfg.util.Tree();
    java.util.Set set27 = tree26.getLeaves();
    soottocfg.randoop.Javac javac28 = javac25.sourcepath((java.util.Collection)set27);
    soottocfg.randoop.Javac javac29 = javac20.sourcepath((java.util.Collection)set27);
    soottocfg.randoop.Javac javac30 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac31 = javac30.debug();
    soottocfg.cfg.util.Tree tree32 = new soottocfg.cfg.util.Tree();
    java.util.Set set33 = tree32.getLeaves();
    soottocfg.randoop.Javac javac34 = javac31.sourcepath((java.util.Collection)set33);
    boolean b35 = javac31.inDebugMode();
    boolean b36 = javac31.inDebugMode();
    soottocfg.randoop.Classpath classpath37 = new soottocfg.randoop.Classpath();
    soottocfg.randoop.Javac javac38 = javac31.classpath(classpath37);
    soottocfg.randoop.Javac javac39 = javac20.bootClasspath(classpath37);
    soottocfg.randoop.Javac javac40 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac41 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac42 = javac41.debug();
    soottocfg.cfg.util.Tree tree43 = new soottocfg.cfg.util.Tree();
    java.util.Set set44 = tree43.getLeaves();
    soottocfg.randoop.Javac javac45 = javac42.sourcepath((java.util.Collection)set44);
    soottocfg.randoop.Javac javac46 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac47 = javac46.debug();
    soottocfg.cfg.util.Tree tree48 = new soottocfg.cfg.util.Tree();
    java.util.Set set49 = tree48.getLeaves();
    soottocfg.randoop.Javac javac50 = javac47.sourcepath((java.util.Collection)set49);
    soottocfg.randoop.Javac javac51 = javac42.sourcepath((java.util.Collection)set49);
    soottocfg.randoop.Javac javac52 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac53 = javac52.debug();
    soottocfg.cfg.util.Tree tree54 = new soottocfg.cfg.util.Tree();
    java.util.Set set55 = tree54.getLeaves();
    soottocfg.randoop.Javac javac56 = javac53.sourcepath((java.util.Collection)set55);
    boolean b57 = javac53.inDebugMode();
    boolean b58 = javac53.inDebugMode();
    soottocfg.randoop.Classpath classpath59 = new soottocfg.randoop.Classpath();
    soottocfg.randoop.Javac javac60 = javac53.classpath(classpath59);
    soottocfg.randoop.Javac javac61 = javac42.bootClasspath(classpath59);
    java.util.List list62 = javac61.version();
    javac40.log(list62);
    soottocfg.randoop.Javac javac64 = javac39.extraArgs(list62);
    javac14.log(list62);
    soottocfg.randoop.Command command66 = new soottocfg.randoop.Command(list62);
    classVariable12.setAssociatedFields(list62);
    boolean b68 = classVariable12.isConstant();
    soottocfg.randoop.Javac javac69 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac70 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac71 = javac70.debug();
    soottocfg.cfg.util.Tree tree72 = new soottocfg.cfg.util.Tree();
    java.util.Set set73 = tree72.getLeaves();
    soottocfg.randoop.Javac javac74 = javac71.sourcepath((java.util.Collection)set73);
    soottocfg.randoop.Javac javac75 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac76 = javac75.debug();
    soottocfg.cfg.util.Tree tree77 = new soottocfg.cfg.util.Tree();
    java.util.Set set78 = tree77.getLeaves();
    soottocfg.randoop.Javac javac79 = javac76.sourcepath((java.util.Collection)set78);
    soottocfg.randoop.Javac javac80 = javac71.sourcepath((java.util.Collection)set78);
    soottocfg.randoop.Javac javac81 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac82 = javac81.debug();
    soottocfg.cfg.util.Tree tree83 = new soottocfg.cfg.util.Tree();
    java.util.Set set84 = tree83.getLeaves();
    soottocfg.randoop.Javac javac85 = javac82.sourcepath((java.util.Collection)set84);
    boolean b86 = javac82.inDebugMode();
    boolean b87 = javac82.inDebugMode();
    soottocfg.randoop.Classpath classpath88 = new soottocfg.randoop.Classpath();
    soottocfg.randoop.Javac javac89 = javac82.classpath(classpath88);
    soottocfg.randoop.Javac javac90 = javac71.bootClasspath(classpath88);
    java.util.List list91 = javac90.version();
    javac69.log(list91);
    java.util.List list93 = javac69.version();
    classVariable12.setAssociatedFields(list93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list93);

  }

  @Test
  public void test217() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test217"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array1 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr2 = princessProver0.mkOr(proverExpr_array1);
    jayhorn.solver.princess.PrincessProver princessProver3 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array4 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr5 = princessProver3.mkOr(proverExpr_array4);
    jayhorn.solver.BoolType boolType7 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str8 = boolType7.toString();
    jayhorn.solver.ProverExpr proverExpr9 = princessProver3.mkHornVariable("hi!", (jayhorn.solver.ProverType)boolType7);
    jayhorn.solver.princess.PrincessProver princessProver10 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver11 = new jayhorn.solver.princess.PrincessProver();
    princessProver11.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver14 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array15 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr16 = princessProver14.mkOr(proverExpr_array15);
    jayhorn.solver.ProverExpr proverExpr17 = princessProver11.mkOr(proverExpr_array15);
    jayhorn.solver.BoolType boolType19 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str20 = boolType19.toString();
    jayhorn.solver.ProverType[] proverType_array21 = new jayhorn.solver.ProverType[] { boolType19 };
    jayhorn.solver.princess.PrincessProver princessProver22 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array23 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr24 = princessProver22.mkOr(proverExpr_array23);
    jayhorn.solver.ProverFun proverFun25 = princessProver11.mkDefinedFunction("hi!", proverType_array21, proverExpr24);
    jayhorn.solver.ProverExpr proverExpr27 = princessProver11.mkLiteral((-1));
    jayhorn.solver.IntType intType28 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr29 = princessProver10.mkAll(proverExpr27, (jayhorn.solver.ProverType)intType28);
    jayhorn.solver.princess.PrincessProver princessProver31 = new jayhorn.solver.princess.PrincessProver();
    princessProver31.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver34 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array35 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr36 = princessProver34.mkOr(proverExpr_array35);
    jayhorn.solver.ProverExpr proverExpr37 = princessProver31.mkOr(proverExpr_array35);
    jayhorn.solver.BoolType boolType39 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str40 = boolType39.toString();
    jayhorn.solver.ProverType[] proverType_array41 = new jayhorn.solver.ProverType[] { boolType39 };
    jayhorn.solver.princess.PrincessProver princessProver42 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array43 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr44 = princessProver42.mkOr(proverExpr_array43);
    jayhorn.solver.ProverFun proverFun45 = princessProver31.mkDefinedFunction("hi!", proverType_array41, proverExpr44);
    jayhorn.solver.princess.PrincessProver princessProver46 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array47 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr48 = princessProver46.mkOr(proverExpr_array47);
    jayhorn.solver.ProverFun proverFun49 = princessProver10.mkDefinedFunction("hi!", proverType_array41, proverExpr48);
    jayhorn.solver.ProverExpr proverExpr50 = princessProver0.mkAnd(proverExpr9, proverExpr48);
    princessProver0.reset();
    jayhorn.solver.princess.PrincessProver princessProver52 = new jayhorn.solver.princess.PrincessProver();
    princessProver52.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver55 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array56 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr57 = princessProver55.mkOr(proverExpr_array56);
    jayhorn.solver.ProverExpr proverExpr58 = princessProver52.mkOr(proverExpr_array56);
    jayhorn.solver.BoolType boolType60 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str61 = boolType60.toString();
    jayhorn.solver.ProverType[] proverType_array62 = new jayhorn.solver.ProverType[] { boolType60 };
    jayhorn.solver.princess.PrincessProver princessProver63 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array64 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr65 = princessProver63.mkOr(proverExpr_array64);
    jayhorn.solver.ProverFun proverFun66 = princessProver52.mkDefinedFunction("hi!", proverType_array62, proverExpr65);
    jayhorn.solver.princess.PrincessProver princessProver68 = new jayhorn.solver.princess.PrincessProver();
    princessProver68.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver71 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array72 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr73 = princessProver71.mkOr(proverExpr_array72);
    jayhorn.solver.ProverExpr proverExpr74 = princessProver68.mkOr(proverExpr_array72);
    jayhorn.solver.BoolType boolType76 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str77 = boolType76.toString();
    jayhorn.solver.ProverType[] proverType_array78 = new jayhorn.solver.ProverType[] { boolType76 };
    jayhorn.solver.princess.PrincessProver princessProver79 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array80 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr81 = princessProver79.mkOr(proverExpr_array80);
    jayhorn.solver.ProverFun proverFun82 = princessProver68.mkDefinedFunction("hi!", proverType_array78, proverExpr81);
    jayhorn.solver.BoolType boolType83 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str84 = boolType83.toString();
    jayhorn.solver.ProverFun proverFun85 = princessProver52.mkUnintFunction("", proverType_array78, (jayhorn.solver.ProverType)boolType83);
    jayhorn.solver.ArrayType arrayType87 = new jayhorn.solver.ArrayType(10);
    jayhorn.solver.ProverType proverType88 = princessProver0.getArrayType(proverType_array78, (jayhorn.solver.ProverType)arrayType87);
    princessProver0.reset();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Bool"+ "'", str8.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Bool"+ "'", str20.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "Bool"+ "'", str40.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "Bool"+ "'", str61.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "Bool"+ "'", str77.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str84 + "' != '" + "Bool"+ "'", str84.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType88);

  }

  @Test
  public void test218() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test218"); }


    jayhorn.Options options0 = jayhorn.Options.v();
    boolean b1 = options0.hasScope();
    java.lang.String str2 = options0.getScope();
    jayhorn.Log.error((java.lang.Object)options0);
    options0.setAndroidStubPath("");
    options0.setClasspath("Int");
    boolean b8 = options0.hasClasspath();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(options0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);

  }

  @Test
  public void test219() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test219"); }


    soottocfg.randoop.Javac javac0 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac1 = javac0.debug();
    soottocfg.cfg.util.Tree tree2 = new soottocfg.cfg.util.Tree();
    java.util.Set set3 = tree2.getLeaves();
    soottocfg.randoop.Javac javac4 = javac1.sourcepath((java.util.Collection)set3);
    boolean b5 = javac1.inDebugMode();
    soottocfg.randoop.Javac javac6 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac7 = javac6.debug();
    soottocfg.cfg.util.Tree tree8 = new soottocfg.cfg.util.Tree();
    java.util.Set set9 = tree8.getLeaves();
    soottocfg.randoop.Javac javac10 = javac7.sourcepath((java.util.Collection)set9);
    soottocfg.randoop.Javac javac11 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac12 = javac11.debug();
    soottocfg.cfg.util.Tree tree13 = new soottocfg.cfg.util.Tree();
    java.util.Set set14 = tree13.getLeaves();
    soottocfg.randoop.Javac javac15 = javac12.sourcepath((java.util.Collection)set14);
    soottocfg.randoop.Javac javac16 = javac7.sourcepath((java.util.Collection)set14);
    soottocfg.randoop.Javac javac17 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac18 = javac17.debug();
    soottocfg.cfg.util.Tree tree19 = new soottocfg.cfg.util.Tree();
    java.util.Set set20 = tree19.getLeaves();
    soottocfg.randoop.Javac javac21 = javac18.sourcepath((java.util.Collection)set20);
    boolean b22 = javac18.inDebugMode();
    boolean b23 = javac18.inDebugMode();
    soottocfg.randoop.Classpath classpath24 = new soottocfg.randoop.Classpath();
    soottocfg.randoop.Javac javac25 = javac18.classpath(classpath24);
    soottocfg.randoop.Javac javac26 = javac7.bootClasspath(classpath24);
    soottocfg.randoop.Javac javac27 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac28 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac29 = javac28.debug();
    soottocfg.cfg.util.Tree tree30 = new soottocfg.cfg.util.Tree();
    java.util.Set set31 = tree30.getLeaves();
    soottocfg.randoop.Javac javac32 = javac29.sourcepath((java.util.Collection)set31);
    soottocfg.randoop.Javac javac33 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac34 = javac33.debug();
    soottocfg.cfg.util.Tree tree35 = new soottocfg.cfg.util.Tree();
    java.util.Set set36 = tree35.getLeaves();
    soottocfg.randoop.Javac javac37 = javac34.sourcepath((java.util.Collection)set36);
    soottocfg.randoop.Javac javac38 = javac29.sourcepath((java.util.Collection)set36);
    soottocfg.randoop.Javac javac39 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac40 = javac39.debug();
    soottocfg.cfg.util.Tree tree41 = new soottocfg.cfg.util.Tree();
    java.util.Set set42 = tree41.getLeaves();
    soottocfg.randoop.Javac javac43 = javac40.sourcepath((java.util.Collection)set42);
    boolean b44 = javac40.inDebugMode();
    boolean b45 = javac40.inDebugMode();
    soottocfg.randoop.Classpath classpath46 = new soottocfg.randoop.Classpath();
    soottocfg.randoop.Javac javac47 = javac40.classpath(classpath46);
    soottocfg.randoop.Javac javac48 = javac29.bootClasspath(classpath46);
    java.util.List list49 = javac48.version();
    javac27.log(list49);
    soottocfg.randoop.Javac javac51 = javac26.extraArgs(list49);
    javac1.log(list49);
    soottocfg.randoop.Command command53 = new soottocfg.randoop.Command(list49);
    // The following exception was thrown during execution in test generation
    try {
      java.util.List list54 = command53.gatherOutput();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac51);

  }

  @Test
  public void test220() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test220"); }


    soottocfg.cfg.Program program0 = new soottocfg.cfg.Program();
    org.jgrapht.DirectedGraph directedGraph1 = program0.getCallGraph();
    java.lang.Object obj2 = soottocfg.cfg.util.GraphUtil.getSource(directedGraph1);
    jayhorn.solver.princess.PrincessProver princessProver3 = new jayhorn.solver.princess.PrincessProver();
    princessProver3.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver6 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array7 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr8 = princessProver6.mkOr(proverExpr_array7);
    jayhorn.solver.ProverExpr proverExpr9 = princessProver3.mkOr(proverExpr_array7);
    jayhorn.solver.BoolType boolType11 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str12 = boolType11.toString();
    jayhorn.solver.ProverType[] proverType_array13 = new jayhorn.solver.ProverType[] { boolType11 };
    jayhorn.solver.princess.PrincessProver princessProver14 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array15 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr16 = princessProver14.mkOr(proverExpr_array15);
    jayhorn.solver.ProverFun proverFun17 = princessProver3.mkDefinedFunction("hi!", proverType_array13, proverExpr16);
    jayhorn.solver.ProverExpr proverExpr19 = princessProver3.mkLiteral((-1));
    jayhorn.solver.princess.PrincessProver princessProver20 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array21 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr22 = princessProver20.mkOr(proverExpr_array21);
    jayhorn.solver.ProverExpr proverExpr23 = princessProver3.mkAnd(proverExpr_array21);
    // The following exception was thrown during execution in test generation
    try {
      boolean b24 = soottocfg.cfg.util.GraphUtil.isIrreducibleGraphAndHasLoops(directedGraph1, (java.lang.Object)proverExpr23);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(directedGraph1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obj2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Bool"+ "'", str12.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr23);

  }

  @Test
  public void test221() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test221"); }


    jayhorn.solver.Main main0 = new jayhorn.solver.Main();
    jayhorn.solver.princess.PrincessProver princessProver1 = new jayhorn.solver.princess.PrincessProver();
    princessProver1.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver4 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array5 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr6 = princessProver4.mkOr(proverExpr_array5);
    jayhorn.solver.ProverExpr proverExpr7 = princessProver1.mkOr(proverExpr_array5);
    jayhorn.solver.BoolType boolType9 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str10 = boolType9.toString();
    jayhorn.solver.ProverType[] proverType_array11 = new jayhorn.solver.ProverType[] { boolType9 };
    jayhorn.solver.princess.PrincessProver princessProver12 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array13 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr14 = princessProver12.mkOr(proverExpr_array13);
    jayhorn.solver.ProverFun proverFun15 = princessProver1.mkDefinedFunction("hi!", proverType_array11, proverExpr14);
    jayhorn.solver.ProverExpr proverExpr17 = princessProver1.mkLiteral((-1));
    jayhorn.solver.princess.PrincessProver princessProver18 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array19 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr20 = princessProver18.mkOr(proverExpr_array19);
    jayhorn.solver.ProverExpr proverExpr21 = princessProver1.mkAnd(proverExpr_array19);
    jayhorn.solver.ProverType proverType22 = princessProver1.getIntType();
    main0.test02((jayhorn.solver.Prover)princessProver1);
    jayhorn.solver.princess.PrincessProver princessProver24 = new jayhorn.solver.princess.PrincessProver();
    princessProver24.setPartitionNumber((-1));
    princessProver24.reset();
    jayhorn.solver.princess.PrincessProver princessProver28 = new jayhorn.solver.princess.PrincessProver();
    princessProver28.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver31 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array32 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr33 = princessProver31.mkOr(proverExpr_array32);
    jayhorn.solver.ProverExpr proverExpr34 = princessProver28.mkOr(proverExpr_array32);
    jayhorn.solver.BoolType boolType36 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str37 = boolType36.toString();
    jayhorn.solver.ProverType[] proverType_array38 = new jayhorn.solver.ProverType[] { boolType36 };
    jayhorn.solver.princess.PrincessProver princessProver39 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array40 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr41 = princessProver39.mkOr(proverExpr_array40);
    jayhorn.solver.ProverFun proverFun42 = princessProver28.mkDefinedFunction("hi!", proverType_array38, proverExpr41);
    jayhorn.solver.ProverExpr proverExpr44 = princessProver28.mkLiteral((-1));
    jayhorn.solver.ProverExpr proverExpr45 = princessProver24.mkNeg(proverExpr44);
    main0.test03((jayhorn.solver.Prover)princessProver24);
    jayhorn.solver.princess.PrincessProverFactory princessProverFactory47 = new jayhorn.solver.princess.PrincessProverFactory();
    jayhorn.solver.Prover prover48 = princessProverFactory47.spawn();
    main0.runTests((jayhorn.solver.ProverFactory)princessProverFactory47);
    jayhorn.solver.princess.PrincessProver princessProver50 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array51 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr52 = princessProver50.mkOr(proverExpr_array51);
    jayhorn.solver.BoolType boolType54 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str55 = boolType54.toString();
    jayhorn.solver.ProverExpr proverExpr56 = princessProver50.mkHornVariable("hi!", (jayhorn.solver.ProverType)boolType54);
    jayhorn.util.SimplCfgToProver simplCfgToProver57 = new jayhorn.util.SimplCfgToProver((jayhorn.solver.Prover)princessProver50);
    jayhorn.solver.ArrayType arrayType60 = new jayhorn.solver.ArrayType(10);
    soottocfg.randoop.Javac javac61 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac62 = javac61.debug();
    soottocfg.cfg.util.Tree tree63 = new soottocfg.cfg.util.Tree();
    java.util.Set set64 = tree63.getLeaves();
    soottocfg.randoop.Javac javac65 = javac62.sourcepath((java.util.Collection)set64);
    soottocfg.randoop.Javac javac66 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac67 = javac66.debug();
    soottocfg.cfg.util.Tree tree68 = new soottocfg.cfg.util.Tree();
    java.util.Set set69 = tree68.getLeaves();
    soottocfg.randoop.Javac javac70 = javac67.sourcepath((java.util.Collection)set69);
    soottocfg.randoop.Javac javac71 = javac62.sourcepath((java.util.Collection)set69);
    soottocfg.randoop.Javac javac72 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac73 = javac72.debug();
    soottocfg.cfg.util.Tree tree74 = new soottocfg.cfg.util.Tree();
    java.util.Set set75 = tree74.getLeaves();
    soottocfg.randoop.Javac javac76 = javac73.sourcepath((java.util.Collection)set75);
    boolean b77 = javac73.inDebugMode();
    boolean b78 = javac73.inDebugMode();
    soottocfg.randoop.Classpath classpath79 = new soottocfg.randoop.Classpath();
    soottocfg.randoop.Javac javac80 = javac73.classpath(classpath79);
    soottocfg.randoop.Javac javac81 = javac62.bootClasspath(classpath79);
    java.util.List list82 = javac81.version();
    boolean b83 = arrayType60.equals((java.lang.Object)javac81);
    jayhorn.solver.ProverExpr proverExpr84 = princessProver50.mkHornVariable("", (jayhorn.solver.ProverType)arrayType60);
    main0.test06((jayhorn.solver.Prover)princessProver50);
    jayhorn.solver.ProverExpr proverExpr87 = princessProver50.mkLiteral(false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Bool"+ "'", str10.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "Bool"+ "'", str37.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(prover48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "Bool"+ "'", str55.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr87);

  }

  @Test
  public void test222() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test222"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver1 = new jayhorn.solver.princess.PrincessProver();
    princessProver1.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver4 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array5 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr6 = princessProver4.mkOr(proverExpr_array5);
    jayhorn.solver.ProverExpr proverExpr7 = princessProver1.mkOr(proverExpr_array5);
    jayhorn.solver.BoolType boolType9 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str10 = boolType9.toString();
    jayhorn.solver.ProverType[] proverType_array11 = new jayhorn.solver.ProverType[] { boolType9 };
    jayhorn.solver.princess.PrincessProver princessProver12 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array13 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr14 = princessProver12.mkOr(proverExpr_array13);
    jayhorn.solver.ProverFun proverFun15 = princessProver1.mkDefinedFunction("hi!", proverType_array11, proverExpr14);
    jayhorn.solver.ProverExpr proverExpr17 = princessProver1.mkLiteral((-1));
    jayhorn.solver.IntType intType18 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr19 = princessProver0.mkAll(proverExpr17, (jayhorn.solver.ProverType)intType18);
    jayhorn.solver.princess.PrincessProver princessProver20 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array21 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr22 = princessProver20.mkOr(proverExpr_array21);
    jayhorn.solver.princess.PrincessProver princessProver23 = new jayhorn.solver.princess.PrincessProver();
    princessProver23.setPartitionNumber((-1));
    princessProver23.reset();
    jayhorn.solver.princess.PrincessProver princessProver27 = new jayhorn.solver.princess.PrincessProver();
    princessProver27.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver30 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array31 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr32 = princessProver30.mkOr(proverExpr_array31);
    jayhorn.solver.ProverExpr proverExpr33 = princessProver27.mkOr(proverExpr_array31);
    jayhorn.solver.BoolType boolType35 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str36 = boolType35.toString();
    jayhorn.solver.ProverType[] proverType_array37 = new jayhorn.solver.ProverType[] { boolType35 };
    jayhorn.solver.princess.PrincessProver princessProver38 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array39 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr40 = princessProver38.mkOr(proverExpr_array39);
    jayhorn.solver.ProverFun proverFun41 = princessProver27.mkDefinedFunction("hi!", proverType_array37, proverExpr40);
    jayhorn.solver.ProverExpr proverExpr43 = princessProver27.mkLiteral((-1));
    jayhorn.solver.ProverExpr proverExpr44 = princessProver23.mkNeg(proverExpr43);
    jayhorn.solver.z3.Z3HornExpr z3HornExpr45 = new jayhorn.solver.z3.Z3HornExpr(proverExpr19, proverExpr_array21, proverExpr44);
    java.lang.String str46 = z3HornExpr45.toString();
    java.lang.String str47 = z3HornExpr45.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Bool"+ "'", str10.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Bool"+ "'", str36.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "\\forall int v0; -1 = 0 <- -1*-1"+ "'", str46.equals("\\forall int v0; -1 = 0 <- -1*-1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "\\forall int v0; -1 = 0 <- -1*-1"+ "'", str47.equals("\\forall int v0; -1 = 0 <- -1*-1"));

  }

  @Test
  public void test223() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test223"); }


    soottocfg.randoop.Javac javac0 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac1 = javac0.debug();
    soottocfg.cfg.util.Tree tree2 = new soottocfg.cfg.util.Tree();
    java.util.Set set3 = tree2.getLeaves();
    soottocfg.randoop.Javac javac4 = javac1.sourcepath((java.util.Collection)set3);
    soottocfg.randoop.Javac javac5 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac6 = javac5.debug();
    soottocfg.cfg.util.Tree tree7 = new soottocfg.cfg.util.Tree();
    java.util.Set set8 = tree7.getLeaves();
    soottocfg.randoop.Javac javac9 = javac6.sourcepath((java.util.Collection)set8);
    soottocfg.randoop.Javac javac10 = javac1.sourcepath((java.util.Collection)set8);
    soottocfg.randoop.Javac javac11 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac12 = javac11.debug();
    soottocfg.cfg.util.Tree tree13 = new soottocfg.cfg.util.Tree();
    java.util.Set set14 = tree13.getLeaves();
    soottocfg.randoop.Javac javac15 = javac12.sourcepath((java.util.Collection)set14);
    boolean b16 = javac12.inDebugMode();
    boolean b17 = javac12.inDebugMode();
    soottocfg.randoop.Classpath classpath18 = new soottocfg.randoop.Classpath();
    soottocfg.randoop.Javac javac19 = javac12.classpath(classpath18);
    soottocfg.randoop.Javac javac20 = javac1.bootClasspath(classpath18);
    java.util.List list21 = javac20.version();
    java.io.File[] file_array22 = new java.io.File[] {  };
    soottocfg.randoop.Javac javac23 = javac20.classpath(file_array22);
    boolean b24 = javac20.inDebugMode();
    soottocfg.randoop.Javac javac25 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac26 = javac25.debug();
    soottocfg.cfg.util.Tree tree27 = new soottocfg.cfg.util.Tree();
    java.util.Set set28 = tree27.getLeaves();
    soottocfg.randoop.Javac javac29 = javac26.sourcepath((java.util.Collection)set28);
    soottocfg.randoop.Javac javac30 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac31 = javac30.debug();
    soottocfg.cfg.util.Tree tree32 = new soottocfg.cfg.util.Tree();
    java.util.Set set33 = tree32.getLeaves();
    soottocfg.randoop.Javac javac34 = javac31.sourcepath((java.util.Collection)set33);
    soottocfg.randoop.Javac javac35 = javac26.sourcepath((java.util.Collection)set33);
    soottocfg.randoop.Javac javac36 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac37 = javac36.debug();
    soottocfg.cfg.util.Tree tree38 = new soottocfg.cfg.util.Tree();
    java.util.Set set39 = tree38.getLeaves();
    soottocfg.randoop.Javac javac40 = javac37.sourcepath((java.util.Collection)set39);
    boolean b41 = javac37.inDebugMode();
    boolean b42 = javac37.inDebugMode();
    soottocfg.randoop.Classpath classpath43 = new soottocfg.randoop.Classpath();
    soottocfg.randoop.Javac javac44 = javac37.classpath(classpath43);
    soottocfg.randoop.Javac javac45 = javac26.bootClasspath(classpath43);
    soottocfg.randoop.Javac javac46 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac47 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac48 = javac47.debug();
    soottocfg.cfg.util.Tree tree49 = new soottocfg.cfg.util.Tree();
    java.util.Set set50 = tree49.getLeaves();
    soottocfg.randoop.Javac javac51 = javac48.sourcepath((java.util.Collection)set50);
    soottocfg.randoop.Javac javac52 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac53 = javac52.debug();
    soottocfg.cfg.util.Tree tree54 = new soottocfg.cfg.util.Tree();
    java.util.Set set55 = tree54.getLeaves();
    soottocfg.randoop.Javac javac56 = javac53.sourcepath((java.util.Collection)set55);
    soottocfg.randoop.Javac javac57 = javac48.sourcepath((java.util.Collection)set55);
    soottocfg.randoop.Javac javac58 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac59 = javac58.debug();
    soottocfg.cfg.util.Tree tree60 = new soottocfg.cfg.util.Tree();
    java.util.Set set61 = tree60.getLeaves();
    soottocfg.randoop.Javac javac62 = javac59.sourcepath((java.util.Collection)set61);
    boolean b63 = javac59.inDebugMode();
    boolean b64 = javac59.inDebugMode();
    soottocfg.randoop.Classpath classpath65 = new soottocfg.randoop.Classpath();
    soottocfg.randoop.Javac javac66 = javac59.classpath(classpath65);
    soottocfg.randoop.Javac javac67 = javac48.bootClasspath(classpath65);
    java.util.List list68 = javac67.version();
    javac46.log(list68);
    soottocfg.randoop.Javac javac70 = javac45.extraArgs(list68);
    // The following exception was thrown during execution in test generation
    try {
      java.util.List list71 = javac20.compile((java.util.Collection)list68);
      org.junit.Assert.fail("Expected exception of type soottocfg.randoop.Command.CommandFailedException");
    } catch (soottocfg.randoop.Command.CommandFailedException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("soottocfg.randoop.Command.CommandFailedException")) {
        org.junit.Assert.fail("Expected exception of type soottocfg.randoop.Command.CommandFailedException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(file_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac70);

  }

  @Test
  public void test224() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test224"); }


    jayhorn.Options options0 = jayhorn.Options.v();
    boolean b1 = options0.hasScope();
    java.lang.String str2 = options0.getScope();
    jayhorn.Log.error((java.lang.Object)options0);
    java.lang.String str4 = options0.getClasspath();
    options0.setAndroidStubPath("false");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(options0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Int"+ "'", str4.equals("Int"));

  }

  @Test
  public void test225() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test225"); }


    jayhorn.solver.Main main0 = new jayhorn.solver.Main();
    jayhorn.solver.princess.PrincessProver princessProver1 = new jayhorn.solver.princess.PrincessProver();
    princessProver1.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver4 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array5 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr6 = princessProver4.mkOr(proverExpr_array5);
    jayhorn.solver.ProverExpr proverExpr7 = princessProver1.mkOr(proverExpr_array5);
    jayhorn.solver.BoolType boolType9 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str10 = boolType9.toString();
    jayhorn.solver.ProverType[] proverType_array11 = new jayhorn.solver.ProverType[] { boolType9 };
    jayhorn.solver.princess.PrincessProver princessProver12 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array13 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr14 = princessProver12.mkOr(proverExpr_array13);
    jayhorn.solver.ProverFun proverFun15 = princessProver1.mkDefinedFunction("hi!", proverType_array11, proverExpr14);
    jayhorn.solver.ProverExpr proverExpr17 = princessProver1.mkLiteral((-1));
    jayhorn.solver.princess.PrincessProver princessProver18 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array19 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr20 = princessProver18.mkOr(proverExpr_array19);
    jayhorn.solver.ProverExpr proverExpr21 = princessProver1.mkAnd(proverExpr_array19);
    jayhorn.solver.ProverType proverType22 = princessProver1.getIntType();
    main0.test02((jayhorn.solver.Prover)princessProver1);
    jayhorn.solver.princess.PrincessProver princessProver24 = new jayhorn.solver.princess.PrincessProver();
    princessProver24.setPartitionNumber((-1));
    princessProver24.reset();
    jayhorn.solver.princess.PrincessProver princessProver28 = new jayhorn.solver.princess.PrincessProver();
    princessProver28.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver31 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array32 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr33 = princessProver31.mkOr(proverExpr_array32);
    jayhorn.solver.ProverExpr proverExpr34 = princessProver28.mkOr(proverExpr_array32);
    jayhorn.solver.BoolType boolType36 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str37 = boolType36.toString();
    jayhorn.solver.ProverType[] proverType_array38 = new jayhorn.solver.ProverType[] { boolType36 };
    jayhorn.solver.princess.PrincessProver princessProver39 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array40 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr41 = princessProver39.mkOr(proverExpr_array40);
    jayhorn.solver.ProverFun proverFun42 = princessProver28.mkDefinedFunction("hi!", proverType_array38, proverExpr41);
    jayhorn.solver.ProverExpr proverExpr44 = princessProver28.mkLiteral((-1));
    jayhorn.solver.ProverExpr proverExpr45 = princessProver24.mkNeg(proverExpr44);
    main0.test03((jayhorn.solver.Prover)princessProver24);
    jayhorn.solver.princess.PrincessProver princessProver47 = new jayhorn.solver.princess.PrincessProver();
    princessProver47.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver50 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array51 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr52 = princessProver50.mkOr(proverExpr_array51);
    jayhorn.solver.ProverExpr proverExpr53 = princessProver47.mkOr(proverExpr_array51);
    jayhorn.solver.BoolType boolType55 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str56 = boolType55.toString();
    jayhorn.solver.ProverType[] proverType_array57 = new jayhorn.solver.ProverType[] { boolType55 };
    jayhorn.solver.princess.PrincessProver princessProver58 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array59 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr60 = princessProver58.mkOr(proverExpr_array59);
    jayhorn.solver.ProverFun proverFun61 = princessProver47.mkDefinedFunction("hi!", proverType_array57, proverExpr60);
    jayhorn.solver.princess.PrincessProver princessProver63 = new jayhorn.solver.princess.PrincessProver();
    princessProver63.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver66 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array67 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr68 = princessProver66.mkOr(proverExpr_array67);
    jayhorn.solver.ProverExpr proverExpr69 = princessProver63.mkOr(proverExpr_array67);
    jayhorn.solver.BoolType boolType71 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str72 = boolType71.toString();
    jayhorn.solver.ProverType[] proverType_array73 = new jayhorn.solver.ProverType[] { boolType71 };
    jayhorn.solver.princess.PrincessProver princessProver74 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array75 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr76 = princessProver74.mkOr(proverExpr_array75);
    jayhorn.solver.ProverFun proverFun77 = princessProver63.mkDefinedFunction("hi!", proverType_array73, proverExpr76);
    jayhorn.solver.BoolType boolType78 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str79 = boolType78.toString();
    jayhorn.solver.ProverFun proverFun80 = princessProver47.mkUnintFunction("", proverType_array73, (jayhorn.solver.ProverType)boolType78);
    main0.test01((jayhorn.solver.Prover)princessProver47);
    jayhorn.solver.princess.PrincessProverFactory princessProverFactory82 = new jayhorn.solver.princess.PrincessProverFactory();
    main0.runTests((jayhorn.solver.ProverFactory)princessProverFactory82);
    jayhorn.solver.princess.PrincessProver princessProver84 = new jayhorn.solver.princess.PrincessProver();
    princessProver84.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver87 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array88 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr89 = princessProver87.mkOr(proverExpr_array88);
    jayhorn.solver.ProverExpr proverExpr90 = princessProver84.mkOr(proverExpr_array88);
    jayhorn.solver.princess.PrincessProver princessProver91 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array92 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr93 = princessProver91.mkOr(proverExpr_array92);
    jayhorn.solver.BoolType boolType95 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str96 = boolType95.toString();
    jayhorn.solver.ProverExpr proverExpr97 = princessProver91.mkHornVariable("hi!", (jayhorn.solver.ProverType)boolType95);
    jayhorn.solver.ProverExpr proverExpr98 = princessProver84.mkNeg(proverExpr97);
    main0.test03((jayhorn.solver.Prover)princessProver84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Bool"+ "'", str10.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "Bool"+ "'", str37.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "Bool"+ "'", str56.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "Bool"+ "'", str72.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str79 + "' != '" + "Bool"+ "'", str79.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str96 + "' != '" + "Bool"+ "'", str96.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr97);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr98);

  }

  @Test
  public void test226() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test226"); }


    soottocfg.randoop.Javac javac0 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac1 = javac0.debug();
    soottocfg.cfg.util.Tree tree2 = new soottocfg.cfg.util.Tree();
    java.util.Set set3 = tree2.getLeaves();
    soottocfg.randoop.Javac javac4 = javac1.sourcepath((java.util.Collection)set3);
    java.lang.String[] str_array5 = soottocfg.randoop.Strings.generateArrayOfStrings((java.util.Collection)set3);
    soottocfg.randoop.Classpath classpath6 = soottocfg.randoop.Classpath.of((java.util.Collection)set3);
    java.lang.String[] str_array7 = soottocfg.randoop.Strings.generateArrayOfStrings((java.util.Collection)set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(classpath6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);

  }

  @Test
  public void test227() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test227"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver1 = new jayhorn.solver.princess.PrincessProver();
    princessProver1.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver4 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array5 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr6 = princessProver4.mkOr(proverExpr_array5);
    jayhorn.solver.ProverExpr proverExpr7 = princessProver1.mkOr(proverExpr_array5);
    jayhorn.solver.BoolType boolType9 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str10 = boolType9.toString();
    jayhorn.solver.ProverType[] proverType_array11 = new jayhorn.solver.ProverType[] { boolType9 };
    jayhorn.solver.princess.PrincessProver princessProver12 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array13 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr14 = princessProver12.mkOr(proverExpr_array13);
    jayhorn.solver.ProverFun proverFun15 = princessProver1.mkDefinedFunction("hi!", proverType_array11, proverExpr14);
    jayhorn.solver.ProverExpr proverExpr17 = princessProver1.mkLiteral((-1));
    jayhorn.solver.IntType intType18 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr19 = princessProver0.mkAll(proverExpr17, (jayhorn.solver.ProverType)intType18);
    jayhorn.solver.ProverResult proverResult21 = princessProver0.getResult(10L);
    jayhorn.solver.princess.PrincessProver princessProver22 = new jayhorn.solver.princess.PrincessProver();
    princessProver22.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver25 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array26 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr27 = princessProver25.mkOr(proverExpr_array26);
    jayhorn.solver.ProverExpr proverExpr28 = princessProver22.mkOr(proverExpr_array26);
    jayhorn.solver.BoolType boolType30 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str31 = boolType30.toString();
    jayhorn.solver.ProverType[] proverType_array32 = new jayhorn.solver.ProverType[] { boolType30 };
    jayhorn.solver.princess.PrincessProver princessProver33 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array34 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr35 = princessProver33.mkOr(proverExpr_array34);
    jayhorn.solver.ProverFun proverFun36 = princessProver22.mkDefinedFunction("hi!", proverType_array32, proverExpr35);
    jayhorn.solver.ProverExpr proverExpr38 = princessProver22.mkLiteral((-1));
    jayhorn.solver.princess.PrincessProver princessProver39 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array40 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr41 = princessProver39.mkOr(proverExpr_array40);
    jayhorn.solver.ProverExpr proverExpr42 = princessProver22.mkAnd(proverExpr_array40);
    jayhorn.solver.ProverExpr[] proverExpr_array43 = princessProver0.freeVariables(proverExpr42);
    jayhorn.solver.princess.PrincessProver princessProver44 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array45 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr46 = princessProver44.mkOr(proverExpr_array45);
    jayhorn.solver.BoolType boolType48 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str49 = boolType48.toString();
    jayhorn.solver.ProverExpr proverExpr50 = princessProver44.mkHornVariable("hi!", (jayhorn.solver.ProverType)boolType48);
    jayhorn.util.SimplCfgToProver simplCfgToProver51 = new jayhorn.util.SimplCfgToProver((jayhorn.solver.Prover)princessProver44);
    jayhorn.solver.ArrayType arrayType54 = new jayhorn.solver.ArrayType(10);
    soottocfg.randoop.Javac javac55 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac56 = javac55.debug();
    soottocfg.cfg.util.Tree tree57 = new soottocfg.cfg.util.Tree();
    java.util.Set set58 = tree57.getLeaves();
    soottocfg.randoop.Javac javac59 = javac56.sourcepath((java.util.Collection)set58);
    soottocfg.randoop.Javac javac60 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac61 = javac60.debug();
    soottocfg.cfg.util.Tree tree62 = new soottocfg.cfg.util.Tree();
    java.util.Set set63 = tree62.getLeaves();
    soottocfg.randoop.Javac javac64 = javac61.sourcepath((java.util.Collection)set63);
    soottocfg.randoop.Javac javac65 = javac56.sourcepath((java.util.Collection)set63);
    soottocfg.randoop.Javac javac66 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac67 = javac66.debug();
    soottocfg.cfg.util.Tree tree68 = new soottocfg.cfg.util.Tree();
    java.util.Set set69 = tree68.getLeaves();
    soottocfg.randoop.Javac javac70 = javac67.sourcepath((java.util.Collection)set69);
    boolean b71 = javac67.inDebugMode();
    boolean b72 = javac67.inDebugMode();
    soottocfg.randoop.Classpath classpath73 = new soottocfg.randoop.Classpath();
    soottocfg.randoop.Javac javac74 = javac67.classpath(classpath73);
    soottocfg.randoop.Javac javac75 = javac56.bootClasspath(classpath73);
    java.util.List list76 = javac75.version();
    boolean b77 = arrayType54.equals((java.lang.Object)javac75);
    jayhorn.solver.ProverExpr proverExpr78 = princessProver44.mkHornVariable("", (jayhorn.solver.ProverType)arrayType54);
    jayhorn.solver.princess.PrincessProver princessProver79 = new jayhorn.solver.princess.PrincessProver();
    princessProver79.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver82 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array83 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr84 = princessProver82.mkOr(proverExpr_array83);
    jayhorn.solver.ProverExpr proverExpr85 = princessProver79.mkOr(proverExpr_array83);
    jayhorn.solver.princess.PrincessProver princessProver86 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array87 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr88 = princessProver86.mkOr(proverExpr_array87);
    jayhorn.solver.BoolType boolType90 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str91 = boolType90.toString();
    jayhorn.solver.ProverExpr proverExpr92 = princessProver86.mkHornVariable("hi!", (jayhorn.solver.ProverType)boolType90);
    jayhorn.solver.ProverExpr proverExpr93 = princessProver79.mkNeg(proverExpr92);
    jayhorn.solver.ProverExpr proverExpr94 = princessProver0.mkTMod(proverExpr78, proverExpr93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Bool"+ "'", str10.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverResult21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "Bool"+ "'", str31.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "Bool"+ "'", str49.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str91 + "' != '" + "Bool"+ "'", str91.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr94);

  }

  @Test
  public void test228() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test228"); }


    soottocfg.cfg.Program program0 = new soottocfg.cfg.Program();
    org.jgrapht.DirectedGraph directedGraph1 = program0.getCallGraph();
    java.util.Set set2 = soottocfg.cfg.util.GraphUtil.getSinks(directedGraph1);
    soottocfg.randoop.Javac javac3 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac4 = javac3.debug();
    soottocfg.cfg.util.Tree tree5 = new soottocfg.cfg.util.Tree();
    java.util.Set set6 = tree5.getLeaves();
    soottocfg.randoop.Javac javac7 = javac4.sourcepath((java.util.Collection)set6);
    soottocfg.randoop.Javac javac8 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac9 = javac8.debug();
    soottocfg.cfg.util.Tree tree10 = new soottocfg.cfg.util.Tree();
    java.util.Set set11 = tree10.getLeaves();
    soottocfg.randoop.Javac javac12 = javac9.sourcepath((java.util.Collection)set11);
    soottocfg.randoop.Javac javac13 = javac4.sourcepath((java.util.Collection)set11);
    soottocfg.randoop.Javac javac14 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac15 = javac14.debug();
    soottocfg.cfg.util.Tree tree16 = new soottocfg.cfg.util.Tree();
    java.util.Set set17 = tree16.getLeaves();
    soottocfg.randoop.Javac javac18 = javac15.sourcepath((java.util.Collection)set17);
    boolean b19 = javac15.inDebugMode();
    boolean b20 = javac15.inDebugMode();
    soottocfg.randoop.Classpath classpath21 = new soottocfg.randoop.Classpath();
    soottocfg.randoop.Javac javac22 = javac15.classpath(classpath21);
    soottocfg.randoop.Javac javac23 = javac4.bootClasspath(classpath21);
    java.util.List list24 = javac23.version();
    java.io.File[] file_array25 = new java.io.File[] {  };
    soottocfg.randoop.Javac javac26 = javac23.classpath(file_array25);
    // The following exception was thrown during execution in test generation
    try {
      soottocfg.cfg.util.Dominators dominators27 = new soottocfg.cfg.util.Dominators(directedGraph1, (java.lang.Object)file_array25);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(directedGraph1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(file_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac26);

  }

  @Test
  public void test229() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test229"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    princessProver0.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver3 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array4 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr5 = princessProver3.mkOr(proverExpr_array4);
    jayhorn.solver.ProverExpr proverExpr6 = princessProver0.mkOr(proverExpr_array4);
    jayhorn.solver.BoolType boolType8 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str9 = boolType8.toString();
    jayhorn.solver.ProverType[] proverType_array10 = new jayhorn.solver.ProverType[] { boolType8 };
    jayhorn.solver.princess.PrincessProver princessProver11 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array12 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr13 = princessProver11.mkOr(proverExpr_array12);
    jayhorn.solver.ProverFun proverFun14 = princessProver0.mkDefinedFunction("hi!", proverType_array10, proverExpr13);
    princessProver0.setPartitionNumber(10);
    jayhorn.solver.ProverType proverType17 = princessProver0.getBooleanType();
    jayhorn.solver.princess.PrincessProver princessProver18 = new jayhorn.solver.princess.PrincessProver();
    princessProver18.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver21 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array22 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr23 = princessProver21.mkOr(proverExpr_array22);
    jayhorn.solver.ProverExpr proverExpr24 = princessProver18.mkOr(proverExpr_array22);
    jayhorn.solver.princess.PrincessProver princessProver25 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array26 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr27 = princessProver25.mkOr(proverExpr_array26);
    jayhorn.solver.BoolType boolType29 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str30 = boolType29.toString();
    jayhorn.solver.ProverExpr proverExpr31 = princessProver25.mkHornVariable("hi!", (jayhorn.solver.ProverType)boolType29);
    jayhorn.solver.ProverExpr proverExpr32 = princessProver18.mkNeg(proverExpr31);
    jayhorn.solver.ProverExpr proverExpr33 = princessProver0.mkNot(proverExpr31);
    princessProver0.setHornLogic(true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Bool"+ "'", str9.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "Bool"+ "'", str30.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr33);

  }

  @Test
  public void test230() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test230"); }


    jayhorn.Options options0 = jayhorn.Options.v();
    boolean b1 = options0.hasScope();
    java.lang.String str2 = options0.getScope();
    jayhorn.Log.error((java.lang.Object)options0);
    java.lang.String str4 = options0.getJavaInput();
    java.lang.String str5 = options0.getChecker();
    java.lang.String str6 = options0.getClasspath();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(options0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "safety"+ "'", str5.equals("safety"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "Int"+ "'", str6.equals("Int"));

  }

  @Test
  public void test231() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test231"); }


    soottocfg.cfg.Program program0 = new soottocfg.cfg.Program();
    soottocfg.cfg.Variable[] variable_array1 = program0.getGlobalVariables();
    soottocfg.cfg.method.Method method3 = program0.loopupMethod("javac 1.8.0_72");
    soottocfg.cfg.method.Method method5 = program0.loopupMethod("\\forall int v0; -1 = 0 <- -1*-1");
    soottocfg.cfg.method.Method[] method_array6 = program0.getEntryPoints();
    soottocfg.cfg.method.Method[] method_array7 = program0.getMethods();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(variable_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(method3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(method5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(method_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(method_array7);

  }

  @Test
  public void test232() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test232"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver1 = new jayhorn.solver.princess.PrincessProver();
    princessProver1.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver4 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array5 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr6 = princessProver4.mkOr(proverExpr_array5);
    jayhorn.solver.ProverExpr proverExpr7 = princessProver1.mkOr(proverExpr_array5);
    jayhorn.solver.BoolType boolType9 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str10 = boolType9.toString();
    jayhorn.solver.ProverType[] proverType_array11 = new jayhorn.solver.ProverType[] { boolType9 };
    jayhorn.solver.princess.PrincessProver princessProver12 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array13 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr14 = princessProver12.mkOr(proverExpr_array13);
    jayhorn.solver.ProverFun proverFun15 = princessProver1.mkDefinedFunction("hi!", proverType_array11, proverExpr14);
    jayhorn.solver.ProverExpr proverExpr17 = princessProver1.mkLiteral((-1));
    jayhorn.solver.IntType intType18 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr19 = princessProver0.mkAll(proverExpr17, (jayhorn.solver.ProverType)intType18);
    jayhorn.solver.princess.PrincessProver princessProver20 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array21 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr22 = princessProver20.mkOr(proverExpr_array21);
    jayhorn.solver.princess.PrincessProver princessProver23 = new jayhorn.solver.princess.PrincessProver();
    princessProver23.setPartitionNumber((-1));
    princessProver23.reset();
    jayhorn.solver.princess.PrincessProver princessProver27 = new jayhorn.solver.princess.PrincessProver();
    princessProver27.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver30 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array31 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr32 = princessProver30.mkOr(proverExpr_array31);
    jayhorn.solver.ProverExpr proverExpr33 = princessProver27.mkOr(proverExpr_array31);
    jayhorn.solver.BoolType boolType35 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str36 = boolType35.toString();
    jayhorn.solver.ProverType[] proverType_array37 = new jayhorn.solver.ProverType[] { boolType35 };
    jayhorn.solver.princess.PrincessProver princessProver38 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array39 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr40 = princessProver38.mkOr(proverExpr_array39);
    jayhorn.solver.ProverFun proverFun41 = princessProver27.mkDefinedFunction("hi!", proverType_array37, proverExpr40);
    jayhorn.solver.ProverExpr proverExpr43 = princessProver27.mkLiteral((-1));
    jayhorn.solver.ProverExpr proverExpr44 = princessProver23.mkNeg(proverExpr43);
    jayhorn.solver.z3.Z3HornExpr z3HornExpr45 = new jayhorn.solver.z3.Z3HornExpr(proverExpr19, proverExpr_array21, proverExpr44);
    java.lang.String str46 = z3HornExpr45.toString();
    jayhorn.solver.ProverExpr proverExpr47 = z3HornExpr45.getConstraint();
    // The following exception was thrown during execution in test generation
    try {
      boolean b48 = z3HornExpr45.getBooleanLiteralValue();
      org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.RuntimeException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Bool"+ "'", str10.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Bool"+ "'", str36.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "\\forall int v0; -1 = 0 <- -1*-1"+ "'", str46.equals("\\forall int v0; -1 = 0 <- -1*-1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr47);

  }

  @Test
  public void test233() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test233"); }


    soottocfg.randoop.Javac javac0 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac1 = javac0.debug();
    soottocfg.cfg.util.Tree tree2 = new soottocfg.cfg.util.Tree();
    java.util.Set set3 = tree2.getLeaves();
    soottocfg.randoop.Javac javac4 = javac1.sourcepath((java.util.Collection)set3);
    boolean b5 = javac1.inDebugMode();
    boolean b6 = javac1.inDebugMode();
    soottocfg.randoop.Classpath classpath7 = new soottocfg.randoop.Classpath();
    soottocfg.randoop.Javac javac8 = javac1.classpath(classpath7);
    soottocfg.randoop.Javac javac9 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac10 = javac9.debug();
    soottocfg.cfg.util.Tree tree11 = new soottocfg.cfg.util.Tree();
    java.util.Set set12 = tree11.getLeaves();
    soottocfg.randoop.Javac javac13 = javac10.sourcepath((java.util.Collection)set12);
    soottocfg.randoop.Javac javac14 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac15 = javac14.debug();
    soottocfg.cfg.util.Tree tree16 = new soottocfg.cfg.util.Tree();
    java.util.Set set17 = tree16.getLeaves();
    soottocfg.randoop.Javac javac18 = javac15.sourcepath((java.util.Collection)set17);
    soottocfg.randoop.Javac javac19 = javac10.sourcepath((java.util.Collection)set17);
    soottocfg.randoop.Javac javac20 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac21 = javac20.debug();
    soottocfg.cfg.util.Tree tree22 = new soottocfg.cfg.util.Tree();
    java.util.Set set23 = tree22.getLeaves();
    soottocfg.randoop.Javac javac24 = javac21.sourcepath((java.util.Collection)set23);
    boolean b25 = javac21.inDebugMode();
    boolean b26 = javac21.inDebugMode();
    soottocfg.randoop.Classpath classpath27 = new soottocfg.randoop.Classpath();
    soottocfg.randoop.Javac javac28 = javac21.classpath(classpath27);
    soottocfg.randoop.Javac javac29 = javac10.bootClasspath(classpath27);
    java.util.List list30 = javac29.version();
    soottocfg.randoop.Javac javac31 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac32 = javac31.debug();
    soottocfg.cfg.util.Tree tree33 = new soottocfg.cfg.util.Tree();
    java.util.Set set34 = tree33.getLeaves();
    soottocfg.randoop.Javac javac35 = javac32.sourcepath((java.util.Collection)set34);
    boolean b36 = javac32.inDebugMode();
    soottocfg.randoop.Javac javac37 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac38 = javac37.debug();
    soottocfg.cfg.util.Tree tree39 = new soottocfg.cfg.util.Tree();
    java.util.Set set40 = tree39.getLeaves();
    soottocfg.randoop.Javac javac41 = javac38.sourcepath((java.util.Collection)set40);
    soottocfg.randoop.Javac javac42 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac43 = javac42.debug();
    soottocfg.cfg.util.Tree tree44 = new soottocfg.cfg.util.Tree();
    java.util.Set set45 = tree44.getLeaves();
    soottocfg.randoop.Javac javac46 = javac43.sourcepath((java.util.Collection)set45);
    soottocfg.randoop.Javac javac47 = javac38.sourcepath((java.util.Collection)set45);
    soottocfg.randoop.Javac javac48 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac49 = javac48.debug();
    soottocfg.cfg.util.Tree tree50 = new soottocfg.cfg.util.Tree();
    java.util.Set set51 = tree50.getLeaves();
    soottocfg.randoop.Javac javac52 = javac49.sourcepath((java.util.Collection)set51);
    boolean b53 = javac49.inDebugMode();
    boolean b54 = javac49.inDebugMode();
    soottocfg.randoop.Classpath classpath55 = new soottocfg.randoop.Classpath();
    soottocfg.randoop.Javac javac56 = javac49.classpath(classpath55);
    soottocfg.randoop.Javac javac57 = javac38.bootClasspath(classpath55);
    soottocfg.randoop.Javac javac58 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac59 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac60 = javac59.debug();
    soottocfg.cfg.util.Tree tree61 = new soottocfg.cfg.util.Tree();
    java.util.Set set62 = tree61.getLeaves();
    soottocfg.randoop.Javac javac63 = javac60.sourcepath((java.util.Collection)set62);
    soottocfg.randoop.Javac javac64 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac65 = javac64.debug();
    soottocfg.cfg.util.Tree tree66 = new soottocfg.cfg.util.Tree();
    java.util.Set set67 = tree66.getLeaves();
    soottocfg.randoop.Javac javac68 = javac65.sourcepath((java.util.Collection)set67);
    soottocfg.randoop.Javac javac69 = javac60.sourcepath((java.util.Collection)set67);
    soottocfg.randoop.Javac javac70 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac71 = javac70.debug();
    soottocfg.cfg.util.Tree tree72 = new soottocfg.cfg.util.Tree();
    java.util.Set set73 = tree72.getLeaves();
    soottocfg.randoop.Javac javac74 = javac71.sourcepath((java.util.Collection)set73);
    boolean b75 = javac71.inDebugMode();
    boolean b76 = javac71.inDebugMode();
    soottocfg.randoop.Classpath classpath77 = new soottocfg.randoop.Classpath();
    soottocfg.randoop.Javac javac78 = javac71.classpath(classpath77);
    soottocfg.randoop.Javac javac79 = javac60.bootClasspath(classpath77);
    java.util.List list80 = javac79.version();
    javac58.log(list80);
    soottocfg.randoop.Javac javac82 = javac57.extraArgs(list80);
    javac32.log(list80);
    soottocfg.randoop.Javac javac84 = javac29.sourcepath((java.util.Collection)list80);
    java.io.File[] file_array85 = new java.io.File[] {  };
    soottocfg.randoop.Classpath classpath86 = soottocfg.randoop.Classpath.of(file_array85);
    soottocfg.randoop.Javac javac87 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac88 = javac87.debug();
    soottocfg.cfg.util.Tree tree89 = new soottocfg.cfg.util.Tree();
    java.util.Set set90 = tree89.getLeaves();
    soottocfg.randoop.Javac javac91 = javac88.sourcepath((java.util.Collection)set90);
    java.io.File[] file_array92 = new java.io.File[] {  };
    soottocfg.randoop.Javac javac93 = javac91.sourcepath(file_array92);
    classpath86.addAll(file_array92);
    java.util.List list95 = javac84.compile(file_array92);
    soottocfg.randoop.Javac javac96 = javac8.sourcepath(file_array92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(file_array85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(classpath86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(file_array92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac96);

  }

  @Test
  public void test234() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test234"); }


    soottocfg.cfg.util.Tree tree0 = new soottocfg.cfg.util.Tree();
    soottocfg.randoop.Javac javac1 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac2 = javac1.debug();
    soottocfg.cfg.util.Tree tree3 = new soottocfg.cfg.util.Tree();
    java.util.Set set4 = tree3.getLeaves();
    soottocfg.randoop.Javac javac5 = javac2.sourcepath((java.util.Collection)set4);
    boolean b6 = javac2.inDebugMode();
    boolean b7 = javac2.inDebugMode();
    soottocfg.randoop.Classpath classpath8 = new soottocfg.randoop.Classpath();
    soottocfg.randoop.Javac javac9 = javac2.classpath(classpath8);
    java.util.List list10 = javac9.version();
    soottocfg.randoop.Javac javac11 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac12 = javac11.debug();
    soottocfg.cfg.util.Tree tree13 = new soottocfg.cfg.util.Tree();
    java.util.Set set14 = tree13.getLeaves();
    soottocfg.randoop.Javac javac15 = javac12.sourcepath((java.util.Collection)set14);
    boolean b16 = javac12.inDebugMode();
    boolean b17 = javac12.inDebugMode();
    soottocfg.randoop.Classpath classpath18 = new soottocfg.randoop.Classpath();
    soottocfg.randoop.Javac javac19 = javac12.classpath(classpath18);
    java.io.File[] file_array20 = new java.io.File[] {  };
    soottocfg.randoop.Classpath classpath21 = soottocfg.randoop.Classpath.of(file_array20);
    classpath18.addAll(file_array20);
    soottocfg.randoop.Javac javac23 = javac9.bootClasspath(classpath18);
    jayhorn.solver.princess.PrincessProver princessProver24 = new jayhorn.solver.princess.PrincessProver();
    princessProver24.setPartitionNumber((-1));
    princessProver24.reset();
    jayhorn.solver.princess.PrincessProver princessProver28 = new jayhorn.solver.princess.PrincessProver();
    princessProver28.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver31 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array32 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr33 = princessProver31.mkOr(proverExpr_array32);
    jayhorn.solver.ProverExpr proverExpr34 = princessProver28.mkOr(proverExpr_array32);
    jayhorn.solver.princess.PrincessProver princessProver35 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver36 = new jayhorn.solver.princess.PrincessProver();
    princessProver36.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver39 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array40 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr41 = princessProver39.mkOr(proverExpr_array40);
    jayhorn.solver.ProverExpr proverExpr42 = princessProver36.mkOr(proverExpr_array40);
    jayhorn.solver.BoolType boolType44 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str45 = boolType44.toString();
    jayhorn.solver.ProverType[] proverType_array46 = new jayhorn.solver.ProverType[] { boolType44 };
    jayhorn.solver.princess.PrincessProver princessProver47 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array48 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr49 = princessProver47.mkOr(proverExpr_array48);
    jayhorn.solver.ProverFun proverFun50 = princessProver36.mkDefinedFunction("hi!", proverType_array46, proverExpr49);
    jayhorn.solver.ProverExpr proverExpr52 = princessProver36.mkLiteral((-1));
    jayhorn.solver.IntType intType53 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr54 = princessProver35.mkAll(proverExpr52, (jayhorn.solver.ProverType)intType53);
    jayhorn.solver.ProverExpr proverExpr55 = princessProver24.mkAnd(proverExpr34, proverExpr54);
    jayhorn.solver.princess.PrincessProver princessProver56 = new jayhorn.solver.princess.PrincessProver();
    princessProver56.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver59 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array60 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr61 = princessProver59.mkOr(proverExpr_array60);
    jayhorn.solver.ProverExpr proverExpr62 = princessProver56.mkOr(proverExpr_array60);
    java.lang.String[] str_array63 = soottocfg.randoop.Strings.generateArrayOfStrings((java.lang.Object[])proverExpr_array60);
    jayhorn.solver.princess.PrincessProver princessProver64 = new jayhorn.solver.princess.PrincessProver();
    princessProver64.setPartitionNumber((-1));
    princessProver64.reset();
    jayhorn.solver.princess.PrincessProver princessProver68 = new jayhorn.solver.princess.PrincessProver();
    princessProver68.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver71 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array72 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr73 = princessProver71.mkOr(proverExpr_array72);
    jayhorn.solver.ProverExpr proverExpr74 = princessProver68.mkOr(proverExpr_array72);
    jayhorn.solver.princess.PrincessProver princessProver75 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver76 = new jayhorn.solver.princess.PrincessProver();
    princessProver76.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver79 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array80 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr81 = princessProver79.mkOr(proverExpr_array80);
    jayhorn.solver.ProverExpr proverExpr82 = princessProver76.mkOr(proverExpr_array80);
    jayhorn.solver.BoolType boolType84 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str85 = boolType84.toString();
    jayhorn.solver.ProverType[] proverType_array86 = new jayhorn.solver.ProverType[] { boolType84 };
    jayhorn.solver.princess.PrincessProver princessProver87 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array88 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr89 = princessProver87.mkOr(proverExpr_array88);
    jayhorn.solver.ProverFun proverFun90 = princessProver76.mkDefinedFunction("hi!", proverType_array86, proverExpr89);
    jayhorn.solver.ProverExpr proverExpr92 = princessProver76.mkLiteral((-1));
    jayhorn.solver.IntType intType93 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr94 = princessProver75.mkAll(proverExpr92, (jayhorn.solver.ProverType)intType93);
    jayhorn.solver.ProverExpr proverExpr95 = princessProver64.mkAnd(proverExpr74, proverExpr94);
    jayhorn.solver.z3.Z3HornExpr z3HornExpr96 = new jayhorn.solver.z3.Z3HornExpr(proverExpr55, proverExpr_array60, proverExpr74);
    tree0.addEdge((java.lang.Object)javac23, (java.lang.Object)proverExpr74);
    java.util.Set set98 = tree0.getLeaves();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(file_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(classpath21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "Bool"+ "'", str45.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str85 + "' != '" + "Bool"+ "'", str85.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set98);

  }

  @Test
  public void test235() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test235"); }


    soottocfg.randoop.Javac javac1 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac2 = javac1.debug();
    soottocfg.cfg.util.Tree tree3 = new soottocfg.cfg.util.Tree();
    java.util.Set set4 = tree3.getLeaves();
    soottocfg.randoop.Javac javac5 = javac2.sourcepath((java.util.Collection)set4);
    soottocfg.randoop.Javac javac6 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac7 = javac6.debug();
    soottocfg.cfg.util.Tree tree8 = new soottocfg.cfg.util.Tree();
    java.util.Set set9 = tree8.getLeaves();
    soottocfg.randoop.Javac javac10 = javac7.sourcepath((java.util.Collection)set9);
    soottocfg.randoop.Javac javac11 = javac2.sourcepath((java.util.Collection)set9);
    soottocfg.cfg.ClassVariable classVariable12 = new soottocfg.cfg.ClassVariable("\\forall int v0; -1 = 0 <- -1*-1", (java.util.Collection)set9);
    java.lang.String str13 = classVariable12.toString();
    boolean b14 = classVariable12.isUnique();
    java.lang.String str15 = classVariable12.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\\forall int v0; -1 = 0 <- -1*-1"+ "'", str13.equals("\\forall int v0; -1 = 0 <- -1*-1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "\\forall int v0; -1 = 0 <- -1*-1"+ "'", str15.equals("\\forall int v0; -1 = 0 <- -1*-1"));

  }

  @Test
  public void test236() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test236"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    princessProver0.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver3 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array4 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr5 = princessProver3.mkOr(proverExpr_array4);
    jayhorn.solver.ProverExpr proverExpr6 = princessProver0.mkOr(proverExpr_array4);
    jayhorn.solver.BoolType boolType8 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str9 = boolType8.toString();
    jayhorn.solver.ProverType[] proverType_array10 = new jayhorn.solver.ProverType[] { boolType8 };
    jayhorn.solver.princess.PrincessProver princessProver11 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array12 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr13 = princessProver11.mkOr(proverExpr_array12);
    jayhorn.solver.ProverFun proverFun14 = princessProver0.mkDefinedFunction("hi!", proverType_array10, proverExpr13);
    jayhorn.solver.princess.PrincessProver princessProver16 = new jayhorn.solver.princess.PrincessProver();
    princessProver16.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver19 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array20 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr21 = princessProver19.mkOr(proverExpr_array20);
    jayhorn.solver.ProverExpr proverExpr22 = princessProver16.mkOr(proverExpr_array20);
    jayhorn.solver.BoolType boolType24 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str25 = boolType24.toString();
    jayhorn.solver.ProverType[] proverType_array26 = new jayhorn.solver.ProverType[] { boolType24 };
    jayhorn.solver.princess.PrincessProver princessProver27 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array28 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr29 = princessProver27.mkOr(proverExpr_array28);
    jayhorn.solver.ProverFun proverFun30 = princessProver16.mkDefinedFunction("hi!", proverType_array26, proverExpr29);
    jayhorn.solver.BoolType boolType31 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str32 = boolType31.toString();
    jayhorn.solver.ProverFun proverFun33 = princessProver0.mkUnintFunction("", proverType_array26, (jayhorn.solver.ProverType)boolType31);
    jayhorn.solver.ProverType proverType34 = princessProver0.getIntType();
    jayhorn.solver.princess.PrincessProver princessProver35 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver36 = new jayhorn.solver.princess.PrincessProver();
    princessProver36.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver39 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array40 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr41 = princessProver39.mkOr(proverExpr_array40);
    jayhorn.solver.ProverExpr proverExpr42 = princessProver36.mkOr(proverExpr_array40);
    jayhorn.solver.BoolType boolType44 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str45 = boolType44.toString();
    jayhorn.solver.ProverType[] proverType_array46 = new jayhorn.solver.ProverType[] { boolType44 };
    jayhorn.solver.princess.PrincessProver princessProver47 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array48 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr49 = princessProver47.mkOr(proverExpr_array48);
    jayhorn.solver.ProverFun proverFun50 = princessProver36.mkDefinedFunction("hi!", proverType_array46, proverExpr49);
    jayhorn.solver.ProverExpr proverExpr52 = princessProver36.mkLiteral((-1));
    jayhorn.solver.IntType intType53 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr54 = princessProver35.mkAll(proverExpr52, (jayhorn.solver.ProverType)intType53);
    jayhorn.solver.princess.PrincessProver princessProver55 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array56 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr57 = princessProver55.mkOr(proverExpr_array56);
    jayhorn.solver.princess.PrincessProver princessProver58 = new jayhorn.solver.princess.PrincessProver();
    princessProver58.setPartitionNumber((-1));
    princessProver58.reset();
    jayhorn.solver.princess.PrincessProver princessProver62 = new jayhorn.solver.princess.PrincessProver();
    princessProver62.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver65 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array66 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr67 = princessProver65.mkOr(proverExpr_array66);
    jayhorn.solver.ProverExpr proverExpr68 = princessProver62.mkOr(proverExpr_array66);
    jayhorn.solver.BoolType boolType70 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str71 = boolType70.toString();
    jayhorn.solver.ProverType[] proverType_array72 = new jayhorn.solver.ProverType[] { boolType70 };
    jayhorn.solver.princess.PrincessProver princessProver73 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array74 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr75 = princessProver73.mkOr(proverExpr_array74);
    jayhorn.solver.ProverFun proverFun76 = princessProver62.mkDefinedFunction("hi!", proverType_array72, proverExpr75);
    jayhorn.solver.ProverExpr proverExpr78 = princessProver62.mkLiteral((-1));
    jayhorn.solver.ProverExpr proverExpr79 = princessProver58.mkNeg(proverExpr78);
    jayhorn.solver.z3.Z3HornExpr z3HornExpr80 = new jayhorn.solver.z3.Z3HornExpr(proverExpr54, proverExpr_array56, proverExpr79);
    jayhorn.solver.ProverExpr proverExpr81 = princessProver0.mkNot(proverExpr79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Bool"+ "'", str9.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Bool"+ "'", str25.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Bool"+ "'", str32.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "Bool"+ "'", str45.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "Bool"+ "'", str71.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr81);

  }

  @Test
  public void test237() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test237"); }


    soottocfg.cfg.Program program0 = new soottocfg.cfg.Program();
    java.util.Map map1 = program0.getModifiedGlobals();
    soottocfg.cfg.Program program2 = new soottocfg.cfg.Program();
    java.util.Map map3 = program2.getModifiedGlobals();
    soottocfg.cfg.LiveVars liveVars4 = new soottocfg.cfg.LiveVars(map1, map3);
    java.util.Map map5 = liveVars4.liveOut;
    soottocfg.cfg.Program program6 = new soottocfg.cfg.Program();
    java.util.Map map7 = program6.getModifiedGlobals();
    soottocfg.cfg.LiveVars liveVars8 = new soottocfg.cfg.LiveVars(map5, map7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map7);

  }

  @Test
  public void test238() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test238"); }


    soottocfg.cfg.util.Tree tree0 = new soottocfg.cfg.util.Tree();
    tree0.addEdge((java.lang.Object)(short)10, (java.lang.Object)10);
    soottocfg.randoop.Javac javac5 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac6 = javac5.debug();
    soottocfg.cfg.util.Tree tree7 = new soottocfg.cfg.util.Tree();
    java.util.Set set8 = tree7.getLeaves();
    soottocfg.randoop.Javac javac9 = javac6.sourcepath((java.util.Collection)set8);
    soottocfg.randoop.Javac javac10 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac11 = javac10.debug();
    soottocfg.cfg.util.Tree tree12 = new soottocfg.cfg.util.Tree();
    java.util.Set set13 = tree12.getLeaves();
    soottocfg.randoop.Javac javac14 = javac11.sourcepath((java.util.Collection)set13);
    soottocfg.randoop.Javac javac15 = javac6.sourcepath((java.util.Collection)set13);
    java.lang.String[] str_array16 = soottocfg.randoop.Strings.generateArrayOfStrings((java.util.Collection)set13);
    soottocfg.cfg.ClassVariable classVariable17 = new soottocfg.cfg.ClassVariable("\\forall int v0; -1 = 0 <- -1*-1", (java.util.Collection)set13);
    boolean b18 = classVariable17.isConstant();
    soottocfg.cfg.type.Type type19 = classVariable17.getType();
    jayhorn.solver.princess.PrincessProver princessProver20 = new jayhorn.solver.princess.PrincessProver();
    princessProver20.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver23 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array24 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr25 = princessProver23.mkOr(proverExpr_array24);
    jayhorn.solver.ProverExpr proverExpr26 = princessProver20.mkOr(proverExpr_array24);
    jayhorn.solver.BoolType boolType28 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str29 = boolType28.toString();
    jayhorn.solver.ProverType[] proverType_array30 = new jayhorn.solver.ProverType[] { boolType28 };
    jayhorn.solver.princess.PrincessProver princessProver31 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array32 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr33 = princessProver31.mkOr(proverExpr_array32);
    jayhorn.solver.ProverFun proverFun34 = princessProver20.mkDefinedFunction("hi!", proverType_array30, proverExpr33);
    jayhorn.solver.ProverExpr proverExpr36 = princessProver20.mkLiteral((-1));
    jayhorn.solver.princess.PrincessProver princessProver37 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array38 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr39 = princessProver37.mkOr(proverExpr_array38);
    jayhorn.solver.ProverExpr proverExpr40 = princessProver20.mkAnd(proverExpr_array38);
    jayhorn.solver.princess.PrincessProver princessProver41 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver42 = new jayhorn.solver.princess.PrincessProver();
    princessProver42.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver45 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array46 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr47 = princessProver45.mkOr(proverExpr_array46);
    jayhorn.solver.ProverExpr proverExpr48 = princessProver42.mkOr(proverExpr_array46);
    jayhorn.solver.BoolType boolType50 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str51 = boolType50.toString();
    jayhorn.solver.ProverType[] proverType_array52 = new jayhorn.solver.ProverType[] { boolType50 };
    jayhorn.solver.princess.PrincessProver princessProver53 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array54 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr55 = princessProver53.mkOr(proverExpr_array54);
    jayhorn.solver.ProverFun proverFun56 = princessProver42.mkDefinedFunction("hi!", proverType_array52, proverExpr55);
    jayhorn.solver.ProverExpr proverExpr58 = princessProver42.mkLiteral((-1));
    jayhorn.solver.IntType intType59 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr60 = princessProver41.mkAll(proverExpr58, (jayhorn.solver.ProverType)intType59);
    jayhorn.solver.princess.PrincessProver princessProver61 = new jayhorn.solver.princess.PrincessProver();
    princessProver61.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver64 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array65 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr66 = princessProver64.mkOr(proverExpr_array65);
    jayhorn.solver.ProverExpr proverExpr67 = princessProver61.mkOr(proverExpr_array65);
    jayhorn.solver.ProverResult proverResult69 = princessProver61.getResult(false);
    jayhorn.solver.IntType intType71 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr72 = princessProver61.mkHornVariable("Int", (jayhorn.solver.ProverType)intType71);
    jayhorn.solver.ProverExpr proverExpr74 = princessProver61.mkLiteral((-1));
    jayhorn.solver.ProverExpr proverExpr75 = princessProver41.mkNot(proverExpr74);
    jayhorn.solver.ProverExpr[] proverExpr_array76 = princessProver20.freeVariables(proverExpr75);
    // The following exception was thrown during execution in test generation
    try {
      boolean b77 = tree0.isAncestor((java.lang.Object)classVariable17, (java.lang.Object)proverExpr75);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(type19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "Bool"+ "'", str29.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "Bool"+ "'", str51.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverResult69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array76);

  }

  @Test
  public void test239() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test239"); }


    soottocfg.randoop.Javac javac0 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac1 = javac0.debug();
    soottocfg.cfg.util.Tree tree2 = new soottocfg.cfg.util.Tree();
    java.util.Set set3 = tree2.getLeaves();
    soottocfg.randoop.Javac javac4 = javac1.sourcepath((java.util.Collection)set3);
    boolean b5 = javac1.inDebugMode();
    soottocfg.randoop.Javac javac6 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac7 = javac6.debug();
    soottocfg.cfg.util.Tree tree8 = new soottocfg.cfg.util.Tree();
    java.util.Set set9 = tree8.getLeaves();
    soottocfg.randoop.Javac javac10 = javac7.sourcepath((java.util.Collection)set9);
    soottocfg.randoop.Javac javac11 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac12 = javac11.debug();
    soottocfg.cfg.util.Tree tree13 = new soottocfg.cfg.util.Tree();
    java.util.Set set14 = tree13.getLeaves();
    soottocfg.randoop.Javac javac15 = javac12.sourcepath((java.util.Collection)set14);
    soottocfg.randoop.Javac javac16 = javac7.sourcepath((java.util.Collection)set14);
    soottocfg.randoop.Javac javac17 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac18 = javac17.debug();
    soottocfg.cfg.util.Tree tree19 = new soottocfg.cfg.util.Tree();
    java.util.Set set20 = tree19.getLeaves();
    soottocfg.randoop.Javac javac21 = javac18.sourcepath((java.util.Collection)set20);
    boolean b22 = javac18.inDebugMode();
    boolean b23 = javac18.inDebugMode();
    soottocfg.randoop.Classpath classpath24 = new soottocfg.randoop.Classpath();
    soottocfg.randoop.Javac javac25 = javac18.classpath(classpath24);
    soottocfg.randoop.Javac javac26 = javac7.bootClasspath(classpath24);
    soottocfg.randoop.Javac javac27 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac28 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac29 = javac28.debug();
    soottocfg.cfg.util.Tree tree30 = new soottocfg.cfg.util.Tree();
    java.util.Set set31 = tree30.getLeaves();
    soottocfg.randoop.Javac javac32 = javac29.sourcepath((java.util.Collection)set31);
    soottocfg.randoop.Javac javac33 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac34 = javac33.debug();
    soottocfg.cfg.util.Tree tree35 = new soottocfg.cfg.util.Tree();
    java.util.Set set36 = tree35.getLeaves();
    soottocfg.randoop.Javac javac37 = javac34.sourcepath((java.util.Collection)set36);
    soottocfg.randoop.Javac javac38 = javac29.sourcepath((java.util.Collection)set36);
    soottocfg.randoop.Javac javac39 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac40 = javac39.debug();
    soottocfg.cfg.util.Tree tree41 = new soottocfg.cfg.util.Tree();
    java.util.Set set42 = tree41.getLeaves();
    soottocfg.randoop.Javac javac43 = javac40.sourcepath((java.util.Collection)set42);
    boolean b44 = javac40.inDebugMode();
    boolean b45 = javac40.inDebugMode();
    soottocfg.randoop.Classpath classpath46 = new soottocfg.randoop.Classpath();
    soottocfg.randoop.Javac javac47 = javac40.classpath(classpath46);
    soottocfg.randoop.Javac javac48 = javac29.bootClasspath(classpath46);
    java.util.List list49 = javac48.version();
    javac27.log(list49);
    soottocfg.randoop.Javac javac51 = javac26.extraArgs(list49);
    javac1.log(list49);
    soottocfg.randoop.Command command53 = new soottocfg.randoop.Command(list49);
    java.lang.String str54 = command53.toString();
    java.lang.String str55 = command53.toString();
    // The following exception was thrown during execution in test generation
    try {
      java.io.InputStream inputStream56 = command53.getInputStream();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "javac 1.8.0_72"+ "'", str54.equals("javac 1.8.0_72"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "javac 1.8.0_72"+ "'", str55.equals("javac 1.8.0_72"));

  }

  @Test
  public void test240() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test240"); }


    soottocfg.randoop.Javac javac1 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac2 = javac1.debug();
    soottocfg.cfg.util.Tree tree3 = new soottocfg.cfg.util.Tree();
    java.util.Set set4 = tree3.getLeaves();
    soottocfg.randoop.Javac javac5 = javac2.sourcepath((java.util.Collection)set4);
    soottocfg.randoop.Javac javac6 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac7 = javac6.debug();
    soottocfg.cfg.util.Tree tree8 = new soottocfg.cfg.util.Tree();
    java.util.Set set9 = tree8.getLeaves();
    soottocfg.randoop.Javac javac10 = javac7.sourcepath((java.util.Collection)set9);
    soottocfg.randoop.Javac javac11 = javac2.sourcepath((java.util.Collection)set9);
    java.lang.String[] str_array12 = soottocfg.randoop.Strings.generateArrayOfStrings((java.util.Collection)set9);
    soottocfg.cfg.ClassVariable classVariable13 = new soottocfg.cfg.ClassVariable("\\forall int v0; -1 = 0 <- -1*-1", (java.util.Collection)set9);
    java.lang.String str14 = classVariable13.getName();
    boolean b15 = classVariable13.isUnique();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\\forall int v0; -1 = 0 <- -1*-1"+ "'", str14.equals("\\forall int v0; -1 = 0 <- -1*-1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);

  }

  @Test
  public void test241() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test241"); }


    soottocfg.cfg.Program program0 = new soottocfg.cfg.Program();
    org.jgrapht.DirectedGraph directedGraph1 = program0.getCallGraph();
    org.jgrapht.DirectedGraph directedGraph2 = program0.getCallGraph();
    org.jgrapht.DirectedGraph directedGraph3 = program0.getCallGraph();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(directedGraph1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(directedGraph2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(directedGraph3);

  }

  @Test
  public void test242() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test242"); }


    jayhorn.Options options0 = jayhorn.Options.v();
    boolean b1 = options0.hasScope();
    java.lang.String str2 = options0.getScope();
    jayhorn.Log.error((java.lang.Object)options0);
    boolean b4 = options0.hasScope();
    boolean b5 = options0.hasScope();
    options0.setClasspath("");
    java.lang.String str8 = options0.getAndroidStubPath();
    java.lang.String str9 = options0.getClasspath();
    java.lang.String str10 = options0.getClasspath();
    int i11 = options0.getTimeout();
    java.lang.String str12 = options0.getJavaInput();
    java.lang.String str13 = options0.getAndroidStubPath();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(options0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "false"+ "'", str8.equals("false"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "false"+ "'", str13.equals("false"));

  }

  @Test
  public void test243() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test243"); }


    soottocfg.randoop.Classpath classpath0 = new soottocfg.randoop.Classpath();
    java.util.Collection collection1 = classpath0.getElements();
    java.util.Collection collection2 = classpath0.getElements();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);

  }

  @Test
  public void test244() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test244"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    princessProver0.setPartitionNumber((-1));
    princessProver0.reset();
    jayhorn.solver.ProverExpr proverExpr5 = princessProver0.mkLiteral(true);
    jayhorn.solver.ProverResult proverResult6 = princessProver0.stop();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverResult6);

  }

  @Test
  public void test245() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test245"); }


    soottocfg.cfg.Program program0 = new soottocfg.cfg.Program();
    soottocfg.cfg.Variable[] variable_array1 = program0.getGlobalVariables();
    org.jgrapht.DirectedGraph directedGraph2 = program0.getCallGraph();
    java.util.Set set3 = soottocfg.cfg.util.GraphUtil.getSinks(directedGraph2);
    java.util.Set set4 = soottocfg.cfg.util.GraphUtil.getSinks(directedGraph2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(variable_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(directedGraph2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);

  }

  @Test
  public void test246() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test246"); }


    soottocfg.randoop.Javac javac0 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac1 = javac0.debug();
    soottocfg.cfg.util.Tree tree2 = new soottocfg.cfg.util.Tree();
    java.util.Set set3 = tree2.getLeaves();
    soottocfg.randoop.Javac javac4 = javac1.sourcepath((java.util.Collection)set3);
    boolean b5 = javac1.inDebugMode();
    soottocfg.randoop.Javac javac6 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac7 = javac6.debug();
    soottocfg.cfg.util.Tree tree8 = new soottocfg.cfg.util.Tree();
    java.util.Set set9 = tree8.getLeaves();
    soottocfg.randoop.Javac javac10 = javac7.sourcepath((java.util.Collection)set9);
    soottocfg.randoop.Javac javac11 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac12 = javac11.debug();
    soottocfg.cfg.util.Tree tree13 = new soottocfg.cfg.util.Tree();
    java.util.Set set14 = tree13.getLeaves();
    soottocfg.randoop.Javac javac15 = javac12.sourcepath((java.util.Collection)set14);
    soottocfg.randoop.Javac javac16 = javac7.sourcepath((java.util.Collection)set14);
    soottocfg.randoop.Javac javac17 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac18 = javac17.debug();
    soottocfg.cfg.util.Tree tree19 = new soottocfg.cfg.util.Tree();
    java.util.Set set20 = tree19.getLeaves();
    soottocfg.randoop.Javac javac21 = javac18.sourcepath((java.util.Collection)set20);
    boolean b22 = javac18.inDebugMode();
    boolean b23 = javac18.inDebugMode();
    soottocfg.randoop.Classpath classpath24 = new soottocfg.randoop.Classpath();
    soottocfg.randoop.Javac javac25 = javac18.classpath(classpath24);
    soottocfg.randoop.Javac javac26 = javac7.bootClasspath(classpath24);
    soottocfg.randoop.Javac javac27 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac28 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac29 = javac28.debug();
    soottocfg.cfg.util.Tree tree30 = new soottocfg.cfg.util.Tree();
    java.util.Set set31 = tree30.getLeaves();
    soottocfg.randoop.Javac javac32 = javac29.sourcepath((java.util.Collection)set31);
    soottocfg.randoop.Javac javac33 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac34 = javac33.debug();
    soottocfg.cfg.util.Tree tree35 = new soottocfg.cfg.util.Tree();
    java.util.Set set36 = tree35.getLeaves();
    soottocfg.randoop.Javac javac37 = javac34.sourcepath((java.util.Collection)set36);
    soottocfg.randoop.Javac javac38 = javac29.sourcepath((java.util.Collection)set36);
    soottocfg.randoop.Javac javac39 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac40 = javac39.debug();
    soottocfg.cfg.util.Tree tree41 = new soottocfg.cfg.util.Tree();
    java.util.Set set42 = tree41.getLeaves();
    soottocfg.randoop.Javac javac43 = javac40.sourcepath((java.util.Collection)set42);
    boolean b44 = javac40.inDebugMode();
    boolean b45 = javac40.inDebugMode();
    soottocfg.randoop.Classpath classpath46 = new soottocfg.randoop.Classpath();
    soottocfg.randoop.Javac javac47 = javac40.classpath(classpath46);
    soottocfg.randoop.Javac javac48 = javac29.bootClasspath(classpath46);
    java.util.List list49 = javac48.version();
    javac27.log(list49);
    soottocfg.randoop.Javac javac51 = javac26.extraArgs(list49);
    javac1.log(list49);
    soottocfg.randoop.Command command53 = new soottocfg.randoop.Command(list49);
    java.lang.String str54 = command53.toString();
    java.lang.String str55 = command53.toString();
    boolean b56 = command53.isStarted();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "javac 1.8.0_72"+ "'", str54.equals("javac 1.8.0_72"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "javac 1.8.0_72"+ "'", str55.equals("javac 1.8.0_72"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);

  }

  @Test
  public void test247() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test247"); }


    jayhorn.solver.princess.PrincessProver princessProver0 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array1 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr2 = princessProver0.mkOr(proverExpr_array1);
    jayhorn.solver.BoolType boolType4 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str5 = boolType4.toString();
    jayhorn.solver.ProverExpr proverExpr6 = princessProver0.mkHornVariable("hi!", (jayhorn.solver.ProverType)boolType4);
    jayhorn.util.SimplCfgToProver simplCfgToProver7 = new jayhorn.util.SimplCfgToProver((jayhorn.solver.Prover)princessProver0);
    jayhorn.solver.princess.PrincessProver princessProver8 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.princess.PrincessProver princessProver9 = new jayhorn.solver.princess.PrincessProver();
    princessProver9.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver12 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array13 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr14 = princessProver12.mkOr(proverExpr_array13);
    jayhorn.solver.ProverExpr proverExpr15 = princessProver9.mkOr(proverExpr_array13);
    jayhorn.solver.BoolType boolType17 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str18 = boolType17.toString();
    jayhorn.solver.ProverType[] proverType_array19 = new jayhorn.solver.ProverType[] { boolType17 };
    jayhorn.solver.princess.PrincessProver princessProver20 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array21 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr22 = princessProver20.mkOr(proverExpr_array21);
    jayhorn.solver.ProverFun proverFun23 = princessProver9.mkDefinedFunction("hi!", proverType_array19, proverExpr22);
    jayhorn.solver.ProverExpr proverExpr25 = princessProver9.mkLiteral((-1));
    jayhorn.solver.IntType intType26 = jayhorn.solver.IntType.INSTANCE;
    jayhorn.solver.ProverExpr proverExpr27 = princessProver8.mkAll(proverExpr25, (jayhorn.solver.ProverType)intType26);
    jayhorn.solver.princess.PrincessProver princessProver28 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array29 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr30 = princessProver28.mkOr(proverExpr_array29);
    jayhorn.solver.princess.PrincessProver princessProver31 = new jayhorn.solver.princess.PrincessProver();
    princessProver31.setPartitionNumber((-1));
    princessProver31.reset();
    jayhorn.solver.princess.PrincessProver princessProver35 = new jayhorn.solver.princess.PrincessProver();
    princessProver35.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver38 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array39 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr40 = princessProver38.mkOr(proverExpr_array39);
    jayhorn.solver.ProverExpr proverExpr41 = princessProver35.mkOr(proverExpr_array39);
    jayhorn.solver.BoolType boolType43 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str44 = boolType43.toString();
    jayhorn.solver.ProverType[] proverType_array45 = new jayhorn.solver.ProverType[] { boolType43 };
    jayhorn.solver.princess.PrincessProver princessProver46 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array47 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr48 = princessProver46.mkOr(proverExpr_array47);
    jayhorn.solver.ProverFun proverFun49 = princessProver35.mkDefinedFunction("hi!", proverType_array45, proverExpr48);
    jayhorn.solver.ProverExpr proverExpr51 = princessProver35.mkLiteral((-1));
    jayhorn.solver.ProverExpr proverExpr52 = princessProver31.mkNeg(proverExpr51);
    jayhorn.solver.z3.Z3HornExpr z3HornExpr53 = new jayhorn.solver.z3.Z3HornExpr(proverExpr27, proverExpr_array29, proverExpr52);
    jayhorn.solver.ProverExpr proverExpr54 = z3HornExpr53.getHead();
    jayhorn.solver.ProverExpr[] proverExpr_array55 = new jayhorn.solver.ProverExpr[] { proverExpr54 };
    jayhorn.solver.ProverExpr proverExpr56 = princessProver0.mkAnd(proverExpr_array55);
    jayhorn.solver.ProverType proverType57 = princessProver0.getBooleanType();
    jayhorn.solver.princess.PrincessProver princessProver58 = new jayhorn.solver.princess.PrincessProver();
    princessProver58.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver61 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array62 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr63 = princessProver61.mkOr(proverExpr_array62);
    jayhorn.solver.ProverExpr proverExpr64 = princessProver58.mkOr(proverExpr_array62);
    jayhorn.solver.BoolType boolType66 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str67 = boolType66.toString();
    jayhorn.solver.ProverType[] proverType_array68 = new jayhorn.solver.ProverType[] { boolType66 };
    jayhorn.solver.princess.PrincessProver princessProver69 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array70 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr71 = princessProver69.mkOr(proverExpr_array70);
    jayhorn.solver.ProverFun proverFun72 = princessProver58.mkDefinedFunction("hi!", proverType_array68, proverExpr71);
    jayhorn.solver.ProverExpr proverExpr74 = princessProver58.mkLiteral((-1));
    jayhorn.solver.princess.PrincessProver princessProver75 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array76 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr77 = princessProver75.mkOr(proverExpr_array76);
    jayhorn.solver.ProverExpr proverExpr78 = princessProver58.mkAnd(proverExpr_array76);
    jayhorn.solver.ProverExpr proverExpr79 = princessProver0.mkOr(proverExpr_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Bool"+ "'", str5.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Bool"+ "'", str18.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(intType26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "Bool"+ "'", str44.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "Bool"+ "'", str67.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr79);

  }

  @Test
  public void test248() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test248"); }


    jayhorn.solver.Main main0 = new jayhorn.solver.Main();
    jayhorn.solver.princess.PrincessProver princessProver1 = new jayhorn.solver.princess.PrincessProver();
    princessProver1.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver4 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array5 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr6 = princessProver4.mkOr(proverExpr_array5);
    jayhorn.solver.ProverExpr proverExpr7 = princessProver1.mkOr(proverExpr_array5);
    jayhorn.solver.princess.PrincessProver princessProver8 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array9 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr10 = princessProver8.mkOr(proverExpr_array9);
    jayhorn.solver.BoolType boolType12 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str13 = boolType12.toString();
    jayhorn.solver.ProverExpr proverExpr14 = princessProver8.mkHornVariable("hi!", (jayhorn.solver.ProverType)boolType12);
    jayhorn.solver.ProverExpr proverExpr15 = princessProver1.mkNeg(proverExpr14);
    jayhorn.solver.ProverResult proverResult17 = princessProver1.getResult(true);
    main0.test01((jayhorn.solver.Prover)princessProver1);
    jayhorn.solver.princess.PrincessProver princessProver19 = new jayhorn.solver.princess.PrincessProver();
    princessProver19.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver22 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array23 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr24 = princessProver22.mkOr(proverExpr_array23);
    jayhorn.solver.ProverExpr proverExpr25 = princessProver19.mkOr(proverExpr_array23);
    jayhorn.solver.BoolType boolType27 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str28 = boolType27.toString();
    jayhorn.solver.ProverType[] proverType_array29 = new jayhorn.solver.ProverType[] { boolType27 };
    jayhorn.solver.princess.PrincessProver princessProver30 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array31 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr32 = princessProver30.mkOr(proverExpr_array31);
    jayhorn.solver.ProverFun proverFun33 = princessProver19.mkDefinedFunction("hi!", proverType_array29, proverExpr32);
    princessProver19.setPartitionNumber(10);
    jayhorn.solver.ProverResult proverResult37 = princessProver19.checkSat(false);
    jayhorn.solver.princess.PrincessProver princessProver39 = new jayhorn.solver.princess.PrincessProver();
    princessProver39.setPartitionNumber((-1));
    jayhorn.solver.princess.PrincessProver princessProver42 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array43 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr44 = princessProver42.mkOr(proverExpr_array43);
    jayhorn.solver.ProverExpr proverExpr45 = princessProver39.mkOr(proverExpr_array43);
    jayhorn.solver.BoolType boolType47 = jayhorn.solver.BoolType.INSTANCE;
    java.lang.String str48 = boolType47.toString();
    jayhorn.solver.ProverType[] proverType_array49 = new jayhorn.solver.ProverType[] { boolType47 };
    jayhorn.solver.princess.PrincessProver princessProver50 = new jayhorn.solver.princess.PrincessProver();
    jayhorn.solver.ProverExpr[] proverExpr_array51 = new jayhorn.solver.ProverExpr[] {  };
    jayhorn.solver.ProverExpr proverExpr52 = princessProver50.mkOr(proverExpr_array51);
    jayhorn.solver.ProverFun proverFun53 = princessProver39.mkDefinedFunction("hi!", proverType_array49, proverExpr52);
    princessProver39.setPartitionNumber(10);
    jayhorn.solver.ProverType proverType56 = princessProver39.getBooleanType();
    jayhorn.solver.ProverExpr proverExpr57 = princessProver19.mkHornVariable("Array(10)", proverType56);
    main0.test03((jayhorn.solver.Prover)princessProver19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Bool"+ "'", str13.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverResult17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Bool"+ "'", str28.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverResult37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(boolType47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "Bool"+ "'", str48.equals("Bool"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverFun53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverType56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(proverExpr57);

  }

  @Test
  public void test249() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test249"); }


    soottocfg.randoop.Javac javac0 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac1 = javac0.debug();
    soottocfg.cfg.util.Tree tree2 = new soottocfg.cfg.util.Tree();
    java.util.Set set3 = tree2.getLeaves();
    soottocfg.randoop.Javac javac4 = javac1.sourcepath((java.util.Collection)set3);
    boolean b5 = javac1.inDebugMode();
    boolean b6 = javac1.inDebugMode();
    soottocfg.randoop.Classpath classpath7 = new soottocfg.randoop.Classpath();
    soottocfg.randoop.Javac javac8 = javac1.classpath(classpath7);
    soottocfg.randoop.Javac javac9 = javac1.debug();
    soottocfg.randoop.Javac javac10 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac11 = javac10.debug();
    soottocfg.cfg.util.Tree tree12 = new soottocfg.cfg.util.Tree();
    java.util.Set set13 = tree12.getLeaves();
    soottocfg.randoop.Javac javac14 = javac11.sourcepath((java.util.Collection)set13);
    soottocfg.randoop.Javac javac15 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac16 = javac15.debug();
    soottocfg.cfg.util.Tree tree17 = new soottocfg.cfg.util.Tree();
    java.util.Set set18 = tree17.getLeaves();
    soottocfg.randoop.Javac javac19 = javac16.sourcepath((java.util.Collection)set18);
    soottocfg.randoop.Javac javac20 = javac11.sourcepath((java.util.Collection)set18);
    soottocfg.randoop.Javac javac21 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac22 = javac21.debug();
    soottocfg.cfg.util.Tree tree23 = new soottocfg.cfg.util.Tree();
    java.util.Set set24 = tree23.getLeaves();
    soottocfg.randoop.Javac javac25 = javac22.sourcepath((java.util.Collection)set24);
    boolean b26 = javac22.inDebugMode();
    boolean b27 = javac22.inDebugMode();
    soottocfg.randoop.Classpath classpath28 = new soottocfg.randoop.Classpath();
    soottocfg.randoop.Javac javac29 = javac22.classpath(classpath28);
    soottocfg.randoop.Javac javac30 = javac11.bootClasspath(classpath28);
    java.util.List list31 = javac30.version();
    soottocfg.randoop.Javac javac32 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac33 = javac32.debug();
    soottocfg.cfg.util.Tree tree34 = new soottocfg.cfg.util.Tree();
    java.util.Set set35 = tree34.getLeaves();
    soottocfg.randoop.Javac javac36 = javac33.sourcepath((java.util.Collection)set35);
    boolean b37 = javac33.inDebugMode();
    soottocfg.randoop.Javac javac38 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac39 = javac38.debug();
    soottocfg.cfg.util.Tree tree40 = new soottocfg.cfg.util.Tree();
    java.util.Set set41 = tree40.getLeaves();
    soottocfg.randoop.Javac javac42 = javac39.sourcepath((java.util.Collection)set41);
    soottocfg.randoop.Javac javac43 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac44 = javac43.debug();
    soottocfg.cfg.util.Tree tree45 = new soottocfg.cfg.util.Tree();
    java.util.Set set46 = tree45.getLeaves();
    soottocfg.randoop.Javac javac47 = javac44.sourcepath((java.util.Collection)set46);
    soottocfg.randoop.Javac javac48 = javac39.sourcepath((java.util.Collection)set46);
    soottocfg.randoop.Javac javac49 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac50 = javac49.debug();
    soottocfg.cfg.util.Tree tree51 = new soottocfg.cfg.util.Tree();
    java.util.Set set52 = tree51.getLeaves();
    soottocfg.randoop.Javac javac53 = javac50.sourcepath((java.util.Collection)set52);
    boolean b54 = javac50.inDebugMode();
    boolean b55 = javac50.inDebugMode();
    soottocfg.randoop.Classpath classpath56 = new soottocfg.randoop.Classpath();
    soottocfg.randoop.Javac javac57 = javac50.classpath(classpath56);
    soottocfg.randoop.Javac javac58 = javac39.bootClasspath(classpath56);
    soottocfg.randoop.Javac javac59 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac60 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac61 = javac60.debug();
    soottocfg.cfg.util.Tree tree62 = new soottocfg.cfg.util.Tree();
    java.util.Set set63 = tree62.getLeaves();
    soottocfg.randoop.Javac javac64 = javac61.sourcepath((java.util.Collection)set63);
    soottocfg.randoop.Javac javac65 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac66 = javac65.debug();
    soottocfg.cfg.util.Tree tree67 = new soottocfg.cfg.util.Tree();
    java.util.Set set68 = tree67.getLeaves();
    soottocfg.randoop.Javac javac69 = javac66.sourcepath((java.util.Collection)set68);
    soottocfg.randoop.Javac javac70 = javac61.sourcepath((java.util.Collection)set68);
    soottocfg.randoop.Javac javac71 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac72 = javac71.debug();
    soottocfg.cfg.util.Tree tree73 = new soottocfg.cfg.util.Tree();
    java.util.Set set74 = tree73.getLeaves();
    soottocfg.randoop.Javac javac75 = javac72.sourcepath((java.util.Collection)set74);
    boolean b76 = javac72.inDebugMode();
    boolean b77 = javac72.inDebugMode();
    soottocfg.randoop.Classpath classpath78 = new soottocfg.randoop.Classpath();
    soottocfg.randoop.Javac javac79 = javac72.classpath(classpath78);
    soottocfg.randoop.Javac javac80 = javac61.bootClasspath(classpath78);
    java.util.List list81 = javac80.version();
    javac59.log(list81);
    soottocfg.randoop.Javac javac83 = javac58.extraArgs(list81);
    javac33.log(list81);
    soottocfg.randoop.Javac javac85 = javac30.sourcepath((java.util.Collection)list81);
    java.io.File[] file_array86 = new java.io.File[] {  };
    soottocfg.randoop.Classpath classpath87 = soottocfg.randoop.Classpath.of(file_array86);
    soottocfg.randoop.Javac javac88 = new soottocfg.randoop.Javac();
    soottocfg.randoop.Javac javac89 = javac88.debug();
    soottocfg.cfg.util.Tree tree90 = new soottocfg.cfg.util.Tree();
    java.util.Set set91 = tree90.getLeaves();
    soottocfg.randoop.Javac javac92 = javac89.sourcepath((java.util.Collection)set91);
    java.io.File[] file_array93 = new java.io.File[] {  };
    soottocfg.randoop.Javac javac94 = javac92.sourcepath(file_array93);
    classpath87.addAll(file_array93);
    java.util.List list96 = javac85.compile(file_array93);
    // The following exception was thrown during execution in test generation
    try {
      java.util.List list97 = javac9.compile(file_array93);
      org.junit.Assert.fail("Expected exception of type soottocfg.randoop.Command.CommandFailedException");
    } catch (soottocfg.randoop.Command.CommandFailedException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("soottocfg.randoop.Command.CommandFailedException")) {
        org.junit.Assert.fail("Expected exception of type soottocfg.randoop.Command.CommandFailedException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(file_array86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(classpath87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(file_array93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(javac94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list96);

  }

}
